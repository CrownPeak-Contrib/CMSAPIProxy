<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMSAPIProxy</name>
    </assembly>
    <members>
        <member name="T:AuthConfig.FedAuth">
            <summary>
              This class has parameters used for Federated Authentication.  They map to parameters found
              in the microsoft.identitymodel session under
              federatedAuthentication\wsFederation
            </summary>
        </member>
        <member name="M:AuthConfig.FedAuth.#ctor">
            <summary>
              Constructor to initialize defaults
            </summary>
        </member>
        <member name="P:AuthConfig.FedAuth.Issuer">
            <summary>
              End-point of the token issuer
            </summary>
        </member>
        <member name="P:AuthConfig.FedAuth.Realm">
            <summary>
              Realm used in the wtrealm parameter.  Usually just the top-level Uri for your domain.
            </summary>
        </member>
        <member name="P:AuthConfig.FedAuth.RequireHttps">
            <summary>
              Should communications always be SSL.
              Should probably always be true in production.
            </summary>
        </member>
        <member name="P:AuthConfig.FedAuth.CookieHandlerRequireSsl">
            <summary>
              Should cookies require SSL
              Should probably always be true in production.
            </summary>
        </member>
        <member name="P:AuthConfig.FedAuth.CookieHandlerPath">
            <summary>
              The cookie path.  Defaults to "/".  You should probably always use the
              default unless you know that you need to confine the module to a particular path.
            </summary>
        </member>
        <member name="T:AuthConfig.BasicAuth">
            <summary>
              This class has parameters used for Basic Authentication.
            </summary>
        </member>
        <member name="M:AuthConfig.BasicAuth.#ctor">
            <summary>
              Constructor to initialize defaults
            </summary>
        </member>
        <member name="P:AuthConfig.BasicAuth.RequireHttps">
            <summary>
              Should communications always be SSL.
              Should probably always be true in production.
            </summary>
        </member>
        <member name="T:AuthConfig.Issuer">
            <summary>
              Used to define which certificate issuers we trust
            </summary>
        </member>
        <member name="P:AuthConfig.Issuer.Name">
            <summary>
              Name of the issuer. Not used right now.
            </summary>
        </member>
        <member name="P:AuthConfig.Issuer.Thumbprint">
            <summary>
              Required: Thumbprint of the certificate
            </summary>
        </member>
        <member name="P:AuthConfig.Issuer.Domain">
            <summary>
              Required: Used to verify the issuer.  Can be any string found in the certificate issuer name like "CN=MyCA"
            </summary>
        </member>
        <member name="T:AuthConfig.ClaimType">
            <summary>
              Used to generate FederationMetadata.xml and to define claims to map for variable pages.
              Use https://yourhost/yourapp/FederationMetadata/2007-06/FederationMetadata.xml on your deployed host to
              see the FederationMetadata.xml. (app path optional).
            </summary>
        </member>
        <member name="P:AuthConfig.ClaimType.Type">
            <summary>
              The string, usually a URI, that identifies the claim as seen by the application (relying party) so this is after any
              mapping from the
              original providers claim
            </summary>
        </member>
        <member name="P:AuthConfig.ClaimType.Variable">
            <summary>
              A variable name used in the variable pages to refer to this claim when retrieving the value from the
              Request.ServerVariables
            </summary>
        </member>
        <member name="P:AuthConfig.ClaimType.Optional">
            <summary>
              Used in FederationMetadata.xml
            </summary>
        </member>
        <member name="T:AuthConfig.GateKeeperMode">
            <summary>
              Three modes of operation for the AuthModule
            </summary>
        </member>
        <member name="F:AuthConfig.GateKeeperMode.Off">
            <summary>
              module runs, but returns immediately when requests enter effectively disabling it.
            </summary>
        </member>
        <member name="F:AuthConfig.GateKeeperMode.On">
            <summary>
              All pages require user to be authenticated with Fed Auth.
            </summary>
        </member>
        <member name="F:AuthConfig.GateKeeperMode.PassThrough">
            <summary>
              Only Login page requires Fed Auth
            </summary>
        </member>
        <member name="T:AuthConfig.GateKeeper">
            <summary>
              Holds settings related to the GateKeeper. This is an abstraction for the behavior of the AuthModule.
            </summary>
        </member>
        <member name="P:AuthConfig.GateKeeper.Mode">
            <summary>
              Mode.  <see cref="T:AuthConfig.GateKeeperMode" /> See GateKeeperMode class description.  When publishing this will always match
              the
              value in the Fed Auth Package configuration and so setting this is not advised.
            </summary>
        </member>
        <member name="P:AuthConfig.GateKeeper.IgnoreRoster">
            <summary>
              If true, a user would only need to be logged in and would not have to be on the user list to access the site.
              Defaults to false.  When publishing this will always be false
              and so setting this is not advised.
            </summary>
        </member>
        <member name="T:AuthConfig.StyleSheet">
            <summary>
              Optional to override the look-and-feel of the provider selection dialog.
              See Sample app, styles\ProviderUIStyleSheet.css
            </summary>
        </member>
        <member name="T:AuthConfig.AuthConfiguration">
            <summary>
              The Configuraiton for the AuthModule.  Used to generate XML that is stored in the config file.
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.FedAuth">
            <summary>
              Fed Auth params. <see cref="P:AuthConfig.AuthConfiguration.FedAuth" />See FedAuth class for details.
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.BasicAuth">
            <summary>
              Basic Auth params. <see cref="P:AuthConfig.AuthConfiguration.BasicAuth" />See BasicAuth class for details.
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.AudienceList">
            <summary>
              List of URis that can use the identity.  If your site has multiple apps, you may need to add entries for all of them
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.TrustedIssuers">
            <summary>
              List of issuers whose tokens we can accept. <see cref="T:AuthConfig.Issuer" /> See Issuer class for details
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.ClaimTypes">
            <summary>
              List of claims that we can use.  <see cref="T:AuthConfig.ClaimType" />See ClaimType class for details
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.CustomError">
            <summary>
              HTML based error message that appears when there is an unexpected error (exception)
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.CustomDenial">
            <summary>
              When a user is logged in, but not on the roster, they will see this HTML based message.  If this message is blank
              they will see
              a generic 403 error.
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.GateKeeper">
            <summary>
              The gatekeeper information. <see cref="P:AuthConfig.AuthConfiguration.GateKeeper" /> See the GateKeeper class for details
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.FedLogin">
            <summary>
              When the GateKeeperMode is set to PassThrough, this is the only URL that is required to login with Fed Auth.
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.VariablePageList">
            <summary>
              When we are in GateKeeper mode On or PassThrough, pages listed here can access the mapped ClaimTypes from
              ServerVariables.
            </summary>
        </member>
        <member name="P:AuthConfig.AuthConfiguration.ProviderStyleSheet">
            <summary>
              Optional to override the look-and-feel of the provider selection UI <see cref="T:AuthConfig.StyleSheet" />
            </summary>
        </member>
        <member name="T:AuthConfig.Provider">
            <summary>
              An identity provider that is configured with your Federation Provider
            </summary>
        </member>
        <member name="P:AuthConfig.Provider.Name">
            <summary>
              A unique name for the provider
            </summary>
        </member>
        <member name="P:AuthConfig.Provider.HomeRealm">
            <summary>
              For SP-initiated SSO.  The realm used to identify the provider
            </summary>
        </member>
        <member name="P:AuthConfig.Provider.CourtesyUrl">
            <summary>
              For Idp-Initiated SSO.  The URL that is used to get the SAML for the user.
            </summary>
        </member>
        <member name="P:AuthConfig.Provider.Description">
            <summary>
              A description displayed in the provider selection UI that is intended to help the user know which provider to select.
            </summary>
        </member>
        <member name="P:AuthConfig.Provider.IsDefault">
            <summary>
              If true this provider is automatically selected in the provider selection drop-down, though the selection can still
              be changed.
            </summary>
        </member>
        <member name="T:AuthConfig.ProviderConfiguration">
            <summary>
              Represents the collection of identity providers used by the website.  This object is converted into an XML config
              file.
            </summary>
        </member>
        <member name="P:AuthConfig.ProviderConfiguration.ProviderList">
            <summary>
              List of identity providers.  See Provider for details.  <see cref="T:AuthConfig.Provider" />
            </summary>
        </member>
        <member name="T:AuthConfig.UserConfiguration">
            <summary>
              List of user names that can login to a site.
            </summary>
        </member>
        <member name="P:AuthConfig.UserConfiguration.UserList">
            <summary>
              The list of users
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.Asset">
            <summary>
              Encapsulates the CMS Asset.  Methods for loading and
              manipulating assets and their data are found in here.
              Meta data about the asset such as the Label and Id are represented by properties. (asset.Label, asset.Id)
              Custom data that has been provided from the client is accessible through an indexer (asset["page_title"])
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateNewAsset(System.String,CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
              Creates an asset in the given folder using a given model.
            </summary>
            <param name="label">The name of the asset.</param>
            <param name="saveLocation">The folder to save this asset.</param>
            <param name="model">The model for this asset.</param>
            <param name="contentFields">The content fields for this asset.</param>
            <param name="createModelChildren">
              if set to <c>true</c> will also create the model's children if the model is of type
              Folder.
            </param>
            <returns>
              The newly created asset.  If model is a folder, it will create a folder.  If model is a file it will create a file.
              If it fails an unloaded asset is returned, use IsLoaded to check
            </returns>
            <example>
              <code><![CDATA[
            Asset folderAsset = Asset.Load("/Site/myFolder");
            // Use Asset.LoadDirect() to load the model because models are usually in "Draft".
            Asset modelAsset = Asset.LoadDirect("/System/Models/MyModel");
            // Some properties that will be added to the new assets content when we call CreateNewAsset
            Dictionary<string, string> contentFields = new Dictionary<string, string>  { {"key1", "toy 1"},  {"key2", "toy 2"} };
            //Create the asset.
            Asset newAsset = Asset.CreateNewAsset("newname", folderAsset, modelAsset, contentFields);
            if (!newAsset.IsLoaded)
            Out.WriteLine("Create Failed: " + context.Error);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateFolder(System.String,CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.FolderType)">
            <summary>
              Creates a folder in the given location using the given FolderType
            </summary>
            <param name="label">The name of the asset.</param>
            <param name="saveLocation">The folder to save this asset.</param>
            <param name="folderType">
              Optional: The type of folder you want to create. The default value is FolderType.Folder. Note: If you would want to
              create a library
              reference please use Asset.CreateLibraryReference. Additionally, if creating a project the default name "library"
              will be used to name the library folder.
            </param>
            <returns>
              The newly created folder. If it fails an unloaded asset is returned, use IsLoaded to check
            </returns>
            <example>
              <code><![CDATA[
            Asset projectTemplateFolder = Asset.Load("/Site/myProjectFolder/Templates");
            //Create the folder.
            Asset nestedTemplateFolder = Asset.CreateFolder("nested template folder name", projectTemplateFolder, FolderType.TemplateFolder);
            if (!nestedTemplateFolder.IsLoaded)
            Out.WriteLine("Create Failed: " + context.Error);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateNewSiteRoot(System.String,CrownPeak.CMSAPI.Asset)">
            <summary>
              Create a Site root with the given label in the given location.
            </summary>
            <param name="label">The label to use</param>
            <param name="saveLocation">The folder which is going to be the parent of the site root</param>
            <returns>The newly created site root.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetSiteRootProperties(System.Int32)">
            <summary>
              Get the site root configuration properties.  User must have permission to view the site root.
            </summary>
            <param name="assetId">The id of the site root or an asset that is located within</param>
            <returns>The resulting properties.  Use context.Error to check for a failure</returns>
            <example>
              <code><![CDATA[
             SiteRootProperties props = Asset.GetSiteRootProperties(asset.Id);
             if (!string.IsNullOrWhiteSpace(context.Error))
             {
               // Handle error.
               Out.WriteLine("GetSiteRootProperties Error :" + context.Error);
             }
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetSiteRootProperties(System.Int32,CrownPeak.CMSAPI.SiteRootProperties)">
            <summary>
              Can be used to set the site root properties.  User must have both view permission on the actual site root and
              permission
              to create and edit site roots set.  You cannot edit branch configuration at this time.
            </summary>
            <param name="assetId">The id of the site root or an asset that is located within</param>
            <param name="props">The properties to change</param>
            <returns>The resulting properties.  Use context.Error to check for a failure</returns>
            <example>
              <code><![CDATA[
             SiteRootProperties props = Asset.GetSiteRootProperties(asset.Id);
             if (!string.IsNullOrWhiteSpace(context.Error))
             {
               // Handle error.
               Out.WriteLine("GetSiteRootProperties Error :" + context.Error);
             }
             else
             {
               props.DefaultExtension = "html";
               Asset.SetSiteRootProperties(asset.Id, props);
               if (!string.IsNullOrWhiteSpace(context.Error))
               {
                 // Handle error.
                 Out.WriteLine("SetSiteRootProperties Error :" + context.Error);
               }
             }
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateProject(System.String,System.String,CrownPeak.CMSAPI.Asset)">
            <summary>
              Create a Project with the given label in the given location.
            </summary>
            <param name="label">The label to use</param>
            <param name="libraryName">(Optional) name of the library folder to create.  Defaults to "Library"</param>
            <param name="saveLocation">The folder which is going to be the parent of the project</param>
            <returns>A newly created project.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateLibrary(System.String,CrownPeak.CMSAPI.Asset)">
            <summary>
              Create a library with the given label in the given location.
            </summary>
            <param name="label">The label to use</param>
            <param name="project">The folder where the library is to be created.  Must be a project</param>
            <returns>A newly created library.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateLibraryReference(System.String,CrownPeak.CMSAPI.Asset,System.Int32)">
            <summary>
              Create a reference in library with the given label in the given location.
            </summary>
            <param name="label">
              (Optional)The label to use.  Default is "Reference to" added in front of the original library's
              name
            </param>
            <param name="project">The folder where the library is to be created.  Must be a project</param>
            <param name="externalLibraryId">
              The id of the library that we are referencing.  Must be in another project or the
              /System/Library
            </param>
            <returns>A newly created library reference.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateFile(System.String,CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset)">
            <summary>
              This function creates a new asset in the cms with the specified label, template and optional workflow in the
              specified saveLocation.
            </summary>
            <param name="label">The label</param>
            <param name="saveLocation">The save location.</param>
            <param name="template">The template.</param>
            <param name="workflowAsset">
              Optional: The workflow asset usually specified in /System/Workflows or within the workflows foloder within a project.
              If no asset is provided no workflow is assigned
            </param>
            <returns>
              The asset that is created. Upon failure it will return an empty asset and you will need to check the IsLoaded
              property
              to see if it was successfully created or Not.
            </returns>
            <example>
              <code lang="C#">
            <![CDATA[
            Asset workflowAsset = Asset.Load("/System/Workflows/Basic Workflow");
            Asset saveLocation = Asset.Load("/My Site/My Folder/");
            Asset asset = Asset.CreateFile("foo", saveLocation, template, workflowAsset);
            if(asset.IsLoaded)
            {
               //do something with the newly created asset.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.RecompileLibrary(System.Int32)">
            <summary>
              Pass the id of a library folder and it will compile.
            </summary>
            <param name="libraryId">The id.</param>
            <returns>true if successful, false if not.  Check outbound context.Error for specific error message</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateTemplateFolder(System.String,CrownPeak.CMSAPI.Asset)">
            <summary>
              Create a template folder with the given label in the given location.  It can be created in a project or another
              template folder.
            </summary>
            <param name="label">The label to use</param>
            <param name="parent">The folder where the template folder is to be created.  Must be a project</param>
            <returns>A newly created template folder.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateTemplate(System.String,CrownPeak.CMSAPI.Asset)">
            <summary>
              Create a template with the given label in the given location.  It can be created in template folder.
            </summary>
            <param name="label">The label to use</param>
            <param name="parent">The folder where the template is to be created.  Must be a project</param>
            <returns>A newly created template.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateTemplateFile(System.String,CrownPeak.CMSAPI.Asset)">
            <summary>
              Create a template file with the given label in the given location.  It can be created in a template only.
            </summary>
            <param name="label">The label to use</param>
            <param name="parent">The folder where the template folder is to be created.  Must be a project</param>
            <returns>A newly created template file.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateLibraryFile(System.String,CrownPeak.CMSAPI.Asset)">
            <summary>
              Creates a new Class File within the specified Library. This function will return an asset even if it fails to create
              one.
              Upon failure it will return an empty asset and you will need to check the IsLoaded property
              to see if it was successfully created or Not.
            </summary>
            <param name="label">
              This will be used as the file name and as the default class name that is created within the file.
              Special characters and white spaces are removed and replaced with an underscore in both places. The extension is
              optional but must be ".cs" if specified.
            </param>
            <param name="libraryFolder">The Library folder that the class file will be saved into</param>
            <returns>A newly created library file.</returns>
            <example>
              <code><![CDATA[
            Asset myNewLibraryFile;
            //load the site root properties as it pertains to the current asset
            SiteRootProperties srp = Asset.GetSiteRootProperties(asset.Id);    
            if(srp!= null && srp.ProjectId > 0)
            {
              //if the site root has a project load the library folder in the project
              Asset libraryFolder = Asset.Load(Asset.Load(srp.ProjectId).AssetPath + "/Library");
              myNewLibraryFile = Asset.CreateLibraryFile("MyLibraryfile", libraryFolder);        
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateCSharpDeveloperTemplate(System.String,CrownPeak.CMSAPI.Asset)">
            <summary>
              Create a developer template file with the given label in the given location.  These are templates that run on their
              own like assets.  They are commonly used for CSS or JS files.
            </summary>
            <param name="label">The label to use</param>
            <param name="parent">The folder where the template folder is to be created.  Must be a project</param>
            <returns>A newly created C# developer template.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetFolderType">
            <summary>
              Gets type of folder such as Project or Site Root.
              If the asset is not loaded or not a folder it will return "unspecified".
            </summary>
            <returns>A folder type.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetSystemHistory(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Int32,CrownPeak.CMSAPI.AuditAction,System.Int32,System.Int32)">
            <summary>
              Returns a list of system audit entries based on the parameters in the request
            </summary>
            <param name="startDate">The start date to filter on. Inclusive.</param>
            <param name="endDate">The end date to filter on. Inclusive.</param>
            <param name="Label">Filter audit by label. Use an empty string "" to filter all assets.</param>
            <param name="CreateUserId">Filter by user who created the asset.</param>
            <param name="actionId">Filter by action. <see cref="T:CrownPeak.CMSAPI.AuditAction" /> </param>
            <param name="assetId">Filter by asset ID. Use 0 to filter all assets.</param>
            <param name="currentPage">The page of data to return. 50 items per page.</param>
            <returns>A list of system audit entries.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetSiteRoot(CrownPeak.CMSAPI.Asset)">
            <summary>
              For a given asset find the closest parent that is of FolderType.SiteRoot
            </summary>
            <param name="asset">The requested site root asset.</param>
            <returns>The site root if found.  If none is found returns an empty asset (IsLoaded will be false)</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetProject(CrownPeak.CMSAPI.Asset)">
            <summary>
              For a given asset find the project.  If the asset is in a project or a child of a project that project will be
              returned.
              If the asset is a child of a site root, we will look for a project that is a child of a site root and that will be
              returned.
              If the asset is a child of a site root and does not have a child project, it will look for a sibling project to the
              site root and
              return that.
              If no project is found by either method, we will return an empty asset.
              If using a site root to find the project and more than one child or sibling is found which is a project, an error
              will be set and no project will be returned.
            </summary>
            <param name="asset">The requested project asset.</param>
            <returns>The project if found.  If none is found returns an empty asset (IsLoaded will be false)</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetAsSiteRoot(System.Boolean)">
            <summary>
              Makes the asset into a site root.  Must be a folder and user must have permission to create  a site root in the
              parent folder of the asset.
            </summary>
            <param name="doSetAsSiteRoot">(Optional)If false resets a site root back to a regular folder.  Defaults to true</param>
            <returns>true if successful, false if not</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Asset anAsset = Asset.Load("/MySiteFolder");
            if (!anAsset.SetAsSiteRoot())
              Out.DebugWriteLine("Failed to make asset id {0} into a site root error {1}", anAsset.Id, context.Error);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetHidden(System.Boolean)">
            <summary>
              Sets the hidden flag on the instance
            </summary>
            <param name="isHidden">Optional: the value of the hidden flag.  Defaults to true</param>
            <returns>True if successful</returns>
            ///
            <example>
              <code lang="c#">
            <![CDATA[
            Asset anAsset = Asset.Load("/Site/MyAsset");
            bool wasHidden = anAsset.SetHidden(true);
            Out.DebugWriteLine("Asset is hidden flag set to {0}", wasHidden);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CopyAsset(System.String,CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset)">
            <summary>
              Copies the given asset to the given destination using the provided label.
              The copied asset is returned.  Use Asset.IsLoaded on the returned asset to see if the copy was successful.  The
              context.Error string will give
              you the reason for failure.
              NOTE: If the original asset had a model, it is not set on the copy.
            </summary>
            <param name="label">The name to use for the copied asset.</param>
            <param name="saveLocation">The folder where you will save the copy</param>
            <param name="assetToCopy">The asset to copy.</param>
            <returns>The newly created asset.</returns>
            <example>
              <code><![CDATA[
             Asset folderAsset = Asset.Load("/Site/myFolder");
            
             Asset assetToCopy = Asset.Load("/Site/myFolder/myfile");
             //Copy the asset.
             Asset newAsset = Asset.CopyAsset("newname", folderAsset, assetToCopy);
             if (!newAsset.IsLoaded)
             Out.WriteLine("Copy Failed: " + context.Error);
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateBranch(CrownPeak.CMSAPI.Asset,System.Boolean)">
            <summary>
              Use this to create a branch from another asset.
            </summary>
            <param name="srcAsset">The asset we are branching from. It must have workflow.</param>
            <param name="branchWcoSnippets">
              <para>Optional: If the asset has snippets, should they also be branched. Defaults to false.</para>
              <para></para>
              <para>New snippets will have names automatically generated by the CMS</para>
            </param>
            <returns>The newly created asset</returns>
            <example>
              <code><![CDATA[
            
              Asset loadedAssetToBranch = Asset.Load("/Site/AssetIWantToBranch");
            
             //Call it like this to avoid branching snippets:
              Asset newBranch = Asset.CreateBranch(loadedAssetToBranch);
              if (!newBranch.IsLoaded)
                Out.WriteLine("Branch Failed: " + context.Error);
              //You would call it like this, if you wanted to also branch snippets :
              Asset newBranch = Asset.CreateBranch(loadedAssetToBranch, true);
              if (!newBranch.IsLoaded)
                Out.WriteLine("Branch Failed: " + context.Error);
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.RouteCollection(System.Collections.Generic.List{System.Int32},CrownPeak.CMSAPI.Status,System.Boolean)">
            <summary>
              Route assets in the given list of collection to a workflow step that corresponds to the given status.
              The status must correspond to one of the steps on the assets' workflow.
              If more than one workflow step has the given state, then the lowest step will be chosen.
              Use Status.Load(string statusName) to load the status.
              If it returns false, check the context.Error property.
              Currently, you may only route file assets, routing folders in not supported.
            </summary>
            <param name="CollectionIds">The list of Collection Ids to route the assets within them.</param>
            <param name="status">The status.</param>
            <param name="publishDependencies">
              Applies only when workflow results in a publish.  If true, dependencies will be
              computed and published if necessary.
            </param>
            <returns>
              RouteResponse.
            </returns>
            <example>
              <code lang="C#">
            // Move the asset to the workflow step that has status set to "LIVE".
            RouteResponse rr = Asset.Route(myCollectionIds, oLiveStatus);
            if (rr.HasError)
            {
              Out.WriteLine("Route failed: " + rr.ErrorMessage);
            }
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.RouteAssets(System.Collections.Generic.List{System.Int32},CrownPeak.CMSAPI.Status,System.Boolean,System.Boolean)">
            <summary>
              Route assets in the given list to a workflow step that corresponds to the given status.
              The status must correspond to one of the steps on the assets' workflow.
              If more than one workflow step has the given state, then the lowest step will be chosen.
              Use Status.Load(string statusName) to load the status.
              If it returns false, check the context.Error property.
              Currently, you may only route file assets, routing folders in not supported.
            </summary>
            <param name="AssetIdList">The list of asset Ids to route.</param>
            <param name="status">The status.</param>
            <param name="StateChangeCheck">Flag for changing assets' workflow state before publishing</param>
            <param name="publishDependencies">
              Applies only when workflow results in a publish.  If true, dependencies will be
              computed and published if necessary.
            </param>
            <returns>
              RouteResponse.
            </returns>
            <example>
              <code lang="C#">
            // Move the asset to the workflow step that has status set to "LIVE".
            RouteResponse rr = Asset.Route(myAssetIds, oLiveStatus);
            if (rr.HasError)
            {
              Out.WriteLine("Route failed: " + rr.ErrorMessage);
            }
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.ExecuteWorkflowCommand(System.Int32,System.String,System.Boolean)">
            <summary>
              Execute the specified workflow command on the given asset.
              The workflow command must be available from the current state of the given asset.
              ACL for executing workflow commands are respected.
              Workflow filters for that particular workflow command are respected.
            </summary>
            <param name="assetId">The Id of the asset on which the workflow command should be executed.</param>
            <param name="commandName">The name of the workflow command. Not case sensitive.</param>
            <param name="skipDependencies">
              Applies only when workflow results in a publish.  If false, dependencies will be
              computed and published if necessary.
            </param>
            <returns>
              ExecuteWorkflowCommandResponse.
            </returns>
            <example>
              <code lang="C#">
            // Move the asset to the workflow step that has status set to "LIVE".
            ExecuteWorkflowCommandResponse resp = Asset.ExecuteWorkflowCommand(myAssetId, "Deploy to Live");
            if (resp.HasError)
            {
              Out.WriteLine("ExecuteWorkflowCommand failed: " + resp.ErrorMessage);
            }
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.ExecuteWorkflowCommand(System.Collections.Generic.List{System.Int32},System.String,System.Boolean)">
            <summary>
              Execute the specified workflow command on the given list of assets.
              The workflow command must be available from the current state of each asset in the list.
              If one asset fails, the method continues on the rest of the list.
              ACL for executing workflow commands are respected.
              Workflow filters for that particular workflow command are respected.
            </summary>
            <param name="assetIds">The list of asset Ids on which the workflow command should be executed.</param>
            <param name="commandName">The name of the workflow command. Not case sensitive.</param>
            <param name="skipDependencies">
              Applies only when workflow results in a publish.  If false, dependencies will be
              computed and published if necessary.
            </param>
            <returns>
              ExecuteWorkflowCommandResponse.
            </returns>
            <example>
              <code lang="C#">
            // Move the asset to the workflow step that has status set to "LIVE".
            ExecuteWorkflowCommandResponse resp = Asset.ExecuteWorkflowCommand(myAssetIds, "Deploy to Live");
            if (resp.HasError)
            {
              Out.WriteLine("ExecuteWorkflowCommand failed: " + resp.ErrorMessage);
            }
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this asset.
            </summary>
            <returns>
              A <see cref="T:System.String" /> that represents this asset.
            </returns>
            <example>
              <code lang="C#">
             <![CDATA[
             // Implicit call
             Out.WriteLine(asset);
            
             // Explicit call to the ToString method
             Out.WriteLine(asset.ToString());
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetSchedule(System.String,System.DateTime,System.Boolean)">
            <summary>
              Allows you to set a scheduled workflow transition (usually a publish or retire) for the
              specified asset. You must provide the schedule name as configured in the workflow.
              The schedule date must include a date and time.  Input time is assumed to be Pacific Time.
            </summary>
            <param name="scheduleName">Name of the schedule.</param>
            <param name="dateTime">The date time.</param>
            <param name="publishDependencies">Optional: Include dependencies when publishing the asset. Defaults to false.</param>
            <example>
              <code lang="C#">
            // The asset will be published to Live 3 days from now.
            // "Live Date" must be defined in the workflow for this asset!
            asset.SetSchedule("Live Date", DateTime.Now.AddDays(3));
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetSchedule(System.String,System.DateTime,CrownPeak.CMSAPI.cpTimeZone,System.Boolean)">
            <summary>
              Allows you to set a scheduled workflow transition (usually a publish or retire) for the
              specified asset. You must provide the schedule name as configured in the workflow.
              The schedule date must include a date and time and a sourceTimeZone.
            </summary>
            <param name="scheduleName">Name of the schedule.</param>
            <param name="dateTime">The date time.</param>
            <param name="sourceTimeZone">The timezone of the DateTime that is passed in using a cpTimeZone constant</param>
            <param name="publishDependencies">Optional: Include dependencies when publishing the asset. Defaults to false.</param>
            <example>
              <code lang="C#">
             // "Live Date" must be defined in the workflow for this asset!
             // This will go Live on June 30, 2014 at 3 PM Eastern
             asset.SetSchedule("Live Date", new DateTime(2014, 6, 30, 15, 0, 0), cpTimeZone.Eastern));
            
               </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetSchedule(System.String,System.DateTime,System.TimeZoneInfo,System.Boolean)">
            <summary>
              Allows you to set a scheduled workflow transition (usually a publish or retire) for the
              specified asset. You must provide the schedule name as configured in the workflow.
              The schedule date must include a date and time and a sourceTimeZone.
            </summary>
            <param name="scheduleName">Name of the schedule.</param>
            <param name="dateTime">The date time.</param>
            <param name="sourceTimeZone">The timezone of the DateTime that is passed in.</param>
            <param name="publishDependencies">Optional: Include dependencies when publishing the asset. Defaults to false.</param>
            <example>
              <code lang="C#">
             // "Live Date" must be defined in the workflow for this asset!
             // This will go Live on June 30, 2014 at 3 PM Eastern
             asset.SetSchedule("Live Date", new DateTime(2014, 6, 30, 15, 0, 0), TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time"));
            
               </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.ClearSchedule(System.String)">
            <summary>
              Clears the schedule date set for the specified asset. The schedule name must match
              with a schedule name in the workflow for the asset.
            </summary>
            <param name="scheduleName">Name of the schedule.</param>
            <example>
              <code lang="C#">
            // Clear the live date, if you had previously scheduled the asset
            asset.ClearSchedule("Live Date");
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetPanels(System.String,CrownPeak.CMSAPI.SortOrder)">
            <summary>
              <para>Get panels based on list name from data already saved into the asset.</para>
              <para>
                Note: The usual case is that the data for the panel comes from a List Panel on an input form.   Once the form has
                been saved, this function will always return at least one entry, even if no data was entered on the panel.
                Therefore,
                you may want to check the data in the PanelEntry before using it, depending on the use case.
              </para>
            </summary>
            <param name="panelName">Name of the field on which to create the list</param>
            <param name="sort">Optional: sort order, default is null. If null, the list will be in the order it was saved.</param>
            <returns>The requested list of PanelEntries</returns>
            <example>
              <code><![CDATA[
            List<PanelEntry> panels = asset.GetPanels("list_name");
            foreach (PanelEntry entry in panels)
            {
              Out.WriteLine("The value of list_field in this panel is: " + entry["list_field"]);
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetPanelsFromFolder(System.String,CrownPeak.CMSAPI.AssetParams,CrownPeak.CMSAPI.AssetType,System.String,System.String)">
            <summary>
              <para>
                Used for navigation lists.
                Panels are initialized using children of "this" asset instance or this instances parent, if this is a file.
              </para>
              <para>
                Data from the panels is stored on this asset.  This could be used, to store the order of the list or to associate
                other metadata
                such as enabled, disabled.
              </para>
              <para>
                If there is more than one child from the same branch, the asset with the highest asset id is returned.  Assets are
                bound to the
                panels by branch id unless the optional idName parameter is specified
              </para>
              <para>
                This method is overloaded. This version would be the most common case where the metadata is stored on the same
                folder whose children
                we are using to initialize the list.  If using this method to initialize an input panel, additional code is
                required on the
                post_input.aspx template to copy the data from the current asset to the folder. The other version would allow you
                to save the metadata
                on a different asset such as the current asset.
              </para>
              <para>
                The optional idName and labelName parameters are for backward-compatibility with navigation panels stored with the
                old API.  If an
                idName is specified, then the assets are bound to the panels by asset id instead of the branch id.
              </para>
              <para>
                It is not necessary to add hidden fields with the id or branch id to the form, they are automatically
                generated.
              </para>
            </summary>
            <param name="panelName">The name of the panel</param>
            <param name="assetParams">Optional: Used like in GetFileList or GetFolderList to  filter data, etc.</param>
            <param name="type">
              Optional:Can be used to get back only a specific type of child - file or folder, defaults to
              AssetType.Unspecified which returns both
            </param>
            <param name="labelName">
              Optional:The string that will be used to store the folder's label when we store the panel data.
              Use lower case.  Defaults to panelName + ".label"
            </param>
            <param name="idName">
              Optional:The string that will be used to store the folder's id when we store the panel data. Use
              lower case.  Defaults to panelName + ".id"
            </param>
            <returns>A List of AssetPanelEntry objects</returns>
            <example>
              <code lang="C#">
               <![CDATA[
               <%
              // output example
              List<AssetPanelEntry> panels = asset.GetPanelsFromFolder("folder_list");
            
              foreach(AssetPanelEntry panel in panels)
              {
                Out.WriteLine("id=\"{0}\", Name=\"{1}\"<br/>", panel["folder_list.id"], panel["folder_list.label"]);
                Out.WriteLine("Type: {0}<br/>", panel.ChildAsset.Type);
              }
            
              //input example
              List<AssetPanelEntry> panels2 = asset.GetPanelsFromFolder("folder_list");
            
               AssetPanelEntry currentPanel;
               while(Input.NextPanel(panels2, out currentPanel))
               {
                 Input.ShowTextBox("Name", "folder_list.label");
                 Out.WriteLine("Type: {0}<br/>", currentPanel.ChildAsset.Type);
               }
            
              //Exclude Retired and Archived Assets
              AssetParams assetParams = new AssetParams();
              assetParams.ExcludeFilterStatus = Util.MakeList("Archived", "Retired");
              List<AssetPanelEntry> panels2 = asset.GetPanelsFromFolder("folder_list", assetParams);
            
             // Examples where you specify your own labelName and idName
             // output example
             List<AssetPanelEntry> panels = asset.Parent.GetPanelsFromFolder( "folder_list", labelName: "folder_label", idName: "folder_id");
             foreach(AssetPanelEntry panel in panels)
             {
               Out.WriteLine("id=\"{0}\", Name=\"{1}\"<br/>", panel["folder_id"], panel["folder_label"]);
               Out.WriteLine("Type: {0}<br/>", panel.ChildAsset.Type);
             }
             //input example
             List<AssetPanelEntry> panels2 = asset.Parent.GetPanelsFromFolder( "folder_list", labelName: "folder_label", idName: "folder_id");
             AssetPanelEntry currentPanel;
             while(Input.NextPanel(panels2, out currentPanel))
             {
               Input.ShowTextBox("Name", "folder_label");
               Out.WriteLine("Type: {0}<br/>", currentPanel.ChildAsset.Type);
             }
            
             ///post_input example
            
             Asset folder = asset.Parent;
             string prefix = "folder_" ;// Use a string common to your panel name, idname, and label name.  If you used the version were you DID NOT specify your own label name and idname, the panel name should work.
             Dictionary<string, string> allContent = folder.GetContent();
             foreach(KeyValuePair<string, string> entry  in allContent)
             {
               if (entry.Key.StartsWith(prefix))
               {
                 folder.DeleteContentField(entry.Key);
               }
             }
            
             Dictionary<string, string> toFolder = new Dictionary<string, string>();
             foreach(KeyValuePair<string, string> entry  in context.InputForm)
             {
               if (entry.Key.StartsWith(prefix))
               {
                 toFolder.Add(entry.Key, entry.Value);
               }
             }
             context.InputForm.Remove(toFolder.Keys);
             folder.SaveContent(toFolder);
            
             %>
             ]]>
               </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetPanelsFromFolder(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.AssetParams,CrownPeak.CMSAPI.AssetType,System.String,System.String)">
            <summary>
              <para>
                Used for navigation lists.
              </para>
              <para>
                Panels are initialized using children of the first argument "folder" asset instance, which must be a folder.
                Data from the panels is stored on "this" asset.  This could be used, to store the order of the list or to associate
                other metadata
                such as enabled, disabled.
              </para>
              <para>
                If there is more than one child from the same branch, the asset with the highest asset id is returned.  Assets are
                bound to the
                panels by branch id unless the optional idName parameter is specified
              </para>
              <para>
                The optional idName and labelName parameters are for backward-compatibility with navigation panels stored with the
                old API.  If an
                idName is specified, then the assets are bound to the panels by asset id instead of the branch id.
              </para>
              <para>
                It is not necessary to add hidden fields with the id or branch id to the form, they are automatically
                generated.
              </para>
              <para>
                If using this method to initialize an input panel, additional code is required on the
                post_input.aspx template to copy the data from the current asset to the folder (or other asset where you are
                storing the metadata), unless you are storing
                the data on the current asset that you are editing.
              </para>
            </summary>
            <param name="folder">The folder whose children we will use to initialize the list</param>
            <param name="panelName">The name of the panel</param>
            <param name="assetParams">Optional:Used like in GetFileList or GetFolderList to  filter data, etc.</param>
            <param name="type">
              Optional:Can be used to get back only a specific type of child - file or folder, defaults to
              AssetType.Unspecified which returns both
            </param>
            <param name="labelName">
              Optional:The string that will be used to store the folder's label when we store the panel data.
              Use lower case.  Defaults to panelName + ".label"
            </param>
            <param name="idName">
              Optional:The string that will be used to store the folder's id when we store the panel data. Use
              lower case.  Defaults to panelName + ".id"
            </param>
            <returns>A List of AssetPanelEntry objects</returns>
            <example>
              <code lang="C#">
             <![CDATA[
             <%
            
              // output example
              List<AssetPanelEntry> panels = asset.GetPanelsFromFolder(asset.Parent, "folder_list");
            
              foreach(AssetPanelEntry panel in panels)
              {
                Out.WriteLine("id=\"{0}\", Name=\"{1}\"<br/>", panel["folder_list.id"], panel["folder_list.label"]);
                Out.WriteLine("Type: {0}<br/>", panel.ChildAsset.Type);
              }
            
              //input example
              List<AssetPanelEntry> panels2 = asset.GetPanelsFromFolder(asset.Parent, "folder_list");
            
               AssetPanelEntry currentPanel;
               while(Input.NextPanel(panels2, out currentPanel))
               {
                 Input.ShowTextBox("Name", "folder_list.label");
                 Out.WriteLine("Type: {0}<br/>", currentPanel.ChildAsset.Type);
               }
            
              //Exclude Retired and Archived Assets
              AssetParams assetParams = new AssetParams();
              assetParams.ExcludeFilterStatus = Util.MakeList("Archived", "Retired");
              List<AssetPanelEntry> panels2 = asset.GetPanelsFromFolder(asset.Parent, "folder_list", assetParams);
            
              // Examples where you specify your own labelName and idName
              // output example
              List<AssetPanelEntry> panels = asset.GetPanelsFromFolder(asset.Parent, "folder_list", labelName: "folder_label", idName: "folder_id");
            
              foreach(AssetPanelEntry panel in panels)
              {
                Out.WriteLine("id=\"{0}\", Name=\"{1}\"<br/>", panel["folder_id"], panel["folder_label"]);
                Out.WriteLine("Type: {0}<br/>", panel.ChildAsset.Type);
              }
            
              //input example
              List<AssetPanelEntry> panels2 = asset.GetPanelsFromFolder(asset.Parent, "folder_list", labelName: "folder_label", idName: "folder_id");
            
               AssetPanelEntry currentPanel;
               while(Input.NextPanel(panels2, out currentPanel))
               {
                 Input.ShowTextBox("Name", "folder_label");
                 Out.WriteLine("Type: {0}<br/>", currentPanel.ChildAsset.Type);
               }
            
             //post_input example - if the asset instance you are using to call GetPanelsFromFolder is not the same as the asset you are editing.
            
             Asset folder = asset.Parent;
             string prefix = "folder_" ;// Use a string common to your panel name, idname, and label name.  If you used the version were you DID NOT specify your own label name and idname, the panel name should work.
             Dictionary<string, string> allContent = folder.GetContent();
             foreach(KeyValuePair<string, string> entry  in allContent)
             {
               if (entry.Key.StartsWith(prefix))
               {
                 folder.DeleteContentField(entry.Key);
               }
             }
            
             Dictionary<string, string> toFolder = new Dictionary<string, string>();
             foreach(KeyValuePair<string, string> entry  in context.InputForm)
             {
               if (entry.Key.StartsWith(prefix))
               {
                 toFolder.Add(entry.Key, entry.Value);
               }
             }
             context.InputForm.Remove(toFolder.Keys);
             folder.SaveContent(toFolder);
             ]]>
             %>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetPanelsFromFolder(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.FilterParams,CrownPeak.CMSAPI.AssetType,System.String,System.String)">
            <summary>
              The same as <see cref="M:CrownPeak.CMSAPI.Asset.GetPanelsFromFolder(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.AssetParams,CrownPeak.CMSAPI.AssetType,System.String,System.String)" /> but with
              <see cref="T:CrownPeak.CMSAPI.FilterParams" /> instead of <see cref="T:CrownPeak.CMSAPI.AssetParams" />.
            </summary>
            <param name="folder">The folder whose children we will use to initialize the list</param>
            <param name="panelName">The name of the panel</param>
            <param name="filterParams">Used like in GetFilterList to  filter data, etc.</param>
            <param name="type">
              Optional:Can be used to get back only a specific type of child - file or folder, defaults to
              AssetType.Unspecified which returns both
            </param>
            <param name="labelName">
              Optional:The string that will be used to store the folder's label when we store the panel data.
              Use lower case.  Defaults to panelName + ".label"
            </param>
            <param name="idName">
              Optional:The string that will be used to store the folder's id when we store the panel data. Use
              lower case.  Defaults to panelName + ".id"
            </param>
            <returns>A List of AssetPanelEntry objects</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateThumbnail(CrownPeak.CMSAPI.Img,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              <para>
                Creates a thumbnail of the specified size from the currently loaded image.
                A ThumbnailKey is required.  The resulting image will be stored on the asset unless we are in upload.aspx, in that
                case
                it will be saved to the asset or current panel at the time the input form is saved.
              </para>
              <para>
                To change the currently uploaded image in place use the uploadContext.UploadedFile.UploadKey as the thumbnail
                Key.
              </para>
              <para>
                Important note, if calling from upload.aspx and the thumbnail key is not the same as the upload, make sure that the
                thumbnail key is in the list of strings passed as the hiddenFields parameter of the Input.ShowAcquireImage() call.
              </para>
              <para>
                Note: Due to memory limitations, the pixel count of the source image cannot be more than 10 million.
              </para>
            </summary>
            <param name="img">The image to be used to create the thumbnail</param>
            <param name="thumbnailKey">The Key used to refer to the thumbnail later as part of the asset's content.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="qualityByPercent">
              Optional: The Quality of the saved JPG as a percent.  Higher numbers have higher
              quality, but also bigger sizes. Defaults to 75.
            </param>
            <param name="preserveAspectRatio">
              Optional: Pass false if you want the thumbnail to be generated with exactly the size
              of the passed in width and height. Defaults to true.
            </param>
            <returns><see cref="T:CrownPeak.CMSAPI.ImgResult" />An ImgResult.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
               // Usually called from upload.aspx
               UploadedFile imageUpload = context.UploadedFile;
               string value = imageUpload.Path;
            
              // my_photo_thumbnail was used in input.aspx because we want to display the thumbnail when we edit, not the possibly large original
              if (imageUpload.Matches("my_photo_thumbnail"))
              {
            
                 asset.SaveUploadedFile("my_photo", imageUpload); // it gets overwritten later when it is resized to 300x300
                 Img img = Img.Load(value);
            
                 if (!img.HasError)
                 {
                  ImgResult res = asset.CreateThumbnail(img, "my_photo_thumbnail", 300, 300);
                  if (res.HasError)
                  {
                     context.Error = "Upload Error creating thumbnail on " + value + " error: " + res.ErrorMessage;
                   }
                  }
                 else
                 {
                   context.Error = "Upload Error Loading on " + value + " error: " + img.ErrorMessage;
                  }
                }
            
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateThumbnail(CrownPeak.CMSAPI.UploadedFile,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              <para>
                Creates a thumbnail of the specified size from the currently loaded image.
                A ThumbnailKey is required.  The resulting image will be stored on the asset unless we are in upload.aspx, in that
                case
                it will be saved to the asset or current panel at the time the input form is saved.
              </para>
              <para>
                To change the currently uploaded image in place use the uploadContext.UploadedFile.UploadKey as the thumbnail
                Key.
              </para>
              <para>
                Important note, if calling from upload.aspx and the thumbnail key is not the same as the upload, make sure that the
                thumbnail key is in the list of strings passed as the hiddenFields parameter of the Input.ShowAcquireImage() call.
              </para>
              <para>
                Note: Due to memory limitations, the pixel count of the source image cannot be more than 10 million.
              </para>
            </summary>
            <param name="uploadedFile">The image to be used to create the thumbnail</param>
            <param name="thumbnailKey">The Key used to refer to the thumbnail later as part of the asset's content.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="qualityByPercent">
              Optional: The Quality of the saved JPG as a percent.  Higher numbers have higher
              quality, but also bigger sizes. Defaults to 75.
            </param>
            <param name="preserveAspectRatio">
              Optional: Pass false if you want the thumbnail to be generated with exactly the size
              of the passed in width and height. Defaults to true.
            </param>
            <returns><see cref="T:CrownPeak.CMSAPI.ImgResult" />An ImgResult</returns>
            <example>
              <code lang="C#">
             <![CDATA[
               // Usually called from upload.aspx
               UploadedFile imageUpload = context.UploadedFile;
            
              // my_photo_thumbnail was used in input.aspx because we want to display the thumbnail when we edit, not the possibly large original
              if (imageUpload.Matches("my_photo_thumbnail"))
              {
            
                asset.SaveUploadedFile("my_photo", imageUpload); // it gets overwritten later when it is resized to 300x300
                ImgResult res = asset.CreateThumbnail(imageUpload, "my_photo_thumbnail", 300, 300);
                if (res.HasError)
                {
                   context.Error = "Upload Error creating thumbnail on " + value + " error: " + res.ErrorMessage;
                 }
              }
              else
              {
                context.Error = "Upload Error Loading on " + value + " error: " + img.ErrorMessage;
              }
            
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CropImage(CrownPeak.CMSAPI.Img,System.String,CrownPeak.CMSAPI.LassoParams,System.Int32)">
            <summary>
              Crop the current image using the box defined by x, y, xx, yy and scaling to width and height.  Saving on the asset
              using thumbnailKey as a fieldname.
            </summary>
            <param name="img">The image from which the result will be cropped</param>
            <param name="thumbnailKey">A key used to save the result</param>
            <param name="lParams">LassoParams that specify how to crop and scale the image</param>
            <param name="qualityByPercent">Optional: The quality of the resulting image as a percent. Defaults to 75</param>
            <returns>ImgResult.  Contains the new Img.  Use HasError to check for errors.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             LassoParams lParams = new LassoParams();
             lParams.BoxHeight = 200;
             lParams.BoxLeft = 150;
             lParams.BoxTop = 150;
             lParams.BoxWidth = 50;
             lParams.ScaleHeight = 50;
             lParams.ScaleWidth = 75;
             Asset imageAsset = Asset.Load(" /Assets/images 2/gundam.jpg");
             Img imageToCrop = Img.Load(imageAsset);
             ImgResult result = asset.CropImage(imageToCrop, "cropped_image", lParams, 100);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CropImage(CrownPeak.CMSAPI.UploadedFile,System.String,CrownPeak.CMSAPI.LassoParams,System.Int32)">
            <summary>
              Crop the current image  stored in the UploadedFile using the box defined by x, y, xx, yy and scaling to width and
              height.  Saving on the asset using thumbnailKey as a fieldname.
            </summary>
            <param name="uploadedFile">UploadedFile that contains an Image</param>
            <param name="thumbnailKey">A key used to save the result</param>
            <param name="lParams">LassoParams that specify how to crop and scale the image</param>
            <param name="qualityByPercent">Optional: The quality of the resulting image as a percent. Defaults to 75</param>
            <returns>ImgResult.  Contains the new Img.  Use HasError to check for errors.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             LassoParams lParams = new LassoParams();
             lParams.BoxHeight = 200;
             lParams.BoxLeft = 150;
             lParams.BoxTop = 150;
             lParams.BoxWidth = 50;
             lParams.ScaleHeight = 50;
             lParams.ScaleWidth = 75;
             UploadedFile imageToCrop = asset.UploadedFiles["image_to_crop"];
             ImgResult result = asset.CropImage(imageToCrop, "cropped_image", lParams, 100);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.Delete">
            <summary>
              Deletes the current asset instance.  It is marked for deletion and purged from the database after 2 weeks.  The
              current user must have
              permission to delete the asset.  The root asset (id == 0), may not be deleted.
            </summary>
            <returns>
              True if successful, false if nothing is removed.  There may be an accompanying error if false is returned, but
              not if the asset was not loaded.
            </returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Asset toRemove = Asset.Load("/Path/Toremove");
            if (!toRemove.Delete())
              Out.DebugWriteLine("Failed to remove asset id {0} error {1}",toRemove.Id, context.Error);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetWorkflow(System.Int32,CrownPeak.CMSAPI.Status,System.Boolean)">
            <summary>
              Change the current asset to the workflow specified by the workflowId parameter.  Make sure this is a workflow id
              and not the id of a workflow asset.  Use SetWorkflowByAsset to set workflows with a workflow asset.
              NOTE:  You can optionally pass a status, but be careful.  By default workflow related tasks such as publishing are
              not executed.
              Pass "executeStep:true", if you wish to execute workflow related code such as publishing.  If you do not pass true
              for this parameter and there is a
              conflict, the conflicting asset will move to the configured conflict state, but no publishing will occur. This method
              is primarily intended for configuration.  Route or Publish may be more approriate if you really want to execute
              workflow
              or workflow related code.
            </summary>
            <param name="workflowId">The id of the workflow that you want to change to</param>
            <param name="status">
              Optional: Pass null to keep the asset in the same state, otherwise you will go to the state you
              provide. Defaults to null.
            </param>
            <param name="executeStep">
              Optional: Whether or not to execute workflow on the current step when you go to the new workflow. Defaults to false.
            </param>
            <returns>true if the workflow is changed, false if not</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Asset anAsset = Asset.Load("/Path/ToChange");
            int workflowId = 11;
            if (!anAsset.SetWorkflow(workflowId, Status.Load("LIVE"), true))
              Out.DebugWriteLine("Failed to set asset id {0} to new workflow id {1} error {2}", anAsset.Id, workflowId, context.Error);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetWorkflowByAsset(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Status,System.Boolean)">
            <summary>
              Change the current asset to the workflow specified by the workflowAsset parameter.
              NOTE:  You can optionally pass a status, but be careful.  By default workflow related tasks such as publishing are
              not executed.
              Pass "executeStep:true", if you wish to execute workflow related code such as publishing.  If you do not pass true
              for this parameter and there is a
              conflict, the conflicting asset will move to the configured conflict state, but no publishing will occur. This method
              is primarily intended for configuration.  Route or Publish may be more approriate if you really want to execute
              workflow
              or workflow related code.
            </summary>
            <param name="workflowAsset">
              This is an asset that represents the workflow that is found in /System/Workflows or in a
              project specific "Workflows" folder
            </param>
            <param name="status">
              Optional: Pass null to keep the asset in the same state, otherwise you will go to the state you
              provide. Defaults to null.
            </param>
            <param name="executeStep">
              Optional: Whether or not to execute workflow on the current step when you go to the new workflow. Defaults to false.
            </param>
            <returns>true if the workflow is changed, false if not</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Asset anAsset = Asset.Load("/Path/ToChange");
            Asset workflowAsset = Asset.Load("/System/Workflows/MyWorkflow");
            if (!anAsset.SetWorkflowByAsset(workflowAsset, Status.Load("LIVE"), true))
              Out.DebugWriteLine("Failed to set asset id {0} to new workflow id {1} error {2}", anAsset.Id, workflowAsset.Id, context.Error);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetTemplate(System.Int32)">
            <summary>
              Set a template on an asset.  The id must be the id of a folder that contains plugin files such as output.asp or
              input.aspx, etc.
            </summary>
            <param name="templateId">The template(folder) id</param>
            <returns>true if the template is changed, false if not</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Asset anAsset = Asset.Load("/Path/ToChange");
            Asset template = Asset.Load("/System/Templates/MyTemplate");
            if (!anAsset.SetTemplate(template.Id))
              Out.DebugWriteLine("Failed to set asset id {0} to new template id {1} error {2}", anAsset.Id, template.Id, context.Error);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetModel(System.Int32)">
            <summary>
              <para>
                Sets a model on a folder. Pass the id of another folder to use as a model.
              </para>
              <para>
                Added in build 3417.
              </para>
            </summary>
            <param name="modelId">Id of folder to be used as a model. Use -1 to remove a model from a folder.</param>
            <returns>True if it was successful</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Asset anAsset = Asset.Load("/Path/ToChange");
            Asset model = Asset.Load("/System/Models/MyModel");
            if (!anAsset.SetModel(model.Id))
              Out.DebugWriteLine("Failed to set asset id {0} to new model id {1} error {2}", anAsset.Id, model.Id, context.Error);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SetWorkflow(System.String,CrownPeak.CMSAPI.Status,System.Boolean)">
            <summary>
              Change the current asset to the workflow specified by the workflowName parameter.
              NOTE:  You can optionally pass a status, but be careful.  By default workflow related tasks such as publishing are
              not executed.
              Pass "executeStep:true", if you wish to execute workflow related code such as publishing.  If you do not pass true
              for this parameter and there is a
              conflict, the conflicting asset will move to the configured conflict state, but no publishing will occur. This method
              is primarily intended for configuration.  Route or Publish may be more approriate if you really want to execute
              workflow
              or workflow related code.
            </summary>
            <param name="workflowName">
              The name of the workflow that you want to change to.  If no workflow with that name exists,
              an exception is thrown
            </param>
            <param name="status">
              Optional: Pass null to keep the asset in the same state, otherwise you will go to the state you
              provide. Defaults to null.
            </param>
            <param name="executeStep">
              Optional: Whether or not to execute workflow on the current step when you go to the new workflow. Defaults to false.
            </param>
            <returns>true if the workflow is changed, false if not</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Asset anAsset = Asset.Load("/Path/ToChange");
            if (!anAsset.SetWorkflow("Basic Workflow"))
              Out.DebugWriteLine("Failed to set asset id {0} to new workflow error {1}", anAsset.Id, context.Error);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetWorkflowByWorkflowId(System.Int32)">
            <summary>
              Gets information about a workflow from its workflow id.  This can be found on the general properties page of assets
              that use this workflow as the "Workflow Id"
              or in the "Points To Workflow" field  of a worfklow asset.
            </summary>
            <param name="workflowId">The actual workflow id not the asset if of the workflow asset. See summary for an explanation.  </param>
            <returns>A Workflow object</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetWorkflowByAsset(CrownPeak.CMSAPI.Asset)">
            <summary>
              Gets information about a workflow from its workflow asset.  This is an asset that is a "workflow file" that can be
              found in "/System/Workflows" or in the "Workflows"
              subfolder of a project when using project specific workflows.  Use Asset.LoadDirect() with the actual asset id to get
              an instance of this asset.
            </summary>
            <param name="workflowAsset">An asset that is a workflow file.  See summary for more details </param>
            <returns>A Workflow object</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetWorkflows">
            <summary>
              Gets a list of workflows given the current asset.  For most assets this will be all the workflows which are found
              under /System/Worklows.
              If you asset is part of a project or part of a site root that has a project and if that project has its own workflows
              you will
              see those workflows.
            </summary>
            <returns>List of Workflow objects</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveSource(System.String,System.Boolean)">
            <summary>
              Updates the source of a template or library file. This will automatically trigger the template or library code to
              compile if necessary.
            </summary>
            <param name="source">The template or library source code to be saved.</param>
            <param name="compileAsync">Compiles the source asynchronously. Defaults to false.</param>
            <returns>true if successful, false if not.  Check outbound context.Error for specific error message</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Asset codeAsset = Asset.Load("/Path/CodeFile");
            string code = ... // source code;
            if(!codeAsset.SaveSource(code))
            {
              Out.DebugWriteLine("Save Source Error: " + context.Error);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.ApplyVersioning(System.Int32)">
            <summary>
              Applies patches for given version to fields.  Affects only versioned field content, not labels, binary uploads or
              dates.
            </summary>
            <param name="versionId"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateAssetHeaderLevelDependency(CrownPeak.CMSAPI.AssetPropertyNames)">
            <summary>
              Adds a field Level dependency.  Mark all field level dependency code with a comment "//FIELD_LEVEL_DEPENDENCY:" for
              future tracking
            </summary>
            <param name="field"></param>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.Id">
            <summary>
              Gets the asset's unique id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.ExtractedContentRawJson">
            <summary>
              The Raw Json string used to populate the object returned by ExtractedContent.  This is search G2 related.
              Data is populated at upload time.  If data is not available, the data is uploaded to ACB
              and parsed on-the-fly if it is running in a Search G2 template.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.ExtractedContent">
            <summary>
              Used with Search G2. If this is a binary asset and content parsing is enabled, this is extracted on upload and stored
              as a JSON string.
              In the SearchG2Context contexts, this will be populated on-the-fly, if not loaded yet.
              Failure will return empty object.  Check context.Error for details on failure.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.ChildId">
            <summary>
              Gets the child id. If this is a shortcut, the child id will be the id of the asset to which this one
              points, otherwise, it is the same as the id.
            </summary>
            <value>The child id.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.FolderId">
            <summary>
              Gets the asset id of the parent folder.
            </summary>
            <value>The folder id.</value>
            <seealso cref="P:CrownPeak.CMSAPI.Asset.Parent">Asset.Parent</seealso>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.Label">
            <summary>
              Gets the label or name of this asset.
              Call asset.Rename to change the asset label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.CreatedFromModelId">
            <summary>
              This is the id of the model asset used to create this one.  Will be
              -1 if no model was used.  (Formerly base model Id)
            </summary>
            <value>The createdFrom model id.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.BranchId">
            <summary>
              Gets the branch id.  This is initialized if the asset has been branched.
              It applies to assets with workflow only.
              If there is no branch, the asset id is returned.
            </summary>
            <value>The branch id.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.ModelId">
            <summary>
              Gets or sets the model id.  This is initialized if the asset has a model.
              For folders.  This is the id of a folder whose children show up
              in the "New" menu when this folder is selected.
              If there is no model, -1 is returned.
            </summary>
            <value>The model id.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.Type">
            <summary>
              Gets the type.  It will be either a File or a Folder.
              It can be either an AssetType.File or an AssetType.Folder.
            </summary>
            <value>The asset type.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.IsFile">
            <summary>
              Whether this asset is of AssetType.File
            </summary>
            <value>Is this a file.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.IsFolder">
            <summary>
              Whether this asset is of AssetType.Folder
            </summary>
            <value>Is this a folder.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.TemplateId">
            <summary>
              Gets the template id.  This is the id of the folder holding ASP or C# template files that run
              at various times for this asset.
            </summary>
            <value>The template id.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.IsLoaded">
            <summary>
              Is the asset loaded.  Call this after a load to see if the load was successful.
              If false, GetLink() will return an empty string
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.IsBinary">
            <summary>
              This is an uploaded binary asset, not a rendered page.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.LoadString">
            <summary>
              The string (or asset id as a string) that was used to load this asset.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.TemplateLabel">
            <summary>
              The Asset's Template folder label.  .
              Will be blank, if the asset has no template.
            </summary>
            <value>The name of the folder which is set as this asset's template.</value>
            <example>
              <code lang="C#">
              <![CDATA[
            //Display a different graphic depending on the template
            Asset visualImage = null;
            if (asset.TemplateLabel.Equals("Detail Page"))
            {
            visual_image = Asset.Load("/Assets/images/header/page3_visual.jpg");
            }
            if (asset.TemplateLabel.Equals("Section Landing Page"))
            {
            visual_image = Asset.Load("/Assets/images/header/page2_visual.jpg");
            }
            string link = "";
            if (visual_image != null)
            {
            link = visual_image.GetLink();
            }
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.CreateDate">
            <summary>
              The date and time the asset was created.
            </summary>
            <value>The time the asset was created. </value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.CheckoutDate">
            <summary>
              The date and time the asset was checked out.
              Might not be initialized, use HasValue to check.
            </summary>
            <value>The time the asset was checked out. </value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.StatusDate">
            <summary>
              The last time the asset's status was changed.
              Might not be initialized, use HasValue to check.
            </summary>
            <value>The time the asset's status was changed. </value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.PublishDate">
            <summary>
              The asset's last publish date
              Might not be initialized, use HasValue to check.
            </summary>
            <value>The time the asset was last published. </value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.PublishUserId">
            <summary>
              The user id of the user who last published the asset.  Use User.Load to get the User object for this id.
            </summary>
            <value>The id of the user who last published this asset</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.CreateUserId">
            <summary>
              The user id of the user who created the asset.  Use User.Load to get the User object for this id.
            </summary>
            <value>The id of the user who created this asset</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.CheckoutUserId">
            <summary>
              The user id of the user who has the asset checked out.  Use User.Load to get the User object for this id.
            </summary>
            <value>The id of the user who  has the asset checked out.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.StatusUserId">
            <summary>
              The user id of the user who last changed the asset's status.  If the asset is not checked out, 0 is returned. Use
              User.Load to get the User object for this id.
            </summary>
            <value>The user id of the user who last changed the asset's status.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.ModifiedUserId">
            <summary>
              The user id of the user who last modified the asset.  Use User.Load to get the User object for this id.
            </summary>
            <value>The id of the user who last modified this asset</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.ModifiedDate">
            <summary>
              A change in the asset's content properties
              Might not be initialized, use HasValue to check.
            </summary>
            <value>The time the asset was modified. </value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.WorkflowStatus">
            <summary>
              Gets the Status object representing this asset's workflow.
            </summary>
            <value>The workflow status.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.AssetPath">
            <summary>
              Gets the assets full path.
            </summary>
            <value>The asset's full path.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.IdPath">
            <summary>
              Gets the id path.
            </summary>
            <value>The id path.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.ParentPath">
            <summary>
              Gets the parent's folder path.
            </summary>
            <value>The parent's full path.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.Parent">
            <summary>
              <para>Gets this asset's parent folder.</para>
              <para>Tip: Don't use this if all you need is the parent's Id.  Use FolderId.</para>
            </summary>
            <value>The parent folder.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.IsHidden">
            <summary>
              Is the asset hidden.  Usually archived assets are hidden.
              This can be set through workflow or using the UI.
            </summary>
            <value>Whether the asset is hidden</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.IsDeleted">
            <summary>
              The asset has been deleted, but not yet purged from the system.  Purges occur approximately 2 weeks after
              deletion.
            </summary>
            <value>Whether the asset has been deleted</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.UploadedFiles">
            <summary>
              Uploaded Files that are saved on this asset.  Use this collection to read
              uploaded file data.  You can change the value of the UploadFile.Path parameter,
              but you need to pass it back to asset.SaveUploadedFile() to save it.
            </summary>
            <value>The Uploaded Files.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.Raw">
            <summary>
              The raw contents of asset fields.  This removes any automatically-inserted markup from a content field.
              The content of the field is accessed with []"
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.Meta">
            <summary>
              The contents of metadata.
              The content of the metadata field is accessed with []"
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.Size">
            <summary>
              The size of the asset.  If it is a file, it is the size of the file in bytes.
              If it is a folder it is the number of children in that folder.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.Load(System.Int32)">
            <summary>
              <para>
                Loads the asset by id or an appropriate branch. For example, if you pass the id of an asset that is "RETIRED", and
                you
                are publishing to "LIVE", it will look for an asset on the same branch as the asset you were looking for that
                is in the "LIVE" state.
              </para>
              <para>Use IsLoaded to see if loading was successful.</para>
              <para>
                Note: Use LoadDirect to ignore statuses.
              </para>
              <para>
                If the asset does not exist in one of the valid states, an appropriate branch may be returned.
              </para>
              <para>
                Results will depend on the current valid statuses (See context.FilterStatus).
              </para>
              <para>
                Depending on the use case there will be a list of legal statuses, the returned asset
                must not only match the provided path, but it must either have one of the valid statuses
                or have been published to a server with one of the valid statuses
                or have one of the statuses configured in its current workflow step.
                If there is more than one match, the asset with the highest id and therefore the one created most-recently
                is returned.
              </para>
              <para>
                Valid Statuses:
              </para>
              <para>
                Preview:  All the states checked under System, MyAccount, Preferences in the section title "My Default Browse
                State(s)", plus
                "" (No-workflow)
              </para>
              <para>
                Publishing: The state associated with the current server for the workflow step and "" (no workflow).
              </para>
              <para>
                View Output: All state(s) associated with all servers configured for the current asset for the current workflow
                step and "" (no workflow).
              </para>
              <para>
                All Others Contexts: All states are legal
              </para>
            </summary>
            <param name="assetId">The asset id.</param>
            <returns>The asset. IsLoaded will be false if no match was found.</returns>
            <exception cref="T:System.NotSupportedException">
              If you attempt to load an asset which exists, but
              is not a file or a folder (such as an FTP mount), it will throw a NotSupportedException.
            </exception>
            <example>
              <code lang="C#">
             <![CDATA[
            
             Asset otherAsset = Asset.Load(828);
            
             if(otherAsset != null)
               Out.WriteLine("Found asset " + otherAsset.Label);
            
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.Load(System.String)">
            <summary>
              <para>
                Loads an asset from the specified path - for example "/Site/Folder/Page".
                Calling Asset.Load("") will load an empty asset without accessing the DB.
                "cpt_internal" style links - "/cpt_internal/828/856/870" and strings which contain only an asset id "870" are also
                supported.
              </para>
              <para>Use IsLoaded to see if loading was successful.</para>
              <para>
                Id paths which do not have "/cpt_internal" such as "/828/856/870" are not supported,
                use Asset.LoadByIdPath() instead.
              </para>
              <para>
                Results will depend on the current valid statuses (See context.FilterStatus).
              </para>
              <para>
                Note: Use LoadDirect to ignore statuses.
              </para>
              <para>
                Depending on the use case there will be a list of legal statuses, the returned asset
                must not only match the provided path, but it must either have one of the valid statuses
                or have been published to a server with one of the valid statuses
                or have one of the statuses configured in its current workflow step.
                If there is more than one match, the asset with the highest id and therefore the one created most-recently
                is returned.
              </para>
              <para>
                If the asset does not exist in one of the valid states, an appropriate branch may be returned.
              </para>
              <para>
                Results will depend on the current valid statuses (See context.FilterStatus).
              </para>
              <para>
                Depending on the use case there will be a list of legal statuses, the returned asset
                must not only match the provided path, but it must either have one of the valid statuses
                or have been published to a server with one of the valid statuses
                or have one of the statuses configured in its current workflow step.
                If there is more than one match, the asset with the highest id and therefore the one created most-recently
                is returned.
              </para>
              <para>
                Valid Statuses:
              </para>
              <para>
                Preview:  All the states checked under System, MyAccount, Preferences in the section title "My Default Browse
                State(s)", plus
                "" (No-workflow)
              </para>
              <para>
                Publishing: The state associated with the current server for the workflow step and "" (no workflow).
              </para>
              <para>
                View Output: All state(s) associated with all servers configured for the current asset for the current workflow
                step and "" (no workflow).
              </para>
              <para>
                All Others Contexts: All states are legal
              </para>
            </summary>
            <param name="path">The path. An empty string will return an unloaded asset.  Use "/" to load the root.</param>
            <returns>The asset. IsLoaded will be false if no match was found.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
             // Load a folder called "/Site/About Us"
             Asset otherAsset = Asset.Load("/Site/About us");
            
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.LoadByIdPath(System.String)">
            <summary>
              <para>
                Loads the asset specified by the id path which might look like /828/856/870, use Load(string) for "cpt_internal"
                style.
                If the asset does not exist in one of the valid states, an appropriate branch may be returned.
              </para>
              <para>Use IsLoaded to see if loading was successful.</para>
              <para>
                Results will depend on the current valid statuses (See context.FilterStatus).
              </para>
              <para>
                Depending on the use case there will be a list of legal statuses, the returned asset
                must not only match the provided path, but it must either have one of the valid statuses
                or have been published to a server with one of the valid statuses
                or have one of the statuses configured in its current workflow step.
                If there is more than one match, the asset with the highest id and therefore the one created most-recently
                is returned.
              </para>
              <para>
                Valid Statuses:
              </para>
              <para>
                Preview:  All the states checked under System, MyAccount, Preferences in the section title "My Default Browse
                State(s)", plus
                "" (No-workflow)
              </para>
              <para>
                Publishing: The state associated with the current server for the workflow step and "" (no workflow).
              </para>
              <para>
                View Output: All state(s) associated with all servers configured for the current asset for the current workflow
                step and "" (no workflow).
              </para>
              <para>
                All Others Contexts: All states are legal
              </para>
            </summary>
            <param name="path">The path in Id format</param>
            <returns>The asset. IsLoaded will be false if no match was found.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
            
            
                Asset otherAsset = Asset.LoadByIdPath("/828/856/870");
            
                if (!otherAsset.IsLoaded)
                  Out.WriteLine("Could not find asset with id /828/856/870" );
            
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.Load(CrownPeak.CMSAPI.AssetPath)">
            <summary>
              <para>
                Loads the asset with the specified path object
              </para>
              <para>Use IsLoaded to see if loading was successful.</para>
              <para>
                If the asset does not exist in one of the valid states, an appropriate branch may be returned.
              </para>
              <para>
                Results will depend on the current valid statuses (See context.FilterStatus).
              </para>
              <para>
                Depending on the use case there will be a list of legal statuses, the returned asset
                must not only match the provided path, but it must either have one of the valid statuses
                or have been published to a server with one of the valid statuses
                or have one of the statuses configured in its current workflow step.
                If there is more than one match, the asset with the highest id and therefore the one created most-recently
                is returned.
              </para>
              <para>
                Valid Statuses:
              </para>
              <para>
                Preview:  All the states checked under System, MyAccount, Preferences in the section title "My Default Browse
                State(s)", plus
                "" (No-workflow)
              </para>
              <para>
                Publishing: The state associated with the current server for the workflow step and "" (no workflow).
              </para>
              <para>
                View Output: All state(s) associated with all servers configured for the current asset for the current workflow
                step and "" (no workflow).
              </para>
              <para>
                All Others Contexts: All states are legal
              </para>
            </summary>
            <param name="path">The path.</param>
            <returns>The asset. IsLoaded will be false if none was found.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
            
             AssetPath path = AssetPath("/Site/About us");
             Asset otherAsset = Asset.Load(path);
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.LoadDirect(System.Int32,System.Boolean)">
            <summary>
              <para>
                Load an asset with the given asset id, if it exists, regardless of the state or context.
              </para>
              <para>Use IsLoaded to see if loading was successful.</para>
              <para>
                Don't use this if you expect the asset may be branch.  It will load assets, that may not be
                available on the server where you are publishing.
              </para>
            </summary>
            <param name="assetId">The id for the asset that you want to return</param>
            <param name="loadDeleted">
              Optional: Load the asset, even if it has been recently deleted (not yet purged).  Defaults to
              false
            </param>
            <returns>An asset.  IsLoaded will be false if none was found.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
            
             // Use Asset.LoadDirect() to load the model because models are usually in "Draft" and you might be
             // publishing to "Stage" or "Live", so Load() will not find it.
             int modelId = 1234;
             Asset modelAsset = Asset.LoadDirect(modelId);
            
             Dictionary<string, string> contentFields = new Dictionary<string, string>  { {"key1", "toy 1"},  {"key2", "toy 2"} };
            
             //Create the asset.
             Asset newAsset = Asset.CreateNewAsset("newname", Asset.Load("/Site/Folder"), modelAsset, contentFields);
             if (!newAsset.IsLoaded)
               Out.WriteLine("Create Failed: " + context.Error);
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.LoadDirect(System.String)">
            <summary>
              <para>
                Load an asset with the given asset path, if it exists, regardless of the state or context.
                If there are two or more assets with the same path, the asset with the highest id number (most-recently created)
                is returned.
              </para>
              <para>Use IsLoaded to see if loading was successful.</para>
              <para>
                Don't use this if you expect the asset to have branches.  It will load assets, that may not be
                available on the server where you are publishing.
              </para>
            </summary>
            <param name="path">
              The path to an asset.  Like "/Site/MyFolder/MyAsset" or "/cpt_internal/828/856/870".
              An empty string will return an unloaded asset.  Use "/" to load the root.
            </param>
            <returns>An asset. IsLoaded will be false if none was found.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
            
             // Use Asset.LoadDirect() to load the model because models are usually in "Draft".
             Asset modelAsset = Asset.LoadDirect("/System/Models/MyModel");
            
             Dictionary<string, string> contentFields = new Dictionary<string, string>  { {"key1", "toy 1"},  {"key2", "toy 2"} };
            
             //Create the asset.
             Asset newAsset = Asset.CreateNewAsset("newname", Asset.Load("/Site/Folder"), modelAsset, contentFields);
             if (!newAsset.IsLoaded)
               Out.WriteLine("Create Failed: " + context.Error);
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.LoadDirect(CrownPeak.CMSAPI.AssetPath)">
            <summary>
              <para>
                Load an asset with the given asset path, if it exists, regardless of the state or context.
                If there are two or more assets with the same path, the asset with the highest id number (most-recently created)
                is returned.
              </para>
              <para>Use IsLoaded to see if loading was successful.</para>
              <para>
                Don't use this if you expect the asset to have branches.  It will load assets, that may not be
                available on the server where you are publishing.
              </para>
            </summary>
            <param name="path">
              The path to an asset.  Like new AssetPath("/Site/MyFolder/MyAsset").  Use new AssetPath("/") to load
              the root.
            </param>
            <returns>An asset. IsLoaded will be false if none was found.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
            
             // Use Asset.LoadDirect() to load the model because models are usually in "Draft".
             Asset modelAsset = Asset.LoadDirect(new AssetPath("/System/Models/MyModel"));
            
             Dictionary<string, string> contentFields = new Dictionary<string, string>  { {"key1", "toy 1"},  {"key2", "toy 2"} };
            
             //Create the asset.
             Asset newAsset = Asset.CreateNewAsset("newname", Asset.Load("/Site/Folder"), modelAsset, contentFields);
             if (!newAsset.IsLoaded)
               Out.WriteLine("Create Failed: " + context.Error);
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CrownPeak.CMSAPI.Asset" /> class.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetFolderList(CrownPeak.CMSAPI.AssetParams)">
            <summary>
              Gets a list of subfolders in this folder.
            </summary>
            <param name="assetParams">
              The parameters used to filter the returned results.set ExcludeProjectTypes to false on Params
              object if you want new project related types to be returned.
            </param>
            <returns>The list of subfolders.</returns>
            <example>
              <code><![CDATA[
            AssetParams aParams = new AssetParams();
            aParams.Limit = 10;
            List<Asset> folders = asset.GetFolderList(aParams);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetFolderList(CrownPeak.CMSAPI.SortOrder,System.Nullable{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
              Gets a list of subfolders in this folder. All parameters are optional.
            </summary>
            <param name="sortOrder">Optional: The sort order. Defaults to null.</param>
            <param name="limit">Optional: The maximum number of assets to return. Defaults to null.</param>
            <param name="fieldNames">Optional: The names of fields that will be preloaded into the returned assets. Defaults to null.</param>
            <param name="excludes">Optional: Labels of the assets to be excluded from the returned list. Defaults to null.</param>
            <param name="filterStatus">Optional: The workflow statuses to filter on. Defaults to null.</param>
            <param name="excludeFilterStatus">
              Optional: The workflow statuses to exclude.  filterStatus will be ignored if this is
              set. Defaults to null.
            </param>
            <param name="excludeProjectTypes">
              Optional: Set to false if you want project related types like libraries templates,
              etc to be returned. Defaults to true.
            </param>
            <returns>Optional:The list of subfolders.</returns>
            <example>
              <code lang="C#">
            
             <![CDATA[
            
              // Get the folders from an asset, but no more than 10, note how we pass an optional arg.  Order doesn't matter
              // if you use named parameters
              List<Asset> folders = asset.GetFolderList(limit: 10);
            
              // Load up to 10 assets and preload the fields foo and bar into each asset's field cache, if they exist
              List<Asset> folders = asset.GetFolderList(limit: 10, fieldNames: Util.MakeList("foo","bar");
            
              // Don't load any children named "Configuration"
              List<Asset> folders = asset.GetFolderList(excludes: Util.MakeList("Configuration");
            
              // Load folders with workflow that are in the "Stage" state.
              List<Asset> folders = asset.GetFolderList(filterStatus: Util.MakeList("Stage"));
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetFileList(CrownPeak.CMSAPI.AssetParams)">
            <summary>
              Gets a list of files in this folder.
            </summary>
            <param name="assetParams">
              The parameters used to filter the returned results.  set ExcludeProjectTypes to false on
              Params object if you want new project related types to be returned.
            </param>
            <returns>The list of files.</returns>
            <example>
              <code><![CDATA[
            
             Asset folderAsset = Asset.Load("/Site");
             AssetParams aParams = new AssetParams();
             aParams.Limit = 10;
             List<Asset> files = folderAsset.GetFileList(aParams);
            
            
             // Load All files that are not in archived or retired states
             AssetParams aParams = new AssetParams();
             aParams.ExcludeFilterStatus = Util.MakeList("Archived","Retired");
             List<Asset> files = folderAsset.GetFileList(aParams);
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetFileList(CrownPeak.CMSAPI.SortOrder,System.Nullable{System.Int32},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
              Gets a list of files in this folder. All parameters are Optional.
            </summary>
            <param name="sortOrder">Optional: The sort order. Defaults to null.</param>
            <param name="limit">Optional: The maximum number of assets to return. Defaults to null.</param>
            <param name="fieldNames">Optional: The names of fields that will be preloaded into the returned assets. Defaults to null.</param>
            <param name="excludes">Optional: Labels of the assets to be excluded from the returned list. Defaults to null.</param>
            <param name="filterStatus">Optional: The workflow statuses to filter on. Defaults to null.</param>
            <param name="excludeFilterStatus">
              Optional: The workflow statuses to exclude.  filterStatus will be ignored if this is
              set. Defaults to null.
            </param>
            <param name="excludeProjectTypes">
              Optional: Set to false if you want project related types like libraries templates,
              etc to be returned.  Defaults to true.
            </param>
            <returns>The list of files.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
            
             // Load up to 10 files
             List<Asset> files = folderAsset.GetFileList(limit: 10);
            
             // Load up to 10 Draft files
             List<Asset> files = folderAsset.GetFileList(limit: 10, filterStatus: Util.MakeList("Draft"));
            
             // Load All files that are not in archived or retired states
             List<Asset> files = folderAsset.GetFileList(excludeFilterStatus: Util.MakeList("Archived","Retired"));
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetFilterList(CrownPeak.CMSAPI.FilterParams)">
            <summary>
              Get a List of Assets from the CMS, based on a custom filter, searching recursively from this folder asset.
            </summary>
            <param name="filterParams">
              The filter params. set ExcludeProjectTypes to false on Params object if you want new project
              related types to be returned.
            </param>
            <returns>The filtered list of assets.</returns>
            <example>
              <code><![CDATA[
             FilterParams filter = new FilterParams();
            
             // Filter on an asset property
             filter.Add(AssetPropertyNames.Label, Comparison.Equals, "About Us");
            
             // Filter on a field
             filter.Add("headline", Comparison.Equals, "About Us");
            
             // Filter by a date instead of a string
             filter.Add(AssetPropertyNames.ModifiedDate, Comparison.GreaterThan, new DateTime(2010, 11, 15));
            
             List<Asset> files = folderAsset.GetFilterList(filter);
            
              // Get Items named "Index" in the folder object that are not "Archived" or "Retired"
              FilterParams fParams = new FilterParams();
              fParams.Add(AssetPropertyNames.Label, Comparison.Equals, "Index");
              fParams.ExcludeFilterStatus = Util.MakeList("Archived","Retired");
              List<Asset> listOfIndexFiles = asset.Parent.GetFilterList(fParams);
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetDateOverlap(System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
              Gets a List of Assets from the CMS that contain a date range which overlaps the specified range.
            </summary>
            <param name="startDate">The minimum of the date range.</param>
            <param name="endDate">The maximum of the date range.</param>
            <param name="startField">The name of the asset field which contains the start of its date range.</param>
            <param name="endField">The name of the asset field which contains the end of its date range.</param>
            <param name="isRecursive">
              If true, subfolders will also be searched. If false, only the folder specified will be
              searched. Defaults to false.
            </param>
            <param name="filterStatus">The list of states to filter on, if any. Defaults to the context's filter status.</param>
            <param name="excludeProjectTypes">
              if true excludes special asset types that are related to projects like libraries and
              templates from appearing in the results.  Defaults to true.
            </param>
            <returns>A List of matching Assets.</returns>
            <remarks>
              This method automatically searches for fields inside of lists.
            </remarks>
            <example>
              Find date ranges within the past 30 days:
              <code><![CDATA[
            DateTime startDate = DateTime.Today.AddDays(-30);
            DateTime endDate = DateTime.Now;
            List<Asset> files = folderAsset.GetDateOverLap(startDate, endDate, "start", "end");
            ]]></code>
              You can also search singular date fields instead of a range by specifying the same start and end field:
              <code><![CDATA[
            // Search all of August 2010
            DateTime startDate = new DateTime(2010, 8, 1);
            DateTime endDate = new DateTime(2010, 9, 1).AddTicks(-1);
            List<Asset> files = folderAsset.GetDateOverLap(startDate, endDate, "the_date", "the_date");
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetLink(System.Boolean,CrownPeak.CMSAPI.ProtocolType)">
            <summary>
              Renders a link to the asset based on the current context. Upon publishing, it will return the link to the published
              page.
              Upon previewing, it will return the cms preview link to the page.
              Defaults to LinkType.Default for the link type.
              Defaults to "output" for the layout.  If this is a preview and a preview template exists, it will use that for a
              default.
            </summary>
            <param name="addDomain">
              Optional: If true add HostName for current publishing package to link.  Defaults to false. Must
              be in OutputContext (output template or filename or url template) and publishing. No effect in Preview.
            </param>
            <param name="protocolType">
              Optional: If addDomain is true, determines if the protocol should be added and whether to
              use http or https. No effect in Preview.<see cref="T:CrownPeak.CMSAPI.ProtocolType">indexer</see> Defaults to http.
            </param>
            <returns>The link to the asset</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            <% Asset boardAsset = Asset.Load("/Site/About Us/Board of Directors"); %>
            <a href="<%= boardAsset.GetLink() %>"><%= boardAsset.Label %></a><br />
            /// <% Asset boardAsset = Asset.Load("/Site/About Us/Board of Directors"); %>
            <a href="<%= boardAsset.GetLink(addDomain:true,protocolType:ProtocolType.Https) %>"><%= boardAsset.Label %></a><br />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetLink(CrownPeak.CMSAPI.LinkType,System.String,System.String,System.Boolean,CrownPeak.CMSAPI.ProtocolType)">
            <summary>
              Renders a link to the asset based upon the current context.  Upon publishing, it will return the link to the
              published page.
              Upon previewing, it will return the cms preview link to the page.
            </summary>
            <param name="type">The link type.</param>
            <param name="layout">
              Optional: The layout name, without file extension. Default is "output". If this is a preview and a
              preview template exists, it will use that for a default.
            </param>
            <param name="publishingArgs">Optional: args such as _pagenum=2</param>
            <param name="addDomain">
              Optional: If true add HostName for current publishing package to link.  Defaults to false. Must
              be in OutputContext (output template or filename or url template) and publishing.
            </param>
            <param name="protocolType">
              Optional: If addDomain is true, determines if the protocol should be added and whether to
              use http or https.<see cref="T:CrownPeak.CMSAPI.ProtocolType">indexer. Defaults to http.</see>
            </param>
            <returns><see cref="T:System.String" />A link to the page.</returns>
            <example>
              Link to Home Page
              <code lang="C#">
             <![CDATA[
             <% Asset homePageAsset = Asset.Load("/Site/Home Page/Index"); %>
             <a href="<%= homePageAsset.GetLink() %>"><%= homePageAsset["short_title"]%></a>
             ]]>
             </code>
              Link to XML feed of the Home Page
              <code lang="C#">
             <![CDATA[
             <% Asset homePageAsset = Asset.Load("/Site/Home Page/Index"); %>
             <a href="<%= homePageAsset.GetLink(LinkType.Default, "xml_output") %>"><%= homePageAsset["xml_link_text"] %></a>
             ]]>
             </code>
              Include link to the home page CSS file.
              <code lang="C#">
             <![CDATA[
             <% Asset styleSheetAsset = Asset.Load("/Assets/Css/Home Page") %>
             <link href="<%= styleSheetAsset.GetLink(LinkType.Include) %>" rel="stylesheet" type="text/css" />
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetLastPublishedLinks(System.Boolean,CrownPeak.CMSAPI.ProtocolType)">
            <summary>
              Returns the last published link(s) of the asset or the binary file based on the current context and the current
              publishing server.
            </summary>
            <param name="addDomain">Optional: If true add HostName for current publishing package to link. Defaults to false.</param>
            <param name="protocolType">
              Optional: If addDomain is true, determines if the protocol should be added and whether to
              use http or https.<see cref="T:CrownPeak.CMSAPI.ProtocolType">indexer. Defaults to http.</see>
            </param>
            <returns> the last published link(s) of the asset or the binary file</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetCmsUtilityLink(CrownPeak.CMSAPI.UtilityLinkType,CrownPeak.CMSAPI.UtilityLinkParams)">
            <summary>
              Gets the CMS utility link.  Currently we only support "Edit" and "Internal" links.  More utility links will be
              implemented as needed.
            </summary>
            <param name="type">The type.</param>
            <param name="utilityLinkParams">The utility link params.</param>
            <returns>The link.</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            <% Asset editThisAsset = Asset.Load("/Site/Press Releases/"); %>
            <a href="<%= editThisAsset.GetCmsUtilityLink(UtilityLinkType.Edit) %>">Edit This Asset</a>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetContentFields(System.Collections.Generic.List{System.String})">
            <summary>
              <para>
                Gets a dictionary of fields dependending on the fieldNames argument.
              </para>
              <para>
                This function is called on the current asset for all templates before running to load all DB fields.
              </para>
              <para>
                Will look for both fields equaling the name and equaling "upload#" plus the name unless the specified name
                already starts with upload#.
              </para>
              <para>
                If you don't provide this param, or pass null, or pass an empty list or pass a list that contains a * element,
                then all fields in the db are returned.
              </para>
              <para>
                Found fields are added to this asset instance's cache so there will be no more DB hits when you access them.  If
                the optional to load all fields is taken, then any other fields lookups on the asset
                instance will not go back to the DB
              </para>
            </summary>
            <param name="fieldNames">Optional: Specifies the fields to return. Defaults to null.</param>
            <returns>An interface into a dictionary holding key value pairs of the data that the method was able to retrieve</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetMeta">
            <summary>
              Returns the meta data in a Dictionary.
            </summary>
            <returns>
              A dictionary containing all of this asset's meta data.
            </returns>
            <example>
              <code lang="C#">
            <![CDATA[
             Dictionary<string, string> metaData = asset.GetMeta();
             asset.SaveMeta(metaData);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.GetContent">
            <summary>
              Gets the content fields and caches them in this asset's <see cref="P:CrownPeak.CMSAPI.Asset.Item(System.String)">indexer</see>, then returns them in
              a Dictionary.
            </summary>
            <returns>
              A dictionary containing all of this asset's fields.
            </returns>
            <example>
              <code lang="C#">
            <![CDATA[
             Dictionary<string, string> theContent = asset.GetContent();
             asset.SaveContent(anotherAsset.GetContent());
            ]]>
            </code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.Asset.Item(System.String)">
            <summary>
              Gets or sets the <see cref="T:System.String" /> with the specified key.
              Setting a value is not permanent unless SaveContent is called with no arguments.  Data is set in memory.
              Assigning a value using [] on the implicit "asset" which is always available
              can be used to pass data from new.aspx to input.aspx and from post_input.aspx to post_save.aspx.
              <para>If assigning a value of null, it will be stored as an empty string</para>
            </summary>
            <param name="key">The field name</param>
            <value>The field value</value>
            <remarks>
              <para>
                This indexer does not save set fields to the database automatically. To do so, use
                <see cref="M:CrownPeak.CMSAPI.Asset.SaveContent(System.Collections.Generic.Dictionary{System.String,System.String})">Asset.SaveContent</see> or
                <see cref="M:CrownPeak.CMSAPI.Asset.SaveContentField(System.String,System.String)">Asset.SaveContentField</see>.
              </para>
              <para>
                Values retrieved with this indexer are cached. If you have two <see cref="T:CrownPeak.CMSAPI.Asset" /> objects referring to the
                same CMS asset and only update one of them, the other will retain the old values.
              </para>
            </remarks>
            <example>
              <code>
              <![CDATA[
            
               // setting example
               //new.aspx
               asset["foo"] = "bar";
            
               //input.aspx
               Input.ShowTextBox("Foo","foo"); //initializes with value "bar"
            
               //reading example
            
               asset.SaveContentField("key","value");
               string value = asset["key"];  //returns value since it was already saved to the DB
            
               asset["foo"] = "bar";
               string val = asset["foo"];//returns "bar".  This value is in-memory only.
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveMetaField(System.String,System.String)">
            <summary>
              Saves a meta data field to the database.
              <para>If the value is null, it will be stored as an empty string</para>
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <example>
              <code lang="C#">
              <![CDATA[
               string key = "MyCustomProperty";
               string value = "Green";
               asset.SaveMetaField(key, value);
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveContentField(System.String,System.String)">
            <summary>
              Saves a content field to the database.
              <para>If the value is null, it will be stored as an empty string</para>
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <example>
              <code lang="C#">
              <![CDATA[
               string key = "MyCustomProperty";
               string value = "Green";
               asset.SaveContentField(key, value);
            
             ]]></code>
            </example>
            <remarks>The asset's <see cref="P:CrownPeak.CMSAPI.Asset.Item(System.String)">indexer</see> will also be updated.</remarks>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.DeleteContentField(System.String)">
            <summary>
              Deletes a content field with the given key.
            </summary>
            <param name="key">The key or name of the field.</param>
            <returns>
              The old value
            </returns>
            <example>
              <code lang="C#">
              <![CDATA[
              <% string oldValue = asset.DeleteContentField("my_field"); %>
            ]]>
              </code>
            </example>
            <remarks>
              Variations on the key such as upload fields and arrays are NOT removed unless specifically named by the key.
            </remarks>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.DeleteContentFields(System.Collections.Generic.List{System.String})">
            <summary>
              Delete all the content fields whose names are in the given list
            </summary>
            <param name="fieldsToRemove">List of names of the fields to remove.</param>
            <returns>A Dictionary containing the old values of the removed fields</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.DeleteMetaField(System.String)">
            <summary>
              Deletes a meta data field with the given key.
            </summary>
            <param name="key">The key or name of the field.</param>
            <returns>
              The old value
            </returns>
            <example>
              <code lang="C#">
              <![CDATA[
              <% string oldValue = asset.DeleteMetaField("my_field"); %>
            ]]>
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.DeleteMetaFields(System.Collections.Generic.List{System.String})">
            <summary>
              Delete all the meta data fields whose names are in the given list
            </summary>
            <param name="fieldsToRemove">List of names of the meta data fields to remove.</param>
            <returns>A Dictionary containing the old values of the removed meta data fields</returns>
            <example>
              <code lang="C#">
              <![CDATA[
              List<string> deleteFields = new List<string>() { "description", "title", "category", "keywords" };
              Dictionary<string, string> deletedFields = asset.DeleteMetaFields(deleteFields);
            ]]>
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveMeta(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              Saves either the asset's <see cref="P:CrownPeak.CMSAPI.Asset.Meta">indexer</see> or the meta data fields provided in a dictionary to the
              database as this asset's meta data fields.
              <para>If any of the values in the fieldsToStore dictionary are null, they will be stored as an empty string.</para>
            </summary>
            <param name="fieldsToStore">Optional: If not null, the fields to store. Otherwise the asset's indexer dictionary will be saved.</param>
            <example>
              <code lang="C#">
             <![CDATA[
               asset.Meta["foo"] = "bar";
               asset.Meta["Hamlet"] = "Shakespeare";
               asset.SaveMeta();
            
               Dictionary<string, string> fields = new Dictionary<string, string>();
               fieldsToStore.Add("foo", "bar");
               fieldsToStore.Add("Hamlet", "Shakespeare");
               asset.SaveMeta(fieldsToStore);
             ]]></code>
            </example>
            <remarks>
              If <paramref name="fieldsToStore" /> is specified, the asset's Meta indexer dictionary will be updated as
              well.
            </remarks>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveContent(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              Saves either the asset's <see cref="P:CrownPeak.CMSAPI.Asset.Item(System.String)">indexer</see> or the content provided in a dictionary to the
              database as this asset's fields.
              <para>If any of the values in the fieldsToStore dictionary are null, they will be stored as an empty string.</para>
            </summary>
            <param name="fieldsToStore">Optional: If not null, the fields to store. Otherwise the asset's indexer dictionary will be saved.</param>
            <example>
              <code lang="C#">
             <![CDATA[
               asset["foo"] = "bar";
               asset["Hamlet"] = "Shakespeare";
               asset.SaveContent();
            
               Dictionary<string, string> fields = new Dictionary<string, string>();
               fieldsToStore.Add("foo", "bar");
               fieldsToStore.Add("Hamlet", "Shakespeare");
               asset.SaveContent(fieldsToStore);
             ]]></code>
            </example>
            <remarks>If <paramref name="fieldsToStore" /> is specified, the asset's indexer dictionary will be updated as well.</remarks>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.AddDependencyTo(CrownPeak.CMSAPI.Asset)">
            <summary>
              Adds a dependency on this asset to the provided asset.
              So when this asset publishes, it will check the asset or its children and see if they need to be
              published.
            </summary>
            <param name="dependentAsset">The dependent asset which will be the child.</param>
            <example>
              <code lang="C#">
             <![CDATA[
             <%
            
            
              // If a new child is added to the Press Releases folder and published, publish the Index
            
              Asset dependentAsset = Asset.Load("/Site/Press Releases/");
              Asset indexAsset = Asset.Load("/Site/Index");
              indexAsset.AddDependencyTo(dependentAsset);
            
            
             %>
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveEmailAttachment(System.String,CrownPeak.CMSAPI.EmailAttachment)">
            <summary>
              Saves an email attachment to an asset. This function has been designed to run under the SmtpImportContext and will
              throw a contract error if called
              from the wrong context. Once the attachment has been saved it is treated like an uploadedFile.
            </summary>
            <param name="fieldName">The field name where this will be stored</param>
            <param name="attachment">The EmailAttachement that will be saved intot he asset.</param>
            <example>
              <code lang="C#">
             <![CDATA[
              foreach (EmailAttachment attachment in context.EmailAttachments)
              {
                string fieldName = "";
                switch (attachment.Label)
                {
                  case "Original":
                    fieldName = "original_image";
                    break;
            
                  case "Thumbnail-50":
                    fieldName = "thumbnail50_image";
                    break;
            
                  case "Thumbnail-25":
                    fieldName = "thumbnail25_image";
                   break;
                }
                if (!string.IsNullOrWhiteSpace(fieldName))
                {
                  asset.SaveEmailAttachment(fieldName, attachment);
                }
              }
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveUploadedFile(System.String,CrownPeak.CMSAPI.UploadedFile)">
            <summary>
              <para>
                Save an uploaded file to an asset.  Usually used in upload.aspx to save the original image before creating a
                thumbnail.
              </para>
              <para>
                Import Note: This would be called from upload.aspx when using Input.ShowAcquireImage() to upload an image.  You
                need to
                provide this key to the ShowAcquireImage call in the optional "hiddenFields" parameter, otherwise things may not
                save correctly.
              </para>
              <para>
                When calling from upload.aspx, saving is not immediate.  Data is stored temporarily and is saved when the form
                is committed.
              </para>
            </summary>
            <param name="key">
              The name to save it under.  Don't include "upload#".  If null or an empty string is passed,
              we will use the key in the object
            </param>
            <param name="uploadedFile">The uploaded file.</param>
            <example>
              <code lang="C#">
              <![CDATA[
            UploadedFile imageUpload = context.UploadedFile;
            string value = imageUpload.Path;
            // my_photo_thumbnail was used in input.aspx because we want to display the thumbnail when we edit, not the possibly large original
            if (imageUpload.Matches("my_photo_thumbnail"))
            {
            asset.SaveUploadedFile("my_photo", imageUpload); // it gets overwritten later when it is resized to 300x300
            Img img = Img.Load(value);
            if (!img.HasError)
            {
            ImgResult res = img.CreateThumbnail("my_photo_thumbnail", 300, 300);
            if (res.HasError)
            {
            context.Error = "Upload Error creating thumbnail on " + value + " error: " + res.ErrorMessage;
            }
            }
            else
            {
            context.Error = "Upload Error Loading on " + value + " error: " + img.ErrorMessage;
            }
            }
            ]]>
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveBase64AsAttachment(System.String,System.String,System.String)">
            <summary>
              <para>Save a new attachment using base64 data as a source.</para>
            </summary>
            <param name="key">The key that will be used to save the path in the content properties</param>
            <param name="extension">The filename extension to use</param>
            <param name="base64String">Base64 encoded bytes as a string</param>
            <returns>The CMS path to the attachment if it is successful, null if not successful, check context.Error</returns>
            <example>
              <code lang="C#">
             <![CDATA[
               Asset data = Asset.Load("/Site/scripts/data");
               string base64data = data["data_base64"];
            
               string path = asset.SaveBase64AsAttachment("image",".jpg",base64data);
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveHexAsAttachment(System.String,System.String,System.String)">
            <summary>
              <para>Save a new attachment using a hex string data as a source.</para>
            </summary>
            <param name="key">The key that will be used to save the path in the content properties</param>
            <param name="extension">The filename extension to use</param>
            <param name="hexString">Hex encoded bytes.  Just a string of two place hex numbers, no dashes or other formatting</param>
            <returns>The CMS path to the attachment if it is successful, null if not successful, check context.Error</returns>
            <example>
              <code lang="C#">
             <![CDATA[
               Asset data = Asset.Load("/Site/scripts/data");
               string hex = data["data_hex"];
            
               string path = asset.SaveHexAsAttachment("image",".jpg",hex);
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateFromUploadedFile(System.String,CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.UploadedFile)">
            <summary>
              <para>Create a binary (uploaded asset) from an UploadedFile object</para>
            </summary>
            <param name="label">The name of the asset - must be unique</param>
            <param name="saveLocation">The folder to store the asset</param>
            <param name="uploadedFile">The uploaded file object to save.</param>
            <returns>A new Asset object if it is successful, null if not successful, check context.Error</returns>
            <example>
              <code lang="C#">
             <![CDATA[
              Asset image = Asset.Load("/Site/scripts/data.jpg");
            
              Asset newAsset = Asset.CreateFromUploadedFile("test.jpg", asset.Parent, image);
            
             // or in post_input.aspx:
            
              Asset.CreateFromUploadedFile("image_asset.jpg", asset.Parent, context.InputForm.UploadedFiles["image_upload_source"]);
            
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateFromBase64(System.String,CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              <para>Create a binary (uploaded asset) from a base64 string</para>
            </summary>
            <param name="label">The name of the asset - must be unique</param>
            <param name="saveLocation">The folder to store the asset</param>
            <param name="base64String">The file bytes as a base 64 encoded string.</param>
            <returns>A new Asset object if it is successful, null if not successful, check context.Error</returns>
            <example>
              <code lang="C#">
             <![CDATA[
               Asset data = Asset.Load("/Site/scripts/data");
               string base64data = data["data_base64"];
            
               Asset.CreateFromBase64("hex.jpg",asset.Parent, base64data);
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.CreateFromHex(System.String,CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              <para>Create a binary (uploaded asset) from a Hex string</para>
            </summary>
            <param name="label">The name of the asset - must be unique</param>
            <param name="saveLocation">The folder to store the asset</param>
            <param name="hexString">A string of two digit hex numbers representing the file bytes</param>
            <returns>A new Asset object if it is successful, null if not successful, check context.Error</returns>
            <example>
              <code lang="C#">
             <![CDATA[
               Asset data = Asset.Load("/Site/scripts/data");
               string hex = data["data_hex"];
            
               Asset.CreateFromHex("hex.jpg",asset.Parent, hex);
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveAssetAsAttachment(System.String,CrownPeak.CMSAPI.Asset,System.Boolean)">
            <summary>
              Used to save an uploaded asset's file contents to another asset as an attachment.
              Attachment names are automatically generated except for the extension. This extension is derived from the
              asset label.  Everything after the last dot (if any) is included in the extension.  Extensions are sanitized to
              remove commas and other problematic symbols.  Attachments do not currently support
              non ASCII characters and so if the extension is in a non-ASCII language, the extension may become mangled.
            </summary>
            <param name="key">
              The name to save it under.  Don't include "upload#".  If null or an empty string is passed,
              we will use the key in the object
            </param>
            <param name="uploadedBinaryAsset">The asset.  Must have been created via upload. </param>
            <param name="makeBinaryLinkField">If true will be setup as a "binary link field"</param>
            <example>
              <code lang="C#">
               <![CDATA[
                    Asset image = Asset.Load("/Assets/someimage.jpg");
                    Assets imageHolder = Asset.Load("/Assets/imageholder.jpg");
                    imageHolder.SaveAssetAsAttachment("theimage", image, true);
            
             ]]>
               </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.SaveUploadedFile(System.String,CrownPeak.CMSAPI.UploadedFile,System.Boolean)">
            <summary>
              For internal use.  Does not copy the file itself.  Used by CreateThumbnail since a tmp has already been created.
            </summary>
            <param name="key"></param>
            <param name="uploadedFile"></param>
            <param name="copyFile"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.ClearUpload(System.String)">
            <summary>
              Clears the specified upload's meta data from the asset.  If there is an array
              of uploads with this name, they are all removed unless a specific element is named.
            </summary>
            <param name="key">The key used to identify the upload that you are clearing.</param>
            <example>
              <code lang="C#">
            <![CDATA[
            <% assetWithAttachments.ClearUpload("my_photo"); %>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.UpdateFromBase64(System.String)">
            <summary>
              <para>Update a binary (uploaded asset) from a base64 string.</para>
            </summary>
            <param name="base64String">The file bytes as a base 64 encoded string.</param>
            <returns>True if updating is successful, false if not successful, check context.Error</returns>
            <example>
              <code lang="C#">
             <![CDATA[
               Asset data = Asset.Load("/Site/scripts/data");
               string base64data = data["data_base64"];
            
               asset.UpdateFromBase64(base64data);
               if (!string.IsNullOrWhiteSpace(context.Error))
                 Out.WriteLine("Update Failed: " + context.Error);
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.Rename(System.String)">
            <summary>
              Renames the asset to the specified label
            </summary>
            <param name="newLabel">The new label.</param>
            <returns>True if successful, false otherwise.</returns>
            <example>
              Renaming the asset
              <code lang="C#">
            Asset myAsset = Asset.Load("/Site/About Us/A");
            myAsset.Rename("About Us");
            </code>
              Rename the asset by replacing the underscores with dashes
              <code lang="C#">
            Asset myAsset = Asset.Load("/Site/Press Releases/2010_11_07_Amazing_Day");
            myAsset.Rename(myAsset.Label.Replace('_','-'));
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.Move(CrownPeak.CMSAPI.Asset)">
            <summary>
              Moves this asset to the specified destination folder.
            </summary>
            <param name="destination">The destination. Must be a FolderType Asset otherwise it will throw an error.</param>
            <returns>Returns true upon succesfully moving the asset to the destination. Otherwise it will return false.</returns>
            <example>
              <code lang="C#">
            Asset moveThisAsset = Asset.Load("/Site/About Us/About Us");
            Asset destinationFolderAsset = Asset.Load("/Site/Working Folder");
            moveThisAsset.Move(destinationFolderAsset);
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.Route(CrownPeak.CMSAPI.Status,System.Boolean)">
            <summary>
              Route the given asset to a workflow step that corresponds to the given status.
              The asset must have workflow.  The status must correspond to one of the steps on the asset's
              current workflow.  If more than one workflow step has the given state, then the lowest step will be
              chosen.
              Use Status.Load(string statusName) to load the status.
              If it returns false, check the context.Error property.
              Currently, you may only route file assets, routing folders in not supported.
            </summary>
            <param name="status">The status.</param>
            <param name="publishDependencies">
              Optional: Applies only when workflow results in a publish.  If true, dependencies will be
              computed and published if necessary. Defaults to false.
            </param>
            <returns>
              true if successful, false otherwise.
            </returns>
            <example>
              <code lang="C#">
            // Move the asset to the workflow step that has status set to "LIVE".
            bool WasSuccessful = asset.Route(Status.Load("LIVE"));
            if (!WasSuccessful)
            {
            Out.WriteLine("Route failed: " + content.Error);
            }
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.Publish(System.Boolean,System.String)">
            <summary>
              Publish the asset.  If we are in a session, it will reuse the same session, otherwise a new session is created.
              Only files are currently supported.
            </summary>
            <param name="publishDependencies">Optional: pass true to include dependencies.  Defaults to false</param>
            <param name="args">Optional: publishing arguments like _pageNum=1. Defaults to empty string.</param>
            <returns>true if successful.  If false, check the context.Error for the error message</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Asset.Show(System.String)">
            <summary>
              Similar to “include” but instead evaluates another asset preview/output within its
              own context as opposed to the current asset context. This is often used to combine
              different templates to create a composite template.
            </summary>
            <param name="layoutName">Optional: Name of output template file to render. Defaults to "output".</param>
            <returns>Render output</returns>
            <example>
              <code lang="C#"><![CDATA[
            <!—-basic homepage template-->
            <% Asset navAsset = Asset.Load(asset["nav_id"]); %>
            <% string featureOutput = Asset.Load(asset["feature_id"]).Show(); %>
            <table>
              <tr>
                <td colspan=2><%= asset.Show("stage_output") %></td>
              </tr>
              <tr>
                <td><%= navAsset.Show() %></td>
                <td><%= featureStageOutput %></td>
              </tr>
              <tr>
                <td colspan=2><%= Asset.Load("/Footer.html").Show() %></td>
              </tr>
            </table>]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.BinaryFile">
            <summary>
            Methods for processing binary assets into Base64
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.BinaryFile.LoadAsBase64(CrownPeak.CMSAPI.Asset)">
            <summary>
            Loads binary asset as Base64
            </summary>
            <param name="asset">The asset to load as Base64.</param>
            <returns>Returns Base64</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.BinaryFile.LoadAsBase64(System.String)">
            <summary>
            Loads binary asset as Base64
            </summary>
            <param name="path">The path to the asset to load as Base64.</param>
            <returns>Returns Base64</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.ComponentFramework">
            <summary>
              Encapsulates component framework functionality
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.GetAllComponentTypesForDrag(CrownPeak.CMSAPI.Asset)">
            <summary>
              EXPERIMENTAL! Function definition can change or be removed. Use at own risk. Function retrieves all components
              available for drag and drop.
            </summary>
            <param name="asset">The current asset in which components will be dragged and dropped into</param>
            <returns>
              A list of ContentBlockComponentDetails which contains information on all the components that are available to
              the provided asset
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.RenderDragComponents(CrownPeak.CMSAPI.Asset)">
            <summary>
              EXPERIMENTAL! Function definition can change or be removed. Use at own risk. Returns a dictionary of component names
              and their corresponding outputs' rendered for drag and drop that are contained within the provided
              componentDefinition.
              It automatically includes any components that should always be available for drag and drop.
            </summary>
            <param name="asset">The asset in which components are listed in for the drag and drop experience</param>
            <returns>A dictionary of component names and their corresponding outputs' rendered for drag and drop</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.RenderDragComponent(CrownPeak.CMSAPI.Asset)">
            <summary>
              EXPERIMENTAL! Function definition can change or be removed. Use at own risk. Given the componentDefinition asset this
              function will return a dictionary of component name and component outputs which this component uses.
            </summary>
            <param name="componentDefinition">The component definition asset to be rendered</param>
            <param name="context">The current context</param>
            <returns>
              a Dictionary of key value pairs where the key is the component class name and the value is the markup rendered
              for drag drop. If no components are rendered it will return an empty Dictionary.
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.UpdateMarkupForPreviewPublish(CrownPeak.CMSAPI.OutputContext,System.String)">
            <summary>
              EXPERIMENTAL! Function definition can change or be removed. Use at own risk. parses the provided markup, removes
              either the preview or publish content depending on the context and then returns the updated markup
            </summary>
            <param name="context">The current asset's context</param>
            <param name="markup">The current markup being constructed</param>
            <returns>an updated markup with the preview or publish content removed depending on the context</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.StartWrap(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext,System.String,System.String)">
            <summary>
              EXPERIMENTAL! Function definition can change or be removed. Function used to start the navigation wrapper
            </summary>
            <param name="asset">the asset to be wrapped</param>
            <param name="context">the context of the specified asset</param>
            <param name="wrapper">the name of the wrapper template</param>
            <param name="wrapperType"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.GenerateCssHeaderDeclarations(CrownPeak.CMSAPI.Asset)">
            <summary>
              EXPERIMENTAL! Function definition can change or be removed. Use at own risk. Generates the html css references for
              navigation wrappers where the css is specified in an external config file.
            </summary>
            <param name="configAsset">The external configuration asset</param>
            <returns>the &lt;link rel="stylesheet" href="... with the specified css file</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.GetComponentLibrarySiteRootFolder(CrownPeak.CMSAPI.Asset)">
            <summary>
              EXPERIMENTAL! Function definition can change or be removed. Use at own risk. Function to retrieve the site root
              specified in the component library configuration.
            </summary>
            <param name="asset">the current asset.</param>
            <returns>The site root specified in the component library configuration that pertains to the given asset.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.ParseMarkupForDrag(System.String)">
            <summary>
              EXPERIMENTAL! Function definition can change or be removed. Use at own risk. Parses the html markup provided and
              returns a modified version of that markup for drag and drop.
            </summary>
            <param name="markup">The string version of the html markup that contains the Crownpeak component placeholder syntax</param>
            <returns>The markup that was passed but with the additional content neccessary to render it in drag and drop</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.ParseDragAndDropMarkupForPreviewAndPublish(CrownPeak.CMSAPI.OutputContext,System.String)">
            <summary>
             Parses HTML markup for drag and drop components for preview or publishing
            </summary>
            <param name="context">The output context to tell if we are publishing</param>
            <param name="markup">The markup to be parsed</param>
            <returns>The parsed markup</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.GetContext">
            <summary>
              EXPERIMENTAL! Function definition can change or be removed. Use at own risk. Returns the current outputcontext.
            </summary>
            <returns>Returns the current outputcontext.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFramework.GetVariablesScript(CrownPeak.CMSAPI.Asset)">
            <summary>
              EXPERIMENTAL! Function definition can change or be removed. Use at own risk. Based on the current drag and drop asset
              returns a json list of all the existing components and their content on the page.
            </summary>
            <param name="asset">The current drag and drop asset</param>
            <returns>A json list of all the existing components and their content on the page</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Layout">
            <summary>
              This class encapsulates all of the functions utilized by the Layout Definition Template
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Layout.FilenameHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the filename process for the Layout Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Layout.InputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.InputContext)">
            <summary>
              Encapsulates the input process for the Layout Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current InputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Layout.OutputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the output process for the Layout Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Layout.PostInputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostInputContext)">
            <summary>
              Encapsulates the output process for the Layout Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current PostInputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Layout.PostSaveHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostSaveContext)">
            <summary>
              Encapsulates the output process for the Layout Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current PostSaveContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Layout.UrlHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the url process for the Layout Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="T:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentBuilder">
            <summary>
              This class encapsulates all of the functions utilized by the Component Builder Template
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentBuilder.CopyHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.CopyContext)">
            <summary>
              Encapsulates the copy process for the Component Builder.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current CopyContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentBuilder.DeleteHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.DeleteContext)">
            <summary>
              Encapsulates the delete process for the Component Builder.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current DeleteContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentBuilder.FilenameHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the filename process for the Component Builder.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentBuilder.InputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.InputContext)">
            <summary>
              Encapsulates the input process for the Component Builder.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current InputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentBuilder.OutputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the output process for the Component Builder.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentBuilder.PostInputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostInputContext)">
            <summary>
              Encapsulates the output process for the Component Builder.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current PostInputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentBuilder.PostSaveHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostSaveContext)">
            <summary>
              Encapsulates the output process for the Component Builder.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current PostSaveContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentBuilder.UrlHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the url process for the Component Builder.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="T:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentLibraryConfig">
            <summary>
              This class encapsulates all of the functions utilized by the Component Library Configuration Template
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentLibraryConfig.FilenameHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the filename process for the Component Library Config.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentLibraryConfig.InputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.InputContext)">
            <summary>
              Encapsulates the input process for the Component Library Config.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current InputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentLibraryConfig.OutputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the output process for the Component Library Config.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.ComponentLibraryConfig.GetCLConfig(CrownPeak.CMSAPI.Asset)">
            <summary>
              Read the component library configuration.
            </summary>
            <param name="asset"></param>
            <returns></returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder">
            <summary>
              This class encapsulates all of the functions utilized by the Component Builder Template
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder.CopyHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.CopyContext)">
            <summary>
            Encapsulates the copy process for the Template Definition.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current context</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder.DeleteHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.DeleteContext)">
            <summary>
            Encapsulates the delete process for the Template Definition.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current context.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder.FilenameHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the filename process for the Template Definition.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder.InputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.InputContext)">
            <summary>
              Encapsulates the input process for the Template Definition.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current InputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder.OutputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the output process for the Template Definition.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder.OutputComponentsHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the output_components process for the Template Definition.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder.OutputCodeHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the output_code process for the Template Definition.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder.PostInputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostInputContext)">
            <summary>
              Encapsulates the output process for the Template Definition.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current PostInputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder.PostSaveHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostSaveContext)">
            <summary>
              Encapsulates the output process for the Template Definition.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current PostSaveContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.TemplateBuilder.UrlHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the url process for the Template Definition.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="T:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder">
            <summary>
              This class encapsulates all of the functions utilized by the Component Builder Template
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder.CopyHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.CopyContext)">
            <summary>
              Encapsulates the copy process for the Nav Wrapper Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current context.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder.DeleteHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.DeleteContext)">
            <summary>
              Encapsulates the delete process for the Nav Wrapper Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current context.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder.FilenameHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the filename process for the Nav Wrapper Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder.InputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.InputContext)">
            <summary>
              Encapsulates the input process for the Nav Wrapper Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current InputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder.OutputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the output process for the Nav Wrapper Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder.OutputComponentsHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the output_components process for the Nav Wrapper Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder.OutputCodeHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the output_code process for the Nav Wrapper Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder.PostInputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostInputContext)">
            <summary>
              Encapsulates the output process for the Nav Wrapper Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current PostInputContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder.PostSaveHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostSaveContext)">
            <summary>
              Encapsulates the output process for the Nav Wrapper Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current PostSaveContext.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.WrapperBuilder.UrlHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the url process for the Nav Wrapper Definition Template.
            </summary>
            <param name="asset">The current asset.</param>
            <param name="context">The current OutputContext.</param>
        </member>
        <member name="T:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Utilities">
            <summary>
              This class encapsulates all of the functions utilized by the Utilities Template in the Component Library
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Utilities.InputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.InputContext)">
            <summary>
              Encapsulates the input process for the utilities template
            </summary>
            <param name="asset">the current asset</param>
            <param name="context">the current context</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Utilities.PostSaveHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostSaveContext)">
            <summary>
              Encapsulates the post save process for the utilities template
            </summary>
            <param name="asset">the current asset</param>
            <param name="context">the current context</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Utilities.PostSaveJobHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostSaveContext)">
            <summary>
              Encapsulates the post save job process for the utilities template
            </summary>
            <param name="asset">the current asset</param>
            <param name="context">the current context</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkTemplates.Utilities.OutputHelper(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Encapsulates the output process for the utilities template
            </summary>
            <param name="asset">the current asset</param>
            <param name="context">the current context</param>
        </member>
        <member name="T:CrownPeak.CMSAPI.ComponentFrameworkComponents.Component_Layout">
            <summary>
              The component library layout class. This is used to manage the input and output functionalities when dealing with
              layouts
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentFrameworkComponents.Component_Layout.Output(CrownPeak.CMSAPI.Asset,System.String,System.Collections.Generic.Dictionary{System.String,System.Text.StringBuilder},System.String)">
            <summary>
              Generates the output for each layout within a template.
            </summary>
            <param name="asset">The current asset</param>
            <param name="name">
              If the layout is not specified then this field is used to discover the name of the layout within the
              current asset's content
            </param>
            <param name="content">
              A dictionary where each key value pair consists of the name of the column and the content
              (markup) that should be placed within the column
            </param>
            <param name="layout">The name of the layout</param>
            <returns>The output generated from replacing the layout's column placeholders with their corresponding content</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.OutputContext">
            <summary>
              The context available when running the output template file
              Also available when running filename.aspx, url.aspx, assetfilename.aspx, and asseturl.aspx
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.UserVariables">
            <summary>
              A place to store data as key value pairs to retrieve later.  Can be shared when calling other templates with
              Asset.Show, Asset.GetLink, and by a Wrapper as long as all
              templates involved are C#.
            </summary>
            <example>
              <code lang="C#"> 
             <![CDATA[
             
             // Store
             context.UserVariables["myvalue"] = "foo";
             
             // Read
             string myStoredValue = context.UserVariables["myvalue"];
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.OutputContext.SaveDirty">
            <summary>
              Special serialization of dirty content. For internal use.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.OutputContext.MapDirty(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              Maps dirty variables into context. Used to pass dirties from one context into a calling context
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.IsPublishing">
            <summary>
              Gets a value indicating whether the currently running template file is part of a publishing process.
            </summary>
            <value>
              <c>true</c> if this instance is publishing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.LayoutName">
            <summary>
              Name of the layout file such as output.aspx or xml_output.aspx.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PublishingStatus">
            <summary>
              The status that corresponds to the current publishing destination.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PublishingPackage">
            <summary>
              The destination package.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PageNumber">
            <summary>
              The current page number for a paginated asset.  Will be zero for non-paginated assets.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PublishingArgs">
            <summary>
              Gets the publishing args.
              Use HasArgs property to see if args are available.  Use dictionary notation [] to access specific values.
            </summary>
            <value>The publishing args.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PublishAgain">
            <summary>
              Use to cause the publish loop to run one more time.  Use PublishingLoopNumber to see which iteration you are
              currently on.
              The limit is 100 iterations.  This is independent of pagination when using Util.Paginate() in that case the
              publishing loop will
              continue for the necessary number of pages and this property will be false.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PublishingLoopNumber">
            <summary>
              The current publishing loop number.  Usually the same as page number, but it always starts at 1.
              Goes hand-in-hand with "PublishAgain".  Use this to see which iteration you are on if you are using PublishAgain to
              continue publishing.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.KeepPublishingPaginate">
            <summary>
              Used by Util.Paginate() to keep publishing loop running.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.KeepPublishingPaginateMaxCount">
            <summary>
              Used by Util.Paginate() to store the number of pages.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.OutputContext.SelfReferencingLinkTable">
            <summary>
              Used by publisher to make sure that pages generated by currently published asset can be enqueud and
              published right away before the dependencies
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.RemotePath">
            <summary>
              The path of the published file on the server
              Readonly: Setting context.PublishPath in filename.aspx or assetfilename.aspx can be used
              to change the value of the file path.  Publishing Properties can also be set for this purpose.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.LocalPath">
            <summary>
              The path of the published file on the CMS
              Readonly:  asset.Move() and/or asset.Rename() can be used to change the path.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.RelativeFolder">
            <summary>
              The path to the folder that contains the asset relative to where the asset's
              deployment properties are found.  For example, if an asset is in /Site/About Us and it's
              deployment properties are on the Site folder, the value would be "About Us".
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PropertiesExtension">
            <summary>
              Extension extracted from the filename on the publishing properties page
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PropertiesFilename">
            <summary>
              The filename on the publishing properties page
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PropertiesFolder">
            <summary>
              The folder from the Publishing properties page
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.RemoteHostname">
            <summary>
              FTP Hostname where the file is being published
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.RemoteUsername">
            <summary>
              Username used to connect to the remote FTP host.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PublishUrl">
            <summary>
              Current value of the publish URL (relative).   It can be overridden in url.aspx or asseturl.aspx.
              The URL is used to generate links to an asset or other resource.  PublishUrl must sometimes may generated
              independently of
              the filename depending on how the server is setup.
              WARNING: This value is not populated and has no effect in filename.aspx and assetfilename.aspx
            </summary>
            <example>
              <code lang="C#"> 
             <![CDATA[
              
             // overriding the publish url in url.aspx
             context.PublishUrl = context.PublishUrl + context.PageNumber + ".html"; 
            
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.PublishPath">
            <summary>
              Current value of the publish Path (the ftp filename relative to the root).  Used in the actual transfer of a file to
              the server. It can be overridden in filename.aspx or assetfilename.aspx.
              WARNING: This value is not populated and has no effect in url.aspx and asseturl.aspx
            </summary>
            <example>
              <code lang="C#"> 
             <![CDATA[
              
             // overriding the publish path in filename.aspx
             context.PublishPath = context.PublishPath + context.PageNumber + ".html"; 
            
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.RenderPublishLinks">
            <summary>
              Set this to true, if you want generated links to be publish links during preview.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.IsGeneratingPublishLinks">
            <summary>
              Whether or not asset.getLink will give a live link or a preview.  True if RenderPublishLinks or IsPublishing is true.
              Preview defaults to false. While publishing or running View Output, defaults to true.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.IsGeneratingDependencies">
            <summary>
              Gets or sets a value indicating whether to generate dependencies (will also disable manual dependencies). Defaults to
              true.
            </summary>
            <value><c>true</c> if true generate dependencies; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.DisableAutoDependencyGeneration">
            <summary>
              Gets or sets a value indicating whether to automatically generate dependencies. Use in conjuction with
              Asset.AddDependencyTo to manually control dependency links. Defaults to false.
            </summary>
            <value><c>true</c> if true, disables automatic dependency generation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.OutputContext.DisablePreviewCache">
            <summary>
              Set this to <c>true</c> if you want to disable the preview render cache for this asset. Does not affect publishing.
              It is recommended you keep the default value of <c>false</c>.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.PostPublishContext">
            <summary>
              The context available when running the post_publish.aspx template file.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostPublishContext.PublishDirection">
            <summary>
              A code that tells if we have an asset moving to a new state, an updated asset, or a change requiring removals
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostPublishContext.PublishingStatus">
            <summary>
              The status that corresponds to the current publishing destination.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostPublishContext.PublishingPackage">
            <summary>
              The destination package.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostPublishContext.IsPublishing">
            <summary>
              Are we publishing
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostPublishContext.PublishingLoopNumber">
            <summary>
              The current publishing loop number.  Usually the same as page number, but it always starts at 1.
              Goes hand-in-hand with "PublishAgain".  Use this to see which iteration you are on if you are using PublishAgain to
              continue publishing.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostPublishContext.LayoutName">
            <summary>
              Name of the layout file such as output.aspx or xml_output.aspx.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostPublishContext.RenderPublishLinks">
            <summary>
              Set this to true, if you want generated links to be publish links
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostPublishContext.IsGeneratingPublishLinks">
            <summary>
              Whether or not asset.getLink will give a live link or a preview.  Based on value of RenderPublishLinks.  Defaults to
              false
              NOTE: Does not apply to Util.ReplaceAttachments() or UploadedFile.GetLink() those always return a live link if
              package info is available.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.SearchG2Context">
            <summary>
              The context available when running a search_g2_*.aspx template file.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.PublishDirection">
            <summary>
              A code that tells if we have an asset moving to a new state, an updated asset, or a change requiring removals
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.CollectionName">
            <summary>
              The name of the Search G2 Collection to update. Null if no collection was configured for the current Publishing
              Package.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.JsonOverride">
            <summary>
              A JSON string in Solr UpdateJSON format. This field will be used instead of any code generated from JsonParams.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.JsonParams">
            <summary>
              Parameters used to generate UpdateJSON to send to the configured Search G2 Collection.
              See <see cref="T:CrownPeak.CMSAPI.SearchG2JsonParams">SearchG2JsonParams</see> for more details.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.PublishingStatus">
            <summary>
              The status that corresponds to the current publishing destination.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.PublishingPackage">
            <summary>
              The destination package.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.IsPublishing">
            <summary>
              Are we publishing
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.PublishingLoopNumber">
            <summary>
              The current publishing loop number.  Usually the same as page number, but it always starts at 1.
              Goes hand-in-hand with "PublishAgain".  Use this to see which iteration you are on if you are using PublishAgain to
              continue publishing.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.LayoutName">
            <summary>
              Name of the layout file such as output.aspx or xml_output.aspx.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.RenderPublishLinks">
            <summary>
              Set this to true, if you want generated links to be publish links
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2Context.IsGeneratingPublishLinks">
            <summary>
              Whether or not asset.getLink will give a live link or a preview.  Based on value of RenderPublishLinks.  Defaults to
              true
              NOTE: Does not apply to Util.ReplaceAttachments() or UploadedFile.GetLink() those always return a live link if
              package info is available.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.SearchG2Context.GetJson">
            <summary>
              Method used to retrieve JSON formatted string that will be sent to Search G2. Helpful for debugging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.SearchG2Context.SaveDirty">
            <summary>
              Special serialization of dirty content. For internal use.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.DeleteContext">
            <summary>
              The context available when running the delete.aspx template file
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.CopyContext">
            <summary>
              The context available when running the copy.aspx template file. Only runs when copying a file.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CopyContext.SourceAsset">
            <summary>
              Asset that was copied from.  New asset will be the CurrentAsset.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CopyContext.CopyAction">
            <summary>
              The copy action performed on the source Asset (Copy, Clone, or Branch).
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.InputContext">
            <summary>
              The context available when running the input template file - input.aspx
              Also used in the new template file - new.aspx
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.InputContext.FieldTypes">
            <summary>
              Field types to be stored in the template for inline editing
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.InputContext.ValidationErrorFields">
            <summary>
              Per-field validation errors
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.InputContext.IsNew">
            <summary>
              True if this asset was just created.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.InputContext.ShowSaveNewButton">
            <summary>
              Setting this value to true will activate and display the "Save and New" button. Clicking the "Save and New" button
              saves the current asset and creates a new one. The newly created asset will inherit the fields from the other asset.
              Loads the newly created assset in Edit mode.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.InputContext.ShowSaveEditButton">
            <summary>
              Setting this value to true will activate and display the "Save and Edit" button. Clicking the "Save and Edit" button
              saves the current changes to the database and keeps the form open so edits can continue to be made.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.InputContext.ShowPublishButton">
            <summary>
              Setting this value to true will show the "Publish" button. Clicking this button will publish the asset.
              ShowPublishButton defaults to true.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.InputContext.ShowSavePreview">
            <summary>
              Setting this value to true will show the "Save &amp; Preview" button. Clicking the "Save &amp; Preview" button
              saves the current changes and renders the preview of the asset. ShowSavePreview defaults to true.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.InputContext.ComboBoxCount">
            <summary>
              The number of combo boxes set on the page
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputContext.SaveDirty">
            <summary>
              Special serialization of dirty content.  For internal use.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.Context">
            <summary>
              The base class of all contexts.  The methods and properties that are common to all contexts are defined here.
              This class does not get instantiated directly.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.EvalTypeParam">
            <summary>
              Used to separate App domains.  User id for UI and session id for publishing.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.OverrideStatus">
            <summary>
              Used to select a branch when we don't want to use the asset's status to select the branch, usually
              this is the same as the publishing status
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.UsedBranchAssetId">
            <summary>
              The actual asset id of the project branch that was used for the current context if we had branches to select
              from.  All templates rendered from here should use this to select a branch if they are part
              of the same project branch collection
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Context._cultureInfo">
            <summary>
              The current CultureInfo
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Context._originalCulture">
            <summary>
              The CultureInfo when the context is created.  Used to restore to the default value.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.WcoUserId">
            <summary>
              The WCO user Id
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.WcoToken">
            <summary>
              The WCO token, used for authentication
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.WcoOmmId">
            <summary>
              The WCO Id, used for authentication
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.WcoUserName">
            <summary>
              The WCO token, used for authentication
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.WcoPassword">
            <summary>
              The WCO token, used for authentication
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.CurrentTemplateId">
            <summary>
              The asset id of the template file that we are currently running.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.UserInfo">
            <summary>
              Gets the user info.  See the User class note on this one.
            </summary>
            <value>The user info.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.ClientName">
            <summary>
              The name of this client.
            </summary>
            <value>String with the client's name</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.JobId">
            <summary>
              The job id if the current template is running via a Job.  Currently only used by post_save_job template.
            </summary>
            <value>String with the client's name</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.UIType">
            <summary>
              The <see cref="T:CrownPeak.CMSAPI.UIType">type of user interface</see> from which the current user is running the
              template.
              UIType.Unspecified is used when publishing.
            </summary>
            <example>
              <code lang="C#"><![CDATA[
            if (context.UIType == UIType.Classic)
            { 
              // Classic-specific code
            }
            else
            {
              // Regular code
            }
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.Error">
            <summary>
              Contains errors.  May also be used to trigger or set an error under some circumstances such as
              during upload.aspx
              During post_input don't use this for validation errors, use ValidationError <see cref="T:CrownPeak.CMSAPI.PostInputContext" /> instead.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.ExecutedById">
            <summary>
              The asset id of the asset that is executing this template.  Only populated if the current template is called by
              another
              such as when using an Asset.Show() or Asset.GetLink() command.  Calling template must also be a C# template.
            </summary>
            <value>
              The asset id of the calling asset, if set.  Otherwise it will be null.  Use context.ExecutedById.HasValue to check.
            </value>
            <example>
              <code lang="C#"> 
             <![CDATA[
             if (context.ExecutedById.HasValue)
             {
               Out.WriteLine(" I was shown by " + context.ExecutedById.Value);
             }
             
             int executedBy = context.ExecutedById??-1;
             if (executedBy != -1)
             {
               Out.WriteLine(" I was shown by " + executedBy);
             }
            
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.PreviewVersionId">
            <summary>
              If present, the asset's content will come from this previous version
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.FilterStatus">
            <summary>
              <para>
                Contains the names of statuses like "Live" and "Stage"
                which are considered valid in the current context. There is usually always a blank "" which signifies
                that assets without workflow are valid.
              </para>
              <para>
                Affects all calls which use filter status including Asset.Load(), Asset.GetFilterList(), Asset.GetFileList(),
                and Asset.GetFolderList() unless specifically set by those functions.
              </para>
              <para>
                This is a ReadOnlyCollection.  You may read it, but not modify it.  Reading this type of collection is almost
                identical
                to reading a List.
              </para>
            </summary>
            <value>The filter status.</value>
            <example>
              <code lang="C#"> 
             <![CDATA[
             
             //Print the names of statuses, note on will usually be blank.  This is normal.
             foreach(string statusName in context.FilterStatus)
             {
               Out.WriteLine("Status name: " + statusName);
             }
             
             // print the number of states.  Includes one blank.
             Out.WriteLine("Number of states: " + context.FilterStatus.Count);
             
             // Does the FilterStatus include the "Live" state?
             // Warning, this is case sensitive.  The names are the names of File assets in the "/System/States" folder.  This is the case that is used.
              Out.WriteLine("Contains Live? : " + context.FilterStatus.Contains("Live"));
            
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.CultureInfo">
            <summary>
              <para>
                If this is set, then when asset objects are looking for fields via the [] operator,
                they will first look for the the culture string (fr for example) plus name before returning, otherwise the field
                without the string will be returned.
              </para>
              <para>
                This will remain set for the lifetime of the currently running template unless specifically set to another culture
                or to null which will restore the default.
              </para>
              <para>The default culture has a string of "en-US"</para>
            </summary>
            <value>The current culture.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Context.EphoxFolder">
            <summary>
              The path on the server to load the current version of Ephox
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Context.SaveDirty">
            <summary>
              Perform special dirty work here.  For internal use.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Context.SaveBatchId">
            <summary>
              For internal use only.  For instrumentation
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Context.MapDirty(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              Maps dirty variables into context. Used to pass dirties from one context into a calling context
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Context.SaveDirtyAssetProps">
            <exclude></exclude>
        </member>
        <member name="T:CrownPeak.CMSAPI.UploadContext">
            <summary>
              The context for upload.aspx.  Called when uploading a file with an input form (input.aspx).
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadContext.UploadedFile">
            <summary>
              Returns the uploaded file specified by the uploadKey
            </summary>
            <returns></returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.PostInputContext">
            <summary>
              Context for the post_input.aspx template file.  Runs before data is saved.  Use post_save.aspx to run after the save.
              Use InputForm to read and manipulate data that will be saved to the current asset.  It will be populated by the data
              posted from the
              input form (input.aspx), but you can change, add, or remove values.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostInputContext.InputForm">
            <summary>
              Gives access to the data from the posted input form so the data can be read or modified before
              saving.
            </summary>
            <example>
              <code lang="C#"> 
             <![CDATA[
             
             // Gets the value of a form field called "title" that was posted from the input form (input.aspx)
             string newTitle = context.InputForm["title"];
             
             // Change data to be saved
             context.InputForm["title"] = "A new value to be saved as a content property called title on the current asset";
            
             // add a value to be saved
             context.InputForm["newfield"] = "A new field to be saved as a content property on the current asset";
            
             // Does the form contain a value for a field called "fieldName"
             bool containsField = context.InputForm.HasField("fieldName");
            
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostInputContext.ValidationError">
            <summary>
              Setting this causes the input form to be redisplayed with this message at the top.
            </summary>
            <example>
              <code lang="C#"> 
             <![CDATA[
            
            if (!context.InputForm.HasField("title")) // If a title is not provided
            { 
              // redisplay the input form with this message
              context.ValidationError = "Please add a title.";
            }
            else if (!asset.Label.Equals(context.InputForm["title"])) // If value is different from current label
            {
              asset.Rename(context.InputForm["title"]); // rename asset to new title value.
            }
            
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.PostInputContext.ValidationErrorFields">
            <summary>
              Fields whose names are a key in ValidationErrorFields will be highlighted, and will show the value as the error
              message.
            </summary>
            <example>
              <code lang="C#"> 
            <![CDATA[
            context.ValidationErrorFields.Add("my_field", "This field has an invalid value!");
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PostInputContext.SaveDirty">
            <summary>
              Special serialization of dirty content. For internal use.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.PostSaveContext">
            <summary>
              Context for post_save.aspx template file which runs after input form (Input.aspx) data is saved.  Use post_input.aspx
              to run before the save.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.FtpImportContext">
            <summary>
              Context for an FTP Import
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FtpImportContext.FtpBody">
            <summary>
              This will be present as long as it is a text file.  FTP import does not support binary files in this case it will be
              NULL.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FtpImportContext.FtpFilename">
            <summary>
              The label of the file imported into the CMS.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FtpImportContext.FtpHostname">
            <summary>
              The host name that the cms imported the file from.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FtpImportContext.FtpDate">
            <summary>
              The creation date of the imported file.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FtpImportContext.AutoCreateAsset">
            <summary>
              By default the import creates an asset to record the action.  Set this to false to stop the asset from being created.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.EmailContext">
            <summary>
              Context for an Email Template (email.aspx). Used when sending email via a workflow step.
              The template does not have to send the email.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.EmailContext.Body">
            <summary>
              The Current Email body.  If You want to overwrite the body, write to the response as you would with an output
              template.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.EmailContext.Subject">
            <summary>
              The subject of the email
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.EmailContext.From">
            <summary>
              The sender of the email
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.EmailContext.ContentType">
            <summary>
              The email content type. Defaults to plain/text
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.EmailContext.Receivers">
            <summary>
              A list of recipients.  Default is generated based on workflow settings.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.EmailContext.Users">
            <summary>
              A map of user ids to emails that are in the list of recipients
            </summary>
            <example>
              <code lang="C#"> 
             <![CDATA[
             
              foreach(User user in context.Users)
              {
                Out.WriteLine("<br/> User name: " + user.Username  + ", User email: " + user.Email);
              }
             
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.EmailContext.StopEmail">
            <summary>
              By default the workflow will send an email.  Set to true to cancel the send.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.EmailContext.SaveDirty">
            <summary>
              Special serialization of dirty content. For internal use.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.SmtpImportContext">
            <summary>
              Context for an Smpt Import Template (smtp_import.aspx). Used when recieving an email import.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SmtpImportContext.Receivers">
            <summary>
              The list of email addresses that received this email. (This is equivelent to the To: field in an email)
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SmtpImportContext.EmailAttachments">
            <summary>
              The list of EmailAttachments. If there were no attachments this list will be empty.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SmtpImportContext.From">
            <summary>
              The From field on the email header
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SmtpImportContext.TimeSent">
            <summary>
              The time that the email was sent.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SmtpImportContext.TimeReceived">
            <summary>
              The time that the email was received
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SmtpImportContext.Token">
            <summary>
              The token for the email import that is currently executing.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SmtpImportContext.Subject">
            <summary>
              The subject of the email.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SmtpImportContext.Body">
            <summary>
              The body of the email.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SmtpImportContext.AutoCreateAsset">
            <summary>
              By default the import creates an asset to record the action.  Set this to false to stop the asset from being created.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SmtpImportContext.AssetLabel">
            <summary>
              The auto created asset's label
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.SmtpImportContext.SaveDirty">
            <summary>
              Special serialization of dirty content. For internal use.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.PublishingArgs">
            <summary>
              An object which encapsulates the publishing args.
            </summary>
            <example>
              <code> 
            <![CDATA[
            
              // If the args were _sortOrder=Date&_name=Fred, the following would print 
              
              // key : _sortOrder  Value: Date
              // key : _name  Value: Fred
            
              foreach(Arg entry in context.PublishingArgs)
              {
                Out.WriteLine("key : " + entry.Key + " Value: " + entry.Value);
              }
              
            
              //Get the value of _sortOrder
              string sortorder = context.PublishingArgs["_sortOrder"];  
            
              // Does it have an argument called "_sortOrder" ?
              bool hasSortOrder = context.PublishingArgs.HasArg("_sortOrder");  
            
              //Does it have any args?
              bool hasSortOrder = context.PublishingArgs.HasArgs;   
            
              //How many args does it have?
              int numberOfArgs = context.PublishingArgs.Count;  
              
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PublishingArgs.#ctor(System.String)">
            <exclude />
        </member>
        <member name="P:CrownPeak.CMSAPI.PublishingArgs.Item(System.String)">
            <summary>
              Get the value of an argument with the given name.
            </summary>
            <param name="argName">The name of the argument.</param>
            <returns>The value of the argument.</returns>
            <example>
              <code> 
            <![CDATA[
             Out.WriteLine("Sort Order:{0}", context.PublishingArgs["sortOrder"]);
                    ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.PublishingArgs.HasArgs">
            <summary>
              Returns true if the object contains args.
            </summary>
            <returns>if the object contains any publishing args HasArgs will return <c>true</c>; otherwise <c>false</c></returns>
        </member>
        <member name="P:CrownPeak.CMSAPI.PublishingArgs.Count">
            <summary>
              The number of publishing args available
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.PublishingArgs.GetEnumerator">
            <summary>
              Allows you to iterate through the publishing argument names.
            </summary>
            <returns>A single item from the collection.</returns>
            <example>
              <code> 
            <![CDATA[
            
              // If the args were _sortOrder=Date&_name=Fred, the following would print 
              
              // key : _sortOrder  Value: Date
              // key : _name  Value: Fred
            
              foreach(Arg entry in context.PublishingArgs)
              {
                Out.WriteLine("key : " + entry.Key + " Value: " + entry.Value);
              }
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PublishingArgs.ToString">
            <summary>
              Prints the original argument list used to publish the asset.  This is in query string format
              arg=value&amp;arg2=value2...
            </summary>
            <returns>The string representation of the args in query string format.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Out.WriteLine(context.PublishingArgs);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PublishingArgs.HasArg(System.String)">
            <summary>
              Returns true if one of the argument names matches the parameter.
            </summary>
            <param name="argName">The name of the argument to match.</param>
            <returns>If the arg is present returns <c>true</c>; otherwise <c>false</c></returns>
            <example>
              <code lang="c#">
            <![CDATA[
            int search = 1630;
            FilterParams filterParams = new FilterParams();
            filterParams.Add(AssetPropertyNames.TemplateId, Comparison.Equals, search);    
            filterParams.Limit = 10;
            if(context.PublishingArgs.HasArg("_sortAlpha"))
            {
             filterParams.SortOrder = SortOrder.OrderBy(AssetPropertyNames.Label);
            }
             List<Asset> list = Asset.Load("/Site/About Us").GetFilterList(filterParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Arg">
            <summary>
              This type is used when enumerating over the PublishingArgs.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Arg.Key">
            <summary>
              The name of the arg.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Arg.Value">
            <summary>
              The value of the arg.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.UserVariables.Item(System.String)">
            <summary>
              Get the value of an argument with the given name.
            </summary>
            <param name="argName">The name of the argument.</param>
            <returns>The value of the argument.</returns>
        </member>
        <member name="P:CrownPeak.CMSAPI.UserVariables.Count">
            <summary>
              The number of user variables
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.UserVariables.GetEnumerator">
            <summary>
              Allows you to iterate through the publishing argument names.
            </summary>
            <returns>A single item from the collection.</returns>
            <example>
              <code> 
            <![CDATA[
            
            
              foreach(Arg entry in context.UserVariables)
              {
                Out.WriteLine("key : " + entry.Key + " Value: " + entry.Value);
              }
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.UserVariables.HasKey(System.String)">
            <summary>
              Returns true if one of the user variable names matches the parameter.
            </summary>
            <param name="keyName">The name to match</param>
            <returns>If the key is present returns <c>true</c>; otherwise <c>false</c></returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.Img">
            <summary>
              Functions for using and manipulating images
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Img.Filename">
            <summary>
              The CMS path to the file.  Use it when you have just generated a new thumbnail to get a path that can be used in an
              img src call.
            </summary>
            <value>The filename.</value>
            <example>
              <code> string filename = img.Filename;</code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.Img.Width">
            <summary>
              Gets the width.
            </summary>
            <value>The width.</value>
            <example>
              <code> int width = img.Width;</code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.Img.Height">
            <summary>
              Gets the height.
            </summary>
            <value>The height.</value>
            <example>
              <code> int height = img.Height;</code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.Img.Bytes">
            <summary>
              Used internally to cache bytes
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Img.ErrorMessage">
            <summary>
              If there was an error while loading this image a message will be here.
              Check HasError to see if an error happened
            </summary>
            <value>The load error message.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Img.HasError">
            <summary>
              USe to check if there was an error while loading.  Use ErrorMessage to see a description.
            </summary>
            <value>
              <c>true</c> if this instance has load error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CrownPeak.CMSAPI.Img.CreateThumbnail(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              <para>
                Creates a thumbnail of the specified size from the currently loaded image.
                A ThumbnailKey is required.  The resulting image will be in memory.  Use Asset.CreateThumbnail,
                PanelEntry.CreateThumbnail,
                or ImageForm.CreateThumbnail to preserve the data.
              </para>
              <para>
                Note: Due to memory limitations, the pixel count of the source image cannot be more than 10 million.
              </para>
            </summary>
            <param name="thumbnailKey">The Key used to refer to the thumbnail later as part of the asset's content.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="qualityByPercent">
              Optional: The Quality of the saved JPG as a percent.  Higher numbers have higher
              quality, but also bigger sizes.
            </param>
            <param name="preserveAspectRatio">
              Optional: Pass false if you want the thumbnail to be generated with exactly the size
              of the passed in width and height.
            </param>
            <returns><see cref="T:CrownPeak.CMSAPI.ImgResult" /> An ImgResult</returns>
            <example>
              <code lang="C#">
             <![CDATA[
               // Usually called from upload.aspx
               UploadedFile imageUpload = context.UploadedFile;
               string value = imageUpload.Path;
                    
              // my_photo_thumbnail was used in input.aspx because we want to display the thumbnail when we edit, not the possibly large original
              if (imageUpload.Matches("my_photo_thumbnail"))
              {
            
                 asset.SaveUploadedFile("my_photo", imageUpload); // it gets overwritten later when it is resized to 300x300
                 Img img = Img.Load(value);
            
                 if (!img.HasError)
                 {
                  ImgResult res = img.CreateThumbnail("my_photo_thumbnail", 300, 300);
                  if (res.HasError)
                  {
                     context.Error = "Upload Error creating thumbnail on " + value + " error: " + res.ErrorMessage;           
                   }  
                  }
                 else
                 {
                   context.Error = "Upload Error Loading on " + value + " error: " + img.ErrorMessage;           
                  }
                }
             
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Img.CropImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Crop a an image out of the original (current instance) using the coordinate defined by x,y,xx,yy, then scale it using
              width and height as in the CreateThumbnail call.
              The final image dimensions will not necessarily match the width and height unless the aspect ratio is preserved.
            </summary>
            <param name="width">The width used to scale the final image.</param>
            <param name="height">The height used to scale the final image.</param>
            <param name="x">The first x-coordinate (left) in pixels for the box used to cut out the cropped image.</param>
            <param name="y">The first y-coordinate (top) in pixels for the box used to cut out the cropped image.</param>
            <param name="boxWidth">The width in pixels for the box used to cut out the cropped image.</param>
            <param name="boxHeight">The height in pixels for the box used to cut out the cropped image.</param>
            <param name="qualityByPercent">Optional: The quality of the resulting image as a percent. Defaults to 75</param>
            <returns>ImgResult.  Contains the new Img.  Use HasError to check for errors.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
               // Usually called from post_input.aspx
                 Img img = context.UploadedFiles["my_photo"].Img;
            
                 if (!img.HasError)
                 {
                 // It's likely lasso params from the input would be used for these dimensions
                  ImgResult res = img.CropImage(300, 300, 0, 0, 500, 500);
                  if (res.HasError)
                  {
                     context.Error = "Upload Error cropping image on " + value + " error: " + res.ErrorMessage;           
                   }  
                  }
                 else
                 {
                   context.Error = "Image Error Loading on " + context.UploadedFiles["my_photo"].Path + " error: " + img.ErrorMessage;           
                 }
             
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Img.Load(CrownPeak.CMSAPI.Asset)">
            <summary>
              Loads the specified Image based on the given asset.
              It must be the path of an uploaded image.  It cannot have a template.
              If there is an attachment, you would pass the path of the attachment.
              If the image cannot be loaded, check the Img.HasError property
            </summary>
            <param name="asset">The asset.</param>
            <returns>The Img object.</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            Asset photoAsset = Asset.Load("Assets/Uploaded/Photos/myphoto.jpg");
            if (photoAsset.IsLoaded)
            {
              Img img = Img.Load(photoAsset);
              if (!img.HasError)
              {
                Out.WriteLine("<img src=\"{0}\" width=\"{1}\" height=\"{2}\" />", photoAsset.GetLink(), img.Width, img.Height);
              }
              else
              {
                Out.WriteLine("Loading image failed. Error: {0}", img.ErrorMessage);
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Img.Load(System.String)">
            <summary>
              Loads an image using the specified CMS path.
            </summary>
            <param name="path">The path: Could be an asset path or an attachment path.</param>
            <returns>The Img object.</returns>
            <example>
              <code lang="C#"> 
            <![CDATA[
            
            // Load an image from an uploaded asset (no template)
            Img img = Img.Load("/Assets/Uploaded/Photos/myphoto.jpg");
            if (!img.HasError)
            {
              Out.WriteLine("<img src=\"{0}\" width=\"{1}\" height=\"{2}\" />",photoAsset.GetLink(), img.Width, img.Height);
            }
            else
            {
              Out.WriteLine("Loading image failed. Error: {0}", img.ErrorMessage);
            }
            
            // Load an image from an attachment stored on the current asset
            Img img2 = Img.Load(asset["my_photo"]);
            if (!img2.HasError)
            {
              Out.WriteLine("<img src=\"{0}\" width=\"{1}\" height=\"{2}\" />",asset["my_photo"], img2.Width, img2.Height);
            }
            else
            {
              Out.WriteLine("Loading image2 failed. Error: {0}", img2.ErrorMessage);
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Img.Load(CrownPeak.CMSAPI.AssetPath)">
            <summary>
              Loads an image using the specified CMS assetPath.
            </summary>
            <param name="assetPath">The assetPath: Could be an assetPath to an asset path or to an attachment.</param>
            <returns>The Img object.</returns>
            <example>
              <code lang="C#"> 
            <![CDATA[
            
            // Load an image from an uploaded asset (no template)
            Asset photo = Asset.Load("/Assets/Uploaded/Photos/myphoto.jpg");
            if (photo.IsLoaded)
            {
              Img img = Img.Load(photo.AssetPath);
              if (!img.HasError)
              {
                Out.WriteLine("<img src=\"{0}\" width=\"{1}\" height=\"{2}\" />", photo.GetLink(), img.Width, img.Height);
              }
              else
              {
                Out.WriteLine("Loading image failed. Error: {0}", img.ErrorMessage);
              }
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Img.Load(CrownPeak.CMSAPI.UploadedFile)">
            <summary>
              Loads an image using an uploaded file.
            </summary>
            <param name="file">The file: a file that has been uploaded into the CMS.</param>
            <returns>The Img object.</returns>
            <example>
              <code lang="C#"> 
            <![CDATA[
            
            // Load an image from an uploaded attachment
            UploadedFile file = asset.UploadedFiles["my_photo_uploaded"];
            if (file.IsLoaded)
            {
              Img img = Img.Load(file);
              if (!img.HasError)
              {
                Out.WriteLine("<img src=\"{0}\" width=\"{1}\" height=\"{2}\" />", file, img.Width, img.Height);
              }
              else
              {
                Out.WriteLine("Loading image failed. Error: {0}", img.ErrorMessage);
              }
            }
            
            // Handling an Upload in upload.aspx
            // This property is defined in the UploadContext which is available while running upload.aspx
            UploadedFile imageUpload = context.UploadedFile;
            // Is this the file called "my_photo_thumbnail"?
            if (imageUpload.Matches("my_photo_thumbnail"))
            {
              asset.SaveUploadedFile("my_photo", imageUpload); // it gets overwritten later when it is resized to 300x300
              Img img = Img.Load(imageUpload);
              if (!img.HasError)
              {
                ImgResult res = img.CreateThumbnail("my_photo_thumbnail", 300, 300);
                if (res.HasError)
                {
                  context.Error = "Upload Error creating thumbnail on " + imageUpload + " error: " + res.ErrorMessage;
                }
              }
              else
              {
                context.Error = "Upload Error Loading on " + imageUpload + " error: " + img.ErrorMessage;
              }
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.ImgResult">
            <summary>
              Returned by some calls to encapsulate the result of the operation.
              Contains the resulting image and properties to tell whether there
              was an error and to provide an error message
            </summary>
            <example>
              <code lang="C#">
             <![CDATA[
             
                // resize the image to 50x50 and call it a thumbnail
                ImgResult res = img.CreateThumbnail("my_photo_thumbnail", 50, 50);
            
                if (!res.HasError)
                {
                  context.Error = "Upload Error creating thumbnail on " + value + " error: " + res.ErrorMessage;           
                }  
             ]]>
             </code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.ImgResult.Img">
            <summary>
              Gets or sets the img.
            </summary>
            <value>The img.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ImgResult.ErrorMessage">
            <summary>
              Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ImgResult.HasError">
            <summary>
              Gets or sets a value indicating whether this instance has error.
            </summary>
            <value><c>true</c> if this instance has error; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CrownPeak.CMSAPI.Input">
            <summary>
              A collection of methods used to create input controls.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Input.CurrentPanel">
            <summary>
              Get the PanelEntry object corresponding to the current iteration during a NextPanel loop
            </summary>
            <example>
              <code><![CDATA[
            
            while(Input.NextPanel("list_name"))
            {
              Out.WriteLine("Using CurrentPanel to get a value on current panel : " + Input.CurrentPanel["property_name"]);
              Input.ShowTextBox("Name", "folder_label"); 
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.StartTabbedPanel(System.String[])">
            <summary>
              Starts the tabbed panel.  Similar to a windows panel, a tabbed panel (unlike an expand panel) displays a list of
              tabs that when selected shows the hidden panel.
            </summary>
            <param name="titles">The titles for each tab separated by a comma.</param>
            <example>
              <code lang="C#"><![CDATA[
            Input.StartTabbedPanel("Option1", "Option2", "Option3");
            Input.ShowTextBox("Option1", "option1");
            Input.NextTabbedPanel(); 
            Input.ShowTextBox("Option2", "option2");
            Input.NextTabbedPanel(); 
            Input.ShowTextBox("Option3", "option3");
            Input.EndTabbedPanel(); ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.StartTabbedPanel(System.Collections.Generic.List{System.String})">
            <summary>
              Starts the tabbed panel.  Similar to a windows panel, a tabbed panel (unlike an expand panel) displays a list of
              tabs that when selected shows the hidden panel.
            </summary>
            <param name="titles">The titles for each tab</param>
            <example>
              <code lang="C#"><![CDATA[
            Input.StartTabbedPanel("Option1", "Option2", "Option3");
            Input.ShowTextBox("Option1", "option1");
            Input.NextTabbedPanel();
            Input.ShowTextBox("Option2", "option2");
            Input.NextTabbedPanel();
            Input.ShowTextBox("Option3", "option3");
            Input.EndTabbedPanel(); ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.NextTabbedPanel">
            <summary>
              See <see cref="M:CrownPeak.CMSAPI.Input.StartTabbedPanel(System.Collections.Generic.List{System.String})" />
            </summary>
            <example>
              <code lang="C#"><![CDATA[
            Input.StartTabbedPanel("Option1", "Option2", "Option3"); 
            Input.ShowTextBox("Option1", "option1");
            Input.NextTabbedPanel();
            Input.ShowTextBox("Option2", "option2");
            Input.NextTabbedPanel();
            Input.ShowTextBox("Option3", "option3");
            Input.EndTabbedPanel(); ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.EndTabbedPanel">
            <summary>
              See <see cref="M:CrownPeak.CMSAPI.Input.StartTabbedPanel(System.Collections.Generic.List{System.String})" />
            </summary>
            <example>
              <code lang="C#"><![CDATA[
            Input.StartTabbedPanel("Option1", "Option2", "Option3");
            Input.ShowTextBox("Option1", "option1");
            Input.NextTabbedPanel();
            Input.ShowTextBox("Option2", "option2");
            Input.NextTabbedPanel();
            Input.ShowTextBox("Option3", "option3");
            Input.EndTabbedPanel(); ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowFormSelector(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
              Creates a dropdown that will show the controls associated with the currently selected value, while hiding those that
              are not.
              All controls are rendered the first time the corresponding dropdown option is selected.
              Supports nesting, so calling ShowFormSelector within a form will work as expected.
            </summary>
            <param name="label">The label.</param>
            <param name="fieldName">The field name where the selected dropdown value will be stored.</param>
            <param name="forms">
              A dictionary representing the rows that will appear in the drop down.  The key is the display label
              and the value is the path to the form.
            </param>
            <param name="defaultValue">
              Optional: The desired default form.  Setting this field will set the dropdown to this value
              if nothing has been previously selected.
            </param>
            <param name="firstRowLabel">
              Optional: Creates a row in the dropdown menu with the given value, but does not associate
              it with a set of controls to show and hide.  Selecting this value will hide all controls on the resulting form.
            </param>
            <example>
              <code lang="C#">
            		<![CDATA[
            Dictionary<string, string> forms = new Dictionary<string, string>() {{"form one label", "path/to/form/one.aspx" }, { "form two Label", "path/to/form/two.aspx" }};
            Input.ShowFormSelector("Form Selector", "form_selector", forms, defaultValue: "path/to/form/one.aspx", firstRowLabel: "none");
            ]]>
            	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.StartDropDownContainer(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
              Creates a dropdown that will show the controls associated with the currently selected value, while hiding those that
              are not.
              All controls that fall under the StartDropDownContainer will correspond to the first item in the rows dictionary.
              Supports nesting, so calling
              StartDropDownContainer within another DropDownConntainer will work as expected.
            </summary>
            <param name="label">The label.</param>
            <param name="fieldName">The field name where the selected dropdown value will be stored.</param>
            <param name="rows">
              A dictionary representing the rows that will appear in the drop down.  The key is the display label
              and the value is the html value attribute.
            </param>
            <param name="defaultValue">
              Optional: The desired default value.  Setting this field will set the dropdown to this value
              if nothing has been previously selected.
            </param>
            <param name="firstRowLabel">
              Optional: Creates a row in the dropdown menu with the given value, but does not associate
              it with a set of controls to show and hide.  Selecting this value will hide all controls on the resulting form.
            </param>
            <example>
              <code lang="C#">
            		<![CDATA[
            Dictionary<string, string> dropDownRows = new Dictionary<string, string>() {{"internal label", "internal_link" }, { "external Label", "external_link" }};
            Input.StartDropDownContainer("Link Type", "link_type", dropDownRows, firstRowLabel: "none");
            ShowAcquireParams aParams = new ShowAcquireParams();
            aParams.ShowBrowse = true;
            Input.ShowAcquireDocument("Internal Link", "internal_link", aParams);
            Input.NextDropDownContainer();
            Input.ShowTextBox("External Link", "external_link", "", 50);
            Input.EndDropDownContainer();
            ]]>
            	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.NextDropDownContainer">
            <summary>
              Advances the DropDownContainer to the next row.  Will throw an error if called before calling StartDropDownContainer.
              Will throw an error
              if NextDropDownContainer is called more times than there items in the dictionary passed to StartDropDownContainer.
            </summary>
            <example>
              <code lang="C#">
            		<![CDATA[
            Dictionary<string, string> dropDownRows = new Dictionary<string, string>() {{"internal label", "internal_link" }, { "external Label", "external_link" }};
            Input.StartDropDownContainer("Link Type", "link_type", dropDownRows, firstRowLabel: "none");
            ShowAcquireParams aParams = new ShowAcquireParams();
            aParams.ShowBrowse = RelationshipType.Link;
            Input.ShowAcquireDocument("Internal Link", "internal_link", aParams);
            Input.NextDropDownContainer();
            Input.ShowTextBox("External Link", "external_link", "", 50);
            Input.EndDropDownContainer();
            ]]>
            	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.EndDropDownContainer">
            <summary>
              Closes the drop down container. Will throw an error if called without first calling StartDropDownContainer.
            </summary>
            <example>
              <code lang="C#">
            		<![CDATA[
            Dictionary<string, string> dropDownRows = new Dictionary<string, string>() {{"internal label", "internal_link" }, { "external Label", "external_link" }};
            Input.StartDropDownContainer("Link Type", "link_type", dropDownRows, firstRowLabel: "none");
            ShowAcquireParams aParams = new ShowAcquireParams();
            aParams.ShowBrowse = RelationshipType.Link;
            Input.ShowAcquireDocument("Internal Link", "internal_link", aParams);
            Input.NextDropDownContainer();
            Input.ShowTextBox("External Link", "external_link", "", 50);
            Input.EndDropDownContainer();
            ]]>
            	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.StartExpandPanel(System.String)">
            <summary>
              Creates an expand panel.  The expand panel presents itself as a single gray line that when clicked reveals
              the set of input controls that it wraps.  You must close the expand panel with an EndExpandPanel.
            </summary>
            <param name="label">The label.</param>
            <example>
              <code lang="C#">
            <![CDATA[
            Input.StartExpandPanel("Click To Show More Options");
            Input.ShowTextBox("Option One", "option_one", 50);
            Input.ShowTextBox("Option Two", "option_two", 50);
            Input.ShowTextBox("Option Three", "option_three", 50);
            Input.EndExpandPanel();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.EndExpandPanel">
            <summary>
              Closes the expand panel.
            </summary>
            <example>
              <code lang="C#">
            <![CDATA[
            Input.StartExpandPanel("Click To Show More Options");
            Input.ShowTextBox("Option One", "option_one", 50);
            Input.ShowTextBox("Option Two", "option_two", 50);
            Input.ShowTextBox("Option Three", "option_three", 50);
            Input.EndExpandPanel();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.StartControlPanel(System.String)">
            <summary>
              Creates an control panel.  It is used to group a set of controls. You must close the control panel with an
              EndControlPanel.
            </summary>
            <param name="label">The label.</param>
            <example>
              <code lang="C#">
            <![CDATA[
            Input.StartControlPanel("Content Group");
            Input.ShowTextBox("Option One", "option_one", "", 50);
            Input.ShowTextBox("Option Two", "option_two", "", 50);
            Input.ShowTextBox("Option Three", "option_three", "", 50);
            Input.EndControlPanel();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.EndControlPanel">
            <summary>
              Marks the end of the control panel.
            </summary>
            <example>
              <code lang="C#">
            <![CDATA[
            Input.StartControlPanel("Content Group");
            Input.ShowTextBox("Option One", "option_one", "", 50);
            Input.ShowTextBox("Option Two", "option_two", "", 50);
            Input.ShowTextBox("Option Three", "option_three", "", 50);
            Input.EndControlPanel();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowSelectFolder(System.String,System.String,CrownPeak.CMSAPI.AssetPath,System.String,System.String)">
            <summary>
              Displays a "select" and "clear" button that is used to select a folder.
            </summary>
            <param name="label">The label.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="defaultFolder">The default folder.</param>
            <param name="helpMessage">Optional: The help message.</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code lang="C#">
            <![CDATA[[
                 <% Input.ShowSelectFolder("Folder", "selected_folder", asset.Parent.AssetPath); %>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowSelectFolder(System.String,System.String,System.String,System.String,System.String)">
            <summary>
              Displays a "select" and "clear" button that is used to select a folder.
              Note: Before build 2481, there is a default value for the third argument of the overloaded version of this method.
              So until build 2481 and higher
              is available, you will need to pass a third argument to this function.
            </summary>
            <param name="label">The label.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="defaultFolder">Optional: If none is specified, it will default to the root folder.</param>
            <param name="helpMessage">Optional: The help message.</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code lang="C#">
            <![CDATA[[
                 <% Input.ShowSelectFolder("Folder", "selected_folder"); %>
                 <% Input.ShowSelectFolder("Folder", "selected_folder2", "/Assets/Images"); %>
                 <% Input.ShowSelectFolder("Folder with Help", "selected_folder3", helpMessage: "Help Message"); %>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowAcquireDocument(System.String,System.String,System.String,System.String)">
            <summary>
              Displays a "select" and "clear" button that is used to upload a document into the current template.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the uploaded filename will be stored.</param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code>
             <![CDATA[
                <% Input.ShowAcquireDocument(Attachment, "attach"); %>
              ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowAcquireDocument(System.String,System.String,CrownPeak.CMSAPI.ShowAcquireParams,System.String,System.String)">
            <summary>
              Displays a "select" and "clear" button that is used to upload a document into the current template.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the uploaded filename will be stored.</param>
            <param name="acquireParams">Customization parameters. <see cref="T:CrownPeak.CMSAPI.ShowAcquireParams" /></param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code><![CDATA[
                            <% 
                                ShowAcquireParams parameters = new ShowAcquireParams();  
                                parameters.DefaultFolder ="/Assets";
                                parameters.Extensions = Util.MakeList("doc", "pdf", "xls");
                                Input.ShowAcquireDocument("Attachment", "attach", parameters) ;
                             %>
            ]]>
            	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowAcquireImage(System.String,System.String,System.String,System.String)">
            <summary>
              Displays a "select" and "clear" button that is used to upload an image into the current template.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the uploaded filename will be stored.</param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code><![CDATA[
            <% 
            
            
             Input.ShowAcquireImage("Attachment", "attach", "This is the help message." );
             
            
            %>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowAcquireImage(System.String,System.String,CrownPeak.CMSAPI.ShowAcquireParams,System.String,System.String,System.String)">
            <summary>
              Displays a "select" and "clear" button that is used to upload an image into the current template.
              Note: You no longer need to use an upload.aspx, if you want to create a thumbnail.  Use
              the AddAdditionalImage method on the ShowAcquireParams object to define the thumbnails that you want to create.
              See the examples below.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the uploaded filename will be stored.</param>
            <param name="acquireParams">
              Customization parameters. <see cref="T:CrownPeak.CMSAPI.ShowAcquireParams" />
              An empty "Extensions" parameter will default to: "png gif jpeg jpg"
            </param>
            <param name="helpMessage">Optional: help message</param>
            <param name="displaySizeName">
              Optional: If you are passing a list of thumbnails to create in the ShowAcquireParams, use it to specify which
              one to display.
            </param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code><![CDATA[
             	               
                             <%  
                                 // Upload or select an image and create images of the specified sizes.  
                                 // The 300 size will be displayed on the input form
                                 ShowAcquireParams parameters = new ShowAcquireParams();  
                                 parameters.DefaultFolder ="/Assets/images";
                                 // Create a thumbnail that is no more than 300 pixels on each side (aspect ratio is preserved)
                                 parameters.AddAdditionalImage("my_photo_300", 300, 300);
                                 // Create a thumbnail that is no more than 100 pixels on each side (aspect ratio is preserved)
                                 parameters.AddAdditionalImage("my_photo_100", 100, 100, 100);    
                                 // The 300 pixel thumbnail will be displayed when they edit this input form.
                                 Input.ShowAcquireImage("Attachment", "attach", parameters, displaySizeName: "my_photo_300") ;
                              %>
                              <% 
                                 // Upload only
                                 // The 300 size will be displayed on the input form
                                 ShowAcquireParams parameters = new ShowAcquireParams();  
                                 parameters.DefaultFolder ="/Assets/images";
                                 parameters.ShowBrowse = false; // CMS browser is hidden
                                 parameters.AddAdditionalImage("my_photo_300", 300, 300);
                                 parameters.AddAdditionalImage("my_photo_100", 100, 100, 100);    
                                 Input.ShowAcquireImage("Attachment", "attach", parameters, displaySizeName: "my_photo_300") ;
                              %>
            
                ]]>
             	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowWysiwyg(System.String,System.String,CrownPeak.CMSAPI.WysiwygParams,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
              Shows the WYSIWYG control.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the value will be stored.</param>
            <param name="wysiwygParams">Used to customize what buttons and features appear.</param>
            <param name="defaultValue">Optional: The default value.</param>
            <param name="width">Optional: The width of the control in pixels. Defaults to 500.</param>
            <param name="height">Optional: The height of the control in pixels. Defaults to 400.</param>
            <param name="bodybackground">Optional: Background color, in web color format '#ffffff'.</param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <see cref="T:CrownPeak.CMSAPI.WysiwygParams" />
            <example>
              <code lang="C#"><![CDATA[
            WysiwygParams wParams = new WysiwygParams();
            wParams.Stylesheet = "/Assets/css/stylesheet.css";
            wParams.HtmlPasteOptions = Util.MakeList("cleanOption", "mergeInlineStylesOption", "plainTextOption");
            wParams.ImageFolder = "/";
            wParams.ImageUpload = RelationshipType.Attach;
            wParams.ImageBrowse = RelationshipType.Link;
            wParams.LinkFolder = "/";
            wParams.LinkUpload = RelationshipType.Attach;
            wParams.LinkBrowse = RelationshipType.Link;
            wParams.DesignEditTabs = true;
            wParams.AddButton(FeatureType.Separator);
            wParams.AddCutPasteGroup();
            wParams.AddLinkGroup();
            wParams.AddSimpleStyleGroup();
            wParams.AddJustifyGroup();
            wParams.AddListGroup( FeatureType.None );  //none is used to prevent separator from appearing after group
            wParams.AddButton(FeatureType.upload);
            wParams.AddButton(FeatureType.bold);
            wParams.AddButton(FeatureType.copy);
            wParams.AddColorGroup(FeatureType.None);
            Input.ShowWysiwyg("Main Section", "main_section", wParams, "", 600, 300, "#ffffff");
            ]]>
            	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowCheckBox(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Boolean)">
            <summary>
              Adds a checkbox control to the input screen.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the value will be stored.</param>
            <param name="storedValue">The value which gets stored when the checkbox is clicked.</param>
            <param name="checkBoxLabel">Describing the checkbox function. (will display right of checkbox)</param>
            <param name="helpMessage">Optional: help message</param>
            <param name="unCheckedValue">Optional: The value which gets stored when the checkbox is not clicked.</param>
            <param name="defaultChecked">
              Optional: The default state of the checkbox. True is checked, false is unchecked, null is
              not set (not applicable in Classic). Defaults to null. This may be false only if unCheckedValue is also specified.
            </param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <param name="requiredField">Optional: Mark the field required. Defaults to false</param>
            <example>
              <code><![CDATA[<% Input.ShowCheckBox("Feature This?", "feature_this", "yes", "yes"); %>]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowRadioButton(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.Boolean)">
            <summary>
              Adds a group of radio buttons to the input screen.  If the Optional:   defaultValue, is provided the radio button
              will
              be initialized to the to the defaultValue.  Using the Optional:   helpMessage, will render help text.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldname">The field name where the value will be stored.</param>
            <param name="radioButtons">
              A Dictionary that represents the radio buttons to display.  The Key is the displayed on the
              input form, and the Value is what will be stored when selected
            </param>
            <param name="defaultValue">
              Optional: The default value.  The value provided will be what the radio button is
              initialized to.  Leave this field blank to leave the radio buttons uninitialized
            </param>
            <param name="helpMessage">Optional: The help message. Displays a help message.</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <param name="requiredField">Optional: Mark the field required. Defaults to false</param>
            <example>
              Setting up a Radio Button which will default to NV if nothing has been selected.
              <code lang="C#">
             <![CDATA[
             Dictionary<string, string> buttons = new Dictionary<string, string>();
             
             buttons.Add("California", "CA");
             buttons.Add("Nevada", "NV");
             buttons.Add("Mississippi", "MI");
            
             
             Input.ShowRadioButton("State", "myState", buttons, "NV", "Choose a state from the list");     
             ]]>
             </code>
              Setting up a Radio Button which will default nothing if nothing has been selected.
              <code lang="C#">
             <![CDATA[
             Dictionary<string, string> buttons = new Dictionary<string, string>();
             
             buttons.Add("California", "CA");
             buttons.Add("Nevada", "NV");
             buttons.Add("Mississippi", "MI");
            
             Input.ShowRadioButton("State", "myState", buttons, helpMessage: "Choose a state from the list"); 
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowTextBox(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
              Adds a textbox control to the input screen.  If the Optional:   height, is set to a value greater than 0,
              ShowTextBox will render a multiline textarea.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the value will be stored.</param>
            <param name="defaultValue">Optional: the default value.</param>
            <param name="width">The # of characters defining the width of the TextBox.</param>
            <param name="height">Setting this field to a value greater than 0 will render a multiline textarea.</param>
            <param name="maxLength">Optional: adds the maxlength attibute. This will only appear for textboxes </param>
            <param name="helpMessage">Optional: help message</param>
            <param name="readOnly">Optional: Make the text box read only. Defaults to false</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <param name="requiredField">Optional: Mark the field required. Defaults to false</param>
            <example>
              <code lang="C#">
            		<![CDATA[
            // Standard Textbox
            Input.ShowTextBox("Title", "title");
            // Standard Texbox with Help (optional parameter)
            Input.ShowTextBox("Short Title", "short_title", helpMessage: "(A short title for your content used in linking and other space-constrained instances.)");
            // Multiline Textbox
            Input.ShowTextBox("Description", "description", "", 50, 10, helpMessage: "Enter a description");
            ]]>
            	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowPassword(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Adds a password textbox control to the input screen.  This features is provided as a convenience for developers.
              CrownPeak will not be responsible for the security of this password.  Template developers will be responsible for
              handling the security of passwords submitted
              with this type of text box. Passwords can be handled in the post input template.  They can be encrypted before
              storing or used and cleared depending on the usage.  If they are not handled in the
              post_input, they will be stored in clear text in the asset content properties.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the value will be stored.</param>
            <param name="width">The # of characters defining the width of the TextBox.</param>
            <param name="minLength">Optional: adds the minlength attibute. Default is 8.</param>
            <param name="maxLength">Optional: adds the maxlength attibute.</param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code lang="C#">
             		<![CDATA[
             // Standard Password Box.  A width of 25 is a good size to allow both the pw box and the confirm box to show on one line.
             Input.ShowPassword("Password","mypassword", 25, 8, 15);
             
             // List of panels
             while(Input.NextPanel("namelist"))
            {
               Input.ShowTextBox("Username","username","", 25, -1,  15);
               Input.ShowPassword("Password","mypassword", 25, 8, 15,"help","popup");
            }
            
             //post_input: encrypt and clear.
             
             List<PanelEntry> panels = context.InputForm.GetPanels("namelist");
             foreach (PanelEntry entry in panels)
             {
                entry["mypassword_enc"] = "ENCRYPTED_VALUE";//TODO: Use your own encryption method here.
                entry["mypassword"] = "";
              }
             ]]>
             	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowHeader(System.String,System.String,System.String,System.Boolean)">
            <summary>
              Adds a section header to the input screen.  Useful for highlighting groups of controls.
            </summary>
            <param name="message">The label text to display.</param>
            <param name="backgroundColor">Optional: Background color for header.</param>
            <param name="foregroundColor">Optional: Text color for header.</param>
            <param name="hideIcon">Optional: setting this to true will hide the white arrow icon. Defaults to false.</param>
            <example>
              <code lang="C#">
            Input.ShowHeader("Related Content Listing");
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowMessage(System.String,System.String,System.String)">
            <summary>
              Adds a section message to the input screen.  Useful for adding a message to groups of controls.
              Uses a default message type -- MessageType.Basic.
              As of build 2669, foregroundColor and backgroundColor will now be ignored.
            </summary>
            <param name="message">The message text to display.</param>
            <param name="backgroundColor">Obsolete: Use <see cref="M:CrownPeak.CMSAPI.Input.ShowMessage(System.String,CrownPeak.CMSAPI.MessageType)" /> instead.</param>
            <param name="foregroundColor">Obsolete: Use <see cref="M:CrownPeak.CMSAPI.Input.ShowMessage(System.String,CrownPeak.CMSAPI.MessageType)" /> instead.</param>
            <example>
              <code lang="C#">
            Input.ShowMessage("Page Information is used on this and other places where pages are listed by title or sorted by date.");
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowMessage(System.String,CrownPeak.CMSAPI.MessageType)">
            <summary>
              Adds a section message to the input screen.  Useful for adding a message to groups of controls.
            </summary>
            <param name="message">The message text to display.</param>
            <param name="messageType">The type/severity level of the message.  This determines the background color of the message.</param>
            <example>
              <code lang="C#">
            Input.ShowMessage("Page Information is used on this and other places where pages are listed by title or sorted by date.", MessageType.Warning);
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowSelectDate(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
              Shows a date selector control. Dates are stored in the format "MM/dd/yyyy".
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the value will be stored.</param>
            <param name="multiple">Optional:   defaults to false. Select multiple, comma-separated dates.</param>
            <param name="range">Optional:   defaults to false. Select a range of dates.</param>
            <param name="size">Optional:   defaults to 13. Width of the field.</param>
            <param name="helpMessage">Optional: help message</param>
            <param name="readOnly">Optional: Make the text box read only. Defaults to false</param>
            <param name="popupMessage">Optional: The popup help message.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowSelectDateTime(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
              Shows a date and time selector control. Dates and times are stored in the format "MM/dd/yyy HH:mm:ss" (24-hour time).
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the value will be stored.</param>
            <param name="convertToUTC">
              Optional:   defaults to false. If true, converts from user time to UTC on save (and converts
              from UTC on re-edit) for parity with VB's showSelectGMT.
            </param>
            <param name="use24Hour">
              Optional:   defaults to false. If true, the hour dropdown is 00-23 instead of 01-12 and an
              am/pm dropdown.
            </param>
            <param name="readOnly">Optional:   defaults to false. Make the text box read only.</param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code lang="C#">
             <![CDATA[
            
                 // A basic date/time control
                 Input.ShowSelectDateTime("Date/Time", "datetime");
            
             </code>
             <code lang="C#">
             <![CDATA[
            
                 // Parsing a datetime in output.aspx
                 DateTime datetime;
                 if (DateTime.TryParseExact(asset["datetime"], "MM/dd/yyy HH:mm:ss", out datetime))
                 {
                   bool isPM = datetime.Hour >= 12;
                 }
            
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowDragDrop(System.String,System.String,CrownPeak.CMSAPI.DragParams,System.String,System.String)">
            <summary>
              Shows a container for drag and drop components (V3 only).
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name prefix for stored values.</param>
            <param name="dragParams">Optional: customization parameters.</param>
            <param name="helpMessage">Optional: help message.</param>
            <param name="popupMessage">Optional: The popup help message.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowDropDown(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Int32,System.Boolean,System.String,System.String)">
            <summary>
              Shows a drop down menu selector control.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the value will be stored.</param>
            <param name="textList">
              The text list. A comma-separated list of strings to display in the drop down.  Use the other
              version if a comma is in the list.
            </param>
            <param name="valueList">
              The value list. A comma-separated list of strings to store when values are selected from drop
              down.  Use the other version if a comma is in the list.
            </param>
            <param name="defaultValue">
              Optional:   defaults to null. The list of default values that will appear selected when
              nothing has been selected. The size of this list can only be greater than 1 if and only if the optional parameter
              multiple is set to true.
            </param>
            <param name="size">Optional:   defaults to 1. This optional parameter sets the size parameter of the select tag.</param>
            <param name="multiple">
              Optional:   defaults to false. Setting this optional parameter to true will allow multiple
              selections from the drop down menu.
            </param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code lang="C#">
            		<![CDATA[
            		
                // The users will see Zero, One, and Two, but 0,1,2 will be stored as the value
                Input.ShowDropDown("Nested Drop Down", "nested_drop", "Zero,One,Two", "0,1,2");
                
            ]]>
            </code>
              <code lang="C#">
            <![CDATA[
            
                //The users will see English, French, Japanese, and Korean, but en, fr, jp, kr as the value
                Input.ShowDropDown("Language Settings", "language_setting", "English,French,Japanese,Korean", "en,fr,jp,kr",  Util.MakeList("en"), 4, true);    
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowDropDown(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Int32,System.Boolean,System.String,System.String)">
            <summary>
              Shows a drop down menu selector control.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the value will be stored.</param>
            <param name="entries">
              A list of key/value pairs that define the entries in the list. Key is the text that is displayed,
              value gets stored.
            </param>
            <param name="defaultValue">
              Optional:   defaults to null. The list of default values that will appear selected when
              nothing has been selected. The size of this list can only be greater than 1 if and only if the optional parameter
              multiple is set to true.
            </param>
            <param name="size">Optional:   defaults to 1. This optional parameter sets the size parameter of the select tag.</param>
            <param name="multiple">
              Optional:   defaults to false. Setting this optional parameter to true will allow multiple
              selections from the drop down menu.
            </param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code lang="C#">
            		<![CDATA[
            		
                // The users will see Zero, One, and Two, but 0,1,2 will be stored as the value
                Dictionary<string,string> entries = new Dictionary<string, string>(){{"Zero","0"},{"One","1"},{"Two","2"}};
                Input.ShowDropDown("Nested Drop Down", "nested_drop", entries);
                
            ]]>
            </code>
              <code lang="C#">
            <![CDATA[
            
               //The users will see English, French, Japanese, and Korean, but en, fr, jp, kr as the value
               Dictionary<string, string> languages = new Dictionary<string, string>() { { "English", "en" }, { "French", "fr" }, { "Japanese", "jp" }, { "Korean", "kr" } };
               Input.ShowDropDown("Language Settings", "language_setting", languages, Util.MakeList("en", "jp"), languages.count, true);
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowSelectColor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
              Shows a color selector control.
            </summary>
            <param name="label">The name.</param>
            <param name="fieldname">The fieldname.</param>
            <param name="defaultColor">Optional: Default color (defaults to CCCCCC)</param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code lang="C#">
            		<![CDATA[<% Input.ShowSelectColor("My Color", "my_color"); %>]]>
            	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowSelectList(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Int32,CrownPeak.CMSAPI.SelectListSort,System.String,System.String)">
            <summary>
              Shows a list selector control, which allows the user to select values from a dictionary.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="listName">The name of the list where the fields will be stored.</param>
            <param name="entries">
              A list of key/value pairs that define the entries in the source list. Key is the text that is
              displayed, value gets stored.
            </param>
            <param name="defaultValue">
              Optional: defaults to null. The list of default values that will appear in the destination
              list when nothing has been selected.
            </param>
            <param name="size">
              Optional: defaults to -1. The number of rows displayed in the selector list. If not positive, uses
              default value.
            </param>
            <param name="sort">
              Optional: defaults to <see cref="F:CrownPeak.CMSAPI.SelectListSort.Both" />. Specifies which of the two lists are
              automatically sorted.
            </param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <para>Dictionary hard-coded (with second item selected by default):</para>
              <code lang="C#">
                <![CDATA[
                var entries = new Dictionary<string,string>();
                entries.Add("Item A", "A");
                entries.Add("Item B", "B");
                var defaults = new List<string>() { "B" };
                Input.ShowSelectList("Select List", "selected_item", entries, defaults);
                ]]>
              </code>
            </example>
            <example>
              <para>Dictionary stored in the asset:</para>
              <code lang="C#">
                <![CDATA[
                var panels = asset.GetPanels("item_value");
                var entries = panels.ToDictionary(panel => panel["item_label"], panel => panel["item_value"]);
                Input.ShowSelectList("Select List", "selected_item", entries);
                ]]>
              </code>
            </example>
            <example>
              <para>Dictionary generated from a list of assets (with only one asset per branch):</para>
              <code lang="C#">
                <![CDATA[
                var files = asset.Parent.GetFileList();
                var branchLabels = new Dictionary<int,string>();
                foreach (Asset file in files)
                {
                  // Keep the last encountered branch's label
                  branchLabels[file.BranchId] = file.Label;
                }
                // Convert the dictionary to the "key = Label, value = BranchId" format
                var entries = branchLabels.ToDictionary(kvp => kvp.Value, kvp => kvp.Key.ToString());
                Input.ShowSelectList("Select List", "selected_item", entries);
                ]]>
              </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.NextPanel(System.String,CrownPeak.CMSAPI.ListPanelType,System.Nullable{System.Int32},System.Nullable{System.Int32},CrownPeak.CMSAPI.SortOrder,System.String,System.Boolean)">
            <summary>
              Gets the next available panel from the named list.
              Always returns at least one entry.
              Uses data already stored in the asset.
            </summary>
            <param name="name">
              Name of the list of panels. Must not be the same as any other list names or field names unless
              isAutoIndexed is false.
            </param>
            <param name="type">Type of list to display. Default is ListPanelType.Regular</param>
            <param name="min">Optional: Minimum number of panels (but always at least one). Default is null</param>
            <param name="max">Optional: Maximum number of panels. Default is null</param>
            <param name="sort">
              Optional: Sort order used for the sorted list type. Must be specified if and only if the type is
              ListPanelType.Sorted
            </param>
            <param name="displayName">Optional: Name to display for the list panel. Not applicable in Classic. Default is null</param>
            <param name="isAutoIndexed">
              Optional: Whether the panel handles the list index field automatically. In most cases this
              should be true, unless another field in the list has the same name as the list. Default is true
            </param>
            <returns>Whether there is an available panel.</returns>
            <example>
              <code lang="C#"><![CDATA[
             while(Input.NextPanel("my_panel_name"))
             {
               Input.ShowTextBox("Field", "field_name"); 
               //Get the value of a field on the panel called "foo"
               string valueOfFieldFoo = Input.CurrentPanel["foo"];
             }
            ]]>
            </code>
              <code lang="C#"><![CDATA[
             SortOrder order = SortOrder.OrderBy("title");
             while(Input.NextPanel("title_counter", ListPanelType.Sorted, sort: order))
             {
               Input.ShowTextBox("Title", "title"); 
               //Get the value of a field on the panel called "foo"
               string valueOfFieldFoo = Input.CurrentPanel["foo"];
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.NextPanel(System.Collections.Generic.List{CrownPeak.CMSAPI.AssetPanelEntry},CrownPeak.CMSAPI.ListPanelType,System.Nullable{System.Int32},System.Nullable{System.Int32},CrownPeak.CMSAPI.SortOrder,System.String,System.Boolean)">
            <summary>
              Gets the next available panel from the supplied list.
              Use in the input to loop over a List of AssetPanelEntries which are returned by asset.GetPanelsFromFolder() or
              panel.GetPanelsFromFolder().
            </summary>
            <param name="list">The list of AssetPanelEntries to use.</param>
            <param name="type">Optional: Type of list to display. Default is ListPanelType.Regular</param>
            <param name="min">Optional: Minimum number of panels (but always at least one). Default is null</param>
            <param name="max">Optional: Maximum number of panels. Default is null</param>
            <param name="sort">
              Optional: Sort order used for the sorted list type. Must be specified if and only if the type is
              ListPanelType.Sorted
            </param>
            <param name="displayName">Optional: Name to display for the list panel. Not applicable in Classic. Default is null</param>
            <param name="isAutoIndexed">
              Optional: Whether the panel handles the list index field automatically. In most cases this
              should be true, unless another field in the list has the same name as the list. Default is true
            </param>
            <returns>Whether there is an available panel.</returns>
            <example>
              <code lang="c#"><![CDATA[
            
              List<AssetPanelEntry> panels = asset.Parent.GetPanelsFromFolder( "folder_list", "folder_label","folder_id");
             
              while(Input.NextPanel(panels))
              {
                Input.ShowTextBox("Name", "folder_label"); 
                Input.ShowTextBox("Property From Current Panel", "property_name"); 
              }
            
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.NextPanel(System.Collections.Generic.List{CrownPeak.CMSAPI.AssetPanelEntry},CrownPeak.CMSAPI.AssetPanelEntry@,CrownPeak.CMSAPI.ListPanelType,System.Nullable{System.Int32},System.Nullable{System.Int32},CrownPeak.CMSAPI.SortOrder,System.String,System.Boolean)">
            <summary>
              Gets the next available panel from the supplied list.
              Use in the input to loop over a List of AssetPanelEntries which are returned by asset.GetPanelsFromFolder() or
              panel.GetPanelsFromFolder().
              This overload returns an outbound current panel that can be used to get the asset that corresponds with the current
              list item.
            </summary>
            <param name="list">The list of AssetPanelEntries to use.</param>
            <param name="currentPanel">
              The outbound current panel that can be used to get the asset that corresponds with the
              current list item.
            </param>
            <param name="type">Optional: Type of list to display. Default is ListPanelType.Regular</param>
            <param name="min">Optional: Minimum number of panels (but always at least one). Default is null</param>
            <param name="max">Optional: Maximum number of panels. Default is null</param>
            <param name="sort">
              Optional: Sort order used for the sorted list type. Must be specified if and only if the type is
              ListPanelType.Sorted
            </param>
            <param name="displayName">Optional: Name to display for the list panel. Not applicable in Classic. Default is null</param>
            <param name="isAutoIndexed">
              Optional: Whether the panel handles the list index field automatically. In most cases this
              should be true, unless another field in the list has the same name as the list. Default is true
            </param>
            <returns>Whether there is an available panel.</returns>
            <example>
              input.aspx example
              <code lang="c#"><![CDATA[    
             List<AssetPanelEntry> panelEntries = asset.GetPanelsFromFolder("press_releases", type: AssetType.File);
             AssetPanelEntry currentPanel;
             while (Input.NextPanel(panelEntries, out currentPanel))
             {
               Input.AddHiddenField("folder_id", currentPanel.ChildAsset.Id);
               Input.ShowTextBox("Article Display Title", "article_display_title", "", 50);
               Input.ShowTextBox("Short Description", "article_short_description", "", 50, 5);
             }    
            ]]>
            </code>
              output.aspx example
              <code lang="c#">
            <![CDATA[
             List<AssetPanelEntry> panelEntries = asset.GetPanelsFromFolder("press_releases", type: AssetType.File);
             foreach (AssetPanelEntry entry in panelEntries)
             {
               Out.WriteLine("<h1><a href=\"{0}\">{1}</a></h1><br />", entry.ChildAsset.GetLink(), entry["article_display_title"]);
               Out.WriteLine("<p>{0}</p>", entry["article_short_description"]);
             }    
             ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.AddHiddenField(System.String,System.String)">
            <summary>
              Add a hidden input field to the form with the given name and string value
            </summary>
            <param name="name">name of the hidden field</param>
            <param name="value">string used to initialize the hidden field</param>
            <example>
              <code lang="C#">
            <![CDATA[
            Input.AddHiddenField("field", "string");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.AddHiddenField(System.String,System.Int32)">
            <summary>
              Add a hidden input field to the form with the given name and int value
            </summary>
            <param name="name">name of the hidden field</param>
            <param name="value">int used to initialize the hidden field</param>
            <example>
              <code lang="C#">
            <![CDATA[
            Input.AddHiddenField("field", 7);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.AddHiddenField(System.String,CrownPeak.CMSAPI.AssetType)">
            <summary>
              Add a hidden input field to the form with the given name and assettype, produces "File" or "Folder"
            </summary>
            <param name="name">name of the hidden field</param>
            <param name="value">AssetType used to initialize the hidden field</param>
            <example>
              <code lang="C#">
            <![CDATA[
            Input.AddHiddenField("field", AssetType.File);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowWcoControls(System.String)">
            <summary>
              Adds Wco controls that will bind a field on the asset with a WCO Snippet.
              Should be paired with an editable text fields of the same name, like a TextBox or Wysiwyg
            </summary>
            <param name="fieldName">The name of the field that will be bound to the Wco snippet</param>
            <example>
              <code lang="C#"><![CDATA[
            
             // This will provide a control that will allow you to bind a WCO snippet to a text field called "fieldTextBox"
             Input.ShowWcoControls("fieldTextBox");
             Input.ShowTextBox("Field", "fieldTextBox");
             
             // This will provide a control that will allow you to bind a WCO snippet to a wysiwyg field called "fieldWyswiwyg"
             Input.ShowWcoControls("fieldWyswiwyg");
             WysiwygParams wParams = new WysiwygParams();
             wParams.Stylesheet = "/Assets/css/stylesheet.css";
             wParams.HtmlPasteOptions = Util.MakeList("cleanOption", "mergeInlineStylesOption", "plainTextOption");
             wParams.ImageFolder = "/";
             wParams.ImageUpload = RelationshipType.Attach;
             wParams.ImageBrowse = RelationshipType.Link;
             wParams.LinkFolder = "/";
             wParams.LinkUpload = RelationshipType.Attach; 
             wParams.LinkBrowse = RelationshipType.Link; 
             wParams.DesignEditTabs = true;
             Input.ShowWysiwyg("Field", "fieldWyswiwyg", wParams, "", 500, 450);
            
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowLink(System.Int32,System.String,CrownPeak.CMSAPI.InputLinkType,System.String)">
            <summary>
              Creates a link to another asset from the input form.
            </summary>
            <param name="assetId">ID of the asset to link</param>
            <param name="linkText">Text to display for the link</param>
            <param name="linkType">Optional (defaults to <see cref="F:CrownPeak.CMSAPI.InputLinkType.Preview" />): the type of link</param>
            <param name="fieldName">
              Optional (defaults to null): the name of the field to link for
              <see cref="F:CrownPeak.CMSAPI.InputLinkType.Edit" /> and <see cref="F:CrownPeak.CMSAPI.InputLinkType.EditTab" />
            </param>
            <remarks>This method is not implemented in the Classic interface.</remarks>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowLink(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.InputLinkType,System.String)">
            <summary>
              Creates a link to another asset from the input form
            </summary>
            <param name="asset">The asset to link</param>
            <param name="linkText">Optional (defaults to asset's label): Text to display for the link</param>
            <param name="linkType">Optional (defaults to <see cref="F:CrownPeak.CMSAPI.InputLinkType.Preview" />): the type of link</param>
            <param name="fieldName">
              Optional (defaults to null): the name of the field to link for
              <see cref="F:CrownPeak.CMSAPI.InputLinkType.Edit" /> and <see cref="F:CrownPeak.CMSAPI.InputLinkType.EditTab" />
            </param>
            <remarks>This method is not implemented in the Classic interface.</remarks>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.StartHorizontalWrapContainer">
            <summary>
              Creates a container that arranges the contained controls horizontally.
              If the controls can't fit in one row, they wrap to a new row below the first.
            </summary>
            <remarks>This method is not implemented in the Classic interface.</remarks>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.EndHorizontalWrapContainer">
            <summary>
              See <see cref="M:CrownPeak.CMSAPI.Input.StartHorizontalWrapContainer" />
            </summary>
            <remarks>This method is not implemented in the Classic interface.</remarks>
        </member>
        <member name="M:CrownPeak.CMSAPI.Input.ShowAutoCompleteBox(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.String,System.String)">
            <summary>
              Adds an autocompletebox control to the input screen.
            </summary>
            <param name="label">The label of the field when displayed.</param>
            <param name="fieldName">The field name where the value will be stored.</param>
            <param name="values">A dictionary.  displays keys, but values are actually saved on submission</param>
            <param name="width">Optional: approximate width in characters. </param>
            <param name="helpMessage">Optional: help message</param>
            <param name="popupMessage">Optional: The popup help message.</param>
            <example>
              <code lang="C#">
            		<![CDATA[
            		Input.ShowAutoCompleteBox("Label","field",new Dictionary<string, string>(){{"akey","value1"},{"bkey","value2"},{"ckey","value3"}});
            ]]>
            	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.IUser.Load(System.String)">
            <summary>
              Returns a new user object populated with the user specified by username.
              Returns null, if not found
            </summary>
            <param name="userName">The user name to search for.</param>
            <returns>Returns the User object specified by username.</returns>
            <example>
              <code lang="C#">
            User theUser = User.Load("usersname");
            if (theUser != null)
              Out.WriteLine("Hi " + theUser.Firstname);
            
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.IUser.Load(System.Int32)">
            <summary>
              Returns a new user object populated with the user specified by userId.
              Returns null, if not found
            </summary>
            <param name="userId">The user id to lookup.</param>
            <returns>Returns the User object specified by userId.</returns>
            <example>
              <code lang="C#">
            User theUser = User.Load(asset.PublishUserId);
            if (theUser != null)
              Out.WriteLine("Hi " + theUser.Firstname);
            
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.IUser.LoadUsers(System.Collections.Generic.List{System.Int32})">
            <summary>
              Use this to load a list of Users by a list of ids.
            </summary>
            <param name="userIds">A List of Ids.</param>
            <returns>List of Users</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            List<int> userIds = ....
            List<User> users = User.LoadUsers(userIds);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.IUser.GetUsers">
            <summary>
              Get a list of all users
            </summary>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.IUser.GetUsersByGroupName(System.String)">
            <summary>
              Gets a List of users that are members of the group specified in the name.
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns>List of users.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.IUser.IsUserActive(CrownPeak.CMSAPI.User)">
            <summary>
              Returns true if user is active.  
            </summary>
            <param name="user">User to test.</param>
            <returns>True if active</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.IUser.IsUserActiveEmail(CrownPeak.CMSAPI.User)">
            <summary>
              Returns true if user is active and has an email  
            </summary>
            <param name="user">User to test.</param>
            <returns>True if active with an email</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.Out">
            <summary>
              The Out object provides the CMS templates with a variety of output functions.
              Many provide a means to manipulate text for the template text response, wrapping and debugging
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Out.NewLine">
            <summary>
              The new line character(s) the CMS will use when rendering assets.
            </summary>
            <value>The line ending string.</value>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.Write(System.String)">
            <summary>
              Writes the specified text to the output.
            </summary>
            <param name="text">The string to write.</param>
            <example>
              <code><![CDATA[Out.Write("<span>");]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.Write(System.Boolean)">
            <summary>
              Writes the specified boolean to the output.
            </summary>
            <param name="value">The value to write.</param>
            <example>
              <code><![CDATA[Out.Write(context.IsNew);]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.Write(System.Object)">
            <summary>
              Writes the specified boolean to the output.
            </summary>
            <param name="value">The value to write.</param>
            <example>
              <code lang="c#"><![CDATA[Out.Write(context.IsNew);]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.WriteLine(System.String)">
            <summary>
              Writes the line to the output.
            </summary>
            <param name="line">The line.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            Out.WriteLine("<html>");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.Write(System.String,System.Object[])">
            <summary>
              Appends the string to the output with the given format string.
            </summary>
            <param name="formattedString">The format string, user {0} for 1st parameter, {1} for 2nd parameter and so on.</param>
            <param name="args">The list of arguments for the format string.</param>
            <example>
              <code lang="C#">
            <![CDATA[
            Out.Write("<a href=\"{0}\">some link</a>", tmpAsset.GetLink());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.WriteLine(System.String,System.Object[])">
            <summary>
              Writes a new line to the output with the given format string.
            </summary>
            <param name="formattedString">The format string.</param>
            <param name="args">The list of arguments for the format string.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            Out.Write("<a href=\"{0}\">some link</a>", tmpAsset.GetLink());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.DebugWriteLine(System.String)">
            <summary>
              Writes the text to the debug console
            </summary>
            <param name="text">The text to write</param>
            <example>
              <code lang="C#"><![CDATA[
            
            <%  // A debug statement somewhere in a template  %>
            <%  Out.DebugWrite("debug message");  %>
            
            
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.ShowDragDrop(System.String)">
            <summary>
              Creates a drag and drop zone in the template at the position specified
            </summary>
            <param name="zoneName">The name of the zone being created</param>
            <example>
              <code lang="C#"><![CDATA[
            
            <%  Out.ShowDragDrop("header");  %>
            
            ]]></code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CrownPeak.CMSAPI.Out.DebugWriteLine(System.String,System.Object[])" -->
        <member name="M:CrownPeak.CMSAPI.Out.Wrap(System.String,System.String)">
            <summary>
              Passes the output of this render to another asset for further rendering.
              This is marked obsolete, but might still be appropriate in environments where
              a VBScript wrapper is wrapping a C# template.
            </summary>
            <param name="assetPath">The asset to render next</param>
            <param name="token">The name of the name of the content field being passed on to the asset for further rendering</param>
            <example>
              In the calling template:
              <code>Out.Wrap("/System/Templates/Nav Wrap", "page_body" );</code>
              In the called template:
              <code><![CDATA[<%= Out.Wrap["page_body"] %>]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.Wrap(System.String)">
            <summary>
              Passes the output of this render to another asset for further rendering
            </summary>
            <param name="assetPath">The asset to render next</param>
            <example>
              In the calling template:
              <code><![CDATA[<% Out.Wrap("/System/Templates/Nav Wrap" );%>]]></code>
              In the called template:
              <code><![CDATA[<%= Out.GetWrapContentPlaceholder() %>]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.GetWrapContentPlaceholder">
            <summary>
              Placeholder for wrapped content.  Output from the calling template will be inserted here.
            </summary>
            <returns>The output from the template that invoked Out.Wrap(string path)</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            <%= Out.GetWrapContentPlaceholder() %>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.StartCapture">
            <summary>
              Starts text capture. All output from this point on is recorded and not sent back to the client browser or published
            </summary>
            <returns>True if successfully started capturing output.</returns>
            <example>
              Standard use:
              <code><![CDATA[<%
             if (Out.StartCapture())
             { %>
               <%= asset["subject"] %><br />
               <%= asset["message"] %><br />
             <%     
               Out.Write( Out.StopCapture().ToUpper() );
               // prints out contents of subject and message in uppercase
              } %>
            ]]></code>
              Due to technical reasons, to debug this scenario in Visual Studio you will need to use dynamic code to generate all
              content within the StartCapture/StopCapture methods.
              <code><![CDATA[<%
             if (Out.StartCapture())
             { 
               Out.Write("{0}<br />", asset["subject"]);
               Out.Write("{0}<br />", asset["message"]);
               Out.Write( Out.StopCapture().ToUpper() );
               // prints out contents of subject and message in uppercase
              }    
              %>
            ]]></code>
            </example>
            <seealso cref="M:CrownPeak.CMSAPI.Out.StopCapture" />
        </member>
        <member name="M:CrownPeak.CMSAPI.Out.StopCapture">
            <summary>
              Stops capture mode and returns all the text printed between Out.StartCapture() and Out.StopCapture(). The text can
              then be processed and/or printed as needed.
            </summary>
            <returns>Returns all the text printed between Out.StartCapture() and Out.StopCapture()</returns>
            <example>
              Standard use:
              <code><![CDATA[<%
             if (Out.StartCapture())
             { %>
               <%= asset["subject"] %><br />
               <%= asset["message"] %><br />
             <%     
               Out.Write( Out.StopCapture().ToUpper() );
               // prints out contents of subject and message in uppercase
              } %>
            ]]></code>
              Due to technical reasons, to debug this scenario in Visual Studio you will need to use dynamic code to generate all
              content within the StartCapture/StopCapture methods.
              <code><![CDATA[<%
             if (Out.StartCapture())
             { 
               Out.Write("{0}<br />", asset["subject"]);
               Out.Write("{0}<br />", asset["message"]);
               Out.Write( Out.StopCapture().ToUpper() );
               // prints out contents of subject and message in uppercase
              }    
              %>
            ]]></code>
            </example>
            <seealso cref="M:CrownPeak.CMSAPI.Out.StartCapture" />
        </member>
        <member name="T:CrownPeak.CMSAPI.AssetParams">
            <summary>
              Parameters to be used in <see cref="M:CrownPeak.CMSAPI.Asset.GetFileList(CrownPeak.CMSAPI.AssetParams)">Asset.GetFileList</see> and
              <see cref="M:CrownPeak.CMSAPI.Asset.GetFolderList(CrownPeak.CMSAPI.AssetParams)">Asset.GetFolderList</see>.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.AssetParams.Excludes">
            <summary>
              Labels of the assets to be excluded from the upcoming query.
            </summary>
            <value>The excludes.</value>
        </member>
        <member name="M:CrownPeak.CMSAPI.AssetParams.SetExcludes(System.String[])">
            <summary>
              Sets the Excludes property with the passed in strings.
              If the list was not empty, previously added items are cleared from the list.
            </summary>
            <param name="excludeList">A string array of parameters to exclude.</param>
        </member>
        <member name="T:CrownPeak.CMSAPI.AssetPath">
            <summary>
              Represents the path to an <see cref="T:CrownPeak.CMSAPI.Asset" /> in the CMS.
            </summary>
            <example>
              <code lang="C#"><![CDATA[
            Asset asset = Asset.Load("/Site/Folder/Asset");
            
            Out.WriteLine(asset.AssetPath[0]);
            // prints "Site"
            
            Out.WriteLine(asset.AssetPath[1]);
            // prints "Folder"
            
            // print each segment
            foreach(string segment in asset.AssetPath)
            {
              Out.WriteLine(segment);
            }
            
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.AssetPath.#ctor(System.String)">
            <summary>
              Creates a new <see cref="T:CrownPeak.CMSAPI.AssetPath" /> from the given string.
            </summary>
            <param name="path">
              The path like "/Site/About Us/Index".  An empty string will not load an asset, if passed to Asset.Load.
              Use "/" to load the root asset.
            </param>
        </member>
        <member name="P:CrownPeak.CMSAPI.AssetPath.Count">
            <summary>
              The number of path segments.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.AssetPath.Item(System.Int32)">
            <summary>
              Allows the user to access the pieces of the path like it were an array of strings.
            </summary>
            <param name="index"></param>
            <returns></returns>
            <example>
              <code lang="C#"><![CDATA[
            Asset asset = Asset.Load("/Site/Folder/Asset");
            
            Out.WriteLine(asset.AssetPath[0]);
            // prints "Site"
            
            Out.WriteLine(asset.AssetPath[1]);
            // prints "Folder"
            
            Out.WriteLine(asset.AssetPath[2]);
            // prints "Asset"
            
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.AssetPath.GetEnumerator">
            <summary>
              Enumerates over the path segments.
            </summary>
            <returns>The enumerator.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            foreach(string segment in asset.AssetPath)
            {
              Out.WriteLine(segment);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.AssetPath.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Enumerates over the path segments.
            </summary>
            <returns>The enumerator.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            foreach(string segment in asset.AssetPath)
            {
              Out.WriteLine(segment);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.AssetPath.Equals(CrownPeak.CMSAPI.AssetPath)">
            <summary>
              Determines whether the specified <see cref="T:CrownPeak.CMSAPI.AssetPath" /> is equal to this instance.
            </summary>
            <param name="other">The other.</param>
            <returns>if the paths are equal returns <c>true</c>; otherwise <c>false</c></returns>
            <example>
              <code lang="c#">
            <![CDATA[
            
            Asset configAsset = "/site/about us/config";
            if(!asset.AssetPath.Equals(config.AssetPath))
            {
              asset["config_id"] = configAsset.Id;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.AssetPath.ToString">
            <summary>
              Returns a string that represents the path.
            </summary>
            <returns>A string that represents the path.</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            Out.WriteLine(asset.AssetPath.ToString());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.AssetPath.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <example>
              <code lang="c#">
            <![CDATA[
            
            Asset configAsset = "/site/about us/config";
            if(!asset.AssetPath.Equals(config.AssetPath))
            {
              asset["config_id"] = configAsset.Id;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.AssetPath.GetHashCode">
            <exclude />
        </member>
        <member name="T:CrownPeak.CMSAPI.AssetType">
            <summary>
              <see cref="T:CrownPeak.CMSAPI.Asset" /> types
            </summary>
            <seealso cref="P:CrownPeak.CMSAPI.Asset.Type" />
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetType.Unspecified">
            <summary>
            An unspecified asset type in the CMS.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetType.Folder">
            <summary>
              A folder asset in the CMS.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetType.File">
            <summary>
              A file asset in the CMS.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.CLConfig">
            <summary>
              Encapsulated view of component library configuration
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CLConfig.ComponentLibraryNamespace">
            <summary>
              The namespace used by the component library files
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CLConfig.ComponentLibraryRootFolder">
            <summary>
              Root folder of the component library.  Typically named "Component Library" and is a child of the project
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CLConfig.ComponentLibraryProject">
            <summary>
              Project where the component library is stored
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CLConfig.ComponentLibraryClassFolder">
            <summary>
              The place where generated code files go.  Usually the project's library subfolder
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CLConfig.ComponentLibraryDefFolder">
            <summary>
              The folder where component defintions are stored
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CLConfig.ComponentLibraryModelsFolder">
            <summary>
              The models folder
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CLConfig.ComponentLibrarySiteRoot">
            <summary>
              The site root
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CLConfig.ComponentLibraryConfigAsset">
            <summary>
              The asset that stores the configuration
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CLConfig.ComponentLibraryMaxLayoutColumns">
            <summary>
              max layout columns
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.CLConfig.ComponentLibraryTemplatesFolder">
            <summary>
              The default folder that template definitions will use to generate the new templates.
              Can be overriden in the template defintion with the
              "template_folder" field on a per defintion basis.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.ComponentBase">
            <summary>
              This is the base class from which all component classes inhereit. Every component must inheret from this class in
              order for the component
              to work as expected within the component library.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ComponentBase.ComponentMarkup">
            <summary>
              This is the raw markup for the component.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentBase.ComponentInput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.InputContext,System.String,System.String)">
            <summary>
              The input function which is meant to be overridden by the child class
            </summary>
            <param name="asset">The current asset</param>
            <param name="context">The current context</param>
            <param name="label">The label for the current field or component</param>
            <param name="name">The content field name for the current field or component</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentBase.ComponentPostInput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostInputContext,System.String,System.String)">
            <summary>
              The postInput function which is meant to be overridden by the child class
            </summary>
            <param name="asset">The current asset</param>
            <param name="context">The current PostInputContext context</param>
            <param name="name">The content field name for the current field or component</param>
            <param name="index">If this is in a list panel then the current panel index</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentBase.ComponentOutput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext,System.String,System.String,System.Boolean)">
            <summary>
              The output function which is meant to be overridden by the child class
            </summary>
            <param name="asset">The current asset</param>
            <param name="context">The current OutputContext context</param>
            <param name="name">The content field name for the current field or component</param>
            <param name="index">If this is in a list panel then the current panel index</param>
            <param name="isDrag">Indicates if the output needs to be rendered for drag and drop or for publishing and previewing</param>
            <returns>The markup for the current component with all the content placeholders replaced with their specified content</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentBase.PanelInput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.InputContext,System.String,System.String,System.Collections.Generic.Dictionary{System.Collections.Generic.List{System.String},System.Action{CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.InputContext,System.String,System.String}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
              A helper function used to generate the output when list panels are used.
            </summary>
            <param name="asset">The current asset</param>
            <param name="context">The current context</param>
            <param name="label">The label for the current field or component</param>
            <param name="name">The content field name for the current field or component</param>
            <param name="fields">
              A Dictionary where each key value pair consist of a list of string parameters and the
              corresponding content field's input function
            </param>
            <param name="minPanels">The minimum number of panels for this input panel</param>
            <param name="maxPanels">The maximum number of panels for this input panel</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentBase.PanelPostInput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostInputContext,System.String,System.Collections.Generic.Dictionary{System.Collections.Generic.List{System.String},System.Action{CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostInputContext,System.String,System.String}},System.String)">
            <summary>
              A helper function used to iterate through each panel during the post input process when list panels are used.
            </summary>
            <param name="context">The current PostInputContext context</param>
            <param name="name">The content field name for the current field or component</param>
            <param name="fields">
              A Dictionary where each key value pair consist of a list of string parameters and the
              corresponding content field's postInput function
            </param>
            <param name="index">If this is in a list panel then the current panel index</param>
            <param name="asset">The current asset</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentBase.PanelOutput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.Collections.Generic.List{System.String},System.Func{CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext,System.String,System.String,System.Boolean,System.String}},System.String)">
            <summary>
              The default helper function used to iterate through each panel during the output process when list panels are used.
            </summary>
            <param name="asset">The current asset</param>
            <param name="context">The current OutputContext context</param>
            <param name="name">The current content field name for the current content field or component</param>
            <param name="markup">The markup that should be repeated within the panel</param>
            <param name="listName">the cp-list name attribute value</param>
            <param name="fields">
              A Dictionary where each key value pair consist of a list of string parameters and the
              corresponding content field's output function
            </param>
            <param name="index">If this is in a list panel then the current panel index</param>
            <returns>
              The markup for the current list panel with all the content placeholders replaced with their specified content
              for each panel
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentBase.PanelOutput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext,System.String,System.Collections.Generic.Dictionary{System.Collections.Generic.List{System.String},System.Func{CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext,System.String,System.String,System.Boolean,System.String}},System.String,System.Collections.Generic.List{CrownPeak.CMSAPI.Asset})">
            <summary>
              A different helper function used to iterate through a list of assets to provide content for each panel. Use this
              option to generate the output if your panels correspond
              to a list of external assets rather then content within the current asset
            </summary>
            <param name="asset">The current asset</param>
            <param name="context">The current OutputContext context</param>
            <param name="markup">The markup that should be repeated within the panel</param>
            <param name="fields">
              A Dictionary where each key value pair consist of a list of string parameters and the
              corresponding content field's output function. Note that in this case it will only take the first kvp within the
              dictionary
            </param>
            <param name="index">If this is in a list panel then the current panel index</param>
            <param name="overrideAssetList">
              The list of assets from which the content will be pulled from instead of the current
              asset
            </param>
            <returns>
              The markup for the current list panel with all the content placeholders replaced with their specified content
              for each panel
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentBase.PanelOutput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext,System.String,System.String,System.Func{CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext,System.String,System.String,System.Boolean,System.String},System.String,System.Collections.Generic.List{CrownPeak.CMSAPI.Asset})">
            <summary>
              A different helper function used to iterate through a list of assets to provide content for each panel. Use this
              option to generate the output if your panels correspond
              to a list of external assets rather then content within the current asset
            </summary>
            <param name="asset">The current asset</param>
            <param name="context">The current OutputContext context</param>
            <param name="markup">The markup that should be repeated within the panel</param>
            <param name="contentToReplace">
              The markup within the &lt;cp-list&gt; tags that should be updated with the content from
              the external assets
            </param>
            <param name="method">
              The method of the output function that should be used to replace the content placeholders within
              the &lt;cp-list&gt; tags
            </param>
            <param name="index">If this is in a list panel then the current panel index</param>
            <param name="overrideAssetList">
              The list of assets from which the content will be pulled from instead of the current
              asset
            </param>
            <returns>
              The markup for the current list panel with all the content placeholders replaced with their specified content
              for each panel
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentBase.Index(System.Int32)">
            <summary>
              A helper function to return the current integer as a string with ":" prepended to it
            </summary>
            <param name="i">the current panel index</param>
            <returns>a string of the current panel index with ":" prepended to it</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.ComponentBase.Index(System.String)">
            <summary>
              A helper function which takes the provided index string and return the number of the shallowest index.
            </summary>
            <param name="i">The string representation of the index</param>
            <returns>an integer representation of the shallowest index within the provided string.</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.ContentParseMetadata">
            <summary>
              Result of content parsed by ACB for binary uploads only.  Data may not be available.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ContentParseMetadata.Metadata">
            <summary>
              Key-value pairs describing the document.  The values are mostly strings, but there may be other types such as arrays.
              "X-Parsed-By" is a property that is known to be an object array containing strings.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ContentParseMetadata.Digest">
            <summary>
              Digest of the content. Unique if actual file contents is unique
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ContentParseMetadata.Content">
            <summary>
              String representation of actual file contents
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.ContentType">
            <summary>
              Represents a content type (or MIME type) used, for example, in emails.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.ContentType.TextPlain">
            <summary>
              text/plain
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.ContentType.TextHtml">
            <summary>
              text/html
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.CopyActionType">
            <summary>
              <see cref="T:CrownPeak.CMSAPI.Asset" /> types
            </summary>
            <seealso cref="P:CrownPeak.CMSAPI.Asset.Type" />
        </member>
        <member name="F:CrownPeak.CMSAPI.CopyActionType.Copy">
            <summary>
              Copied from the source asset.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.CopyActionType.Clone">
            <summary>
              Cloned from the source asset.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.CopyActionType.Branch">
            <summary>
              Branched from the source asset.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.cpTimeZone">
            <summary>
              Use these as constants when specifying a timezone.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Dateline">
            <summary>
              Standard Offset: -12
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.UTC_11">
            <summary>
              Standard Offset: -11
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Hawaiian">
            <summary>
              Standard Offset: -10
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Alaskan">
            <summary>
              Standard Offset: -9
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.PacificMexico">
            <summary>
              Standard Offset: -8
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Pacific">
            <summary>
              Standard Offset: -8
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.USMountain">
            <summary>
              Standard Offset: -7
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.MountainMexico">
            <summary>
              Standard Offset: -7
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Mountain">
            <summary>
              Standard Offset: -7
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.CentralAmerica">
            <summary>
              Standard Offset: -6
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Central">
            <summary>
              Standard Offset: -6
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.CentralMexico">
            <summary>
              Standard Offset: -6
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.CanadaCentral">
            <summary>
              Standard Offset: -6
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.SAPacific">
            <summary>
              Standard Offset: -5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Eastern">
            <summary>
              Standard Offset: -5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.USEastern">
            <summary>
              Standard Offset: -5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Venezuela">
            <summary>
              Standard Offset: -4.5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Paraguay">
            <summary>
              Standard Offset: -4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Atlantic">
            <summary>
              Standard Offset: -4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.CentralBrazilian">
            <summary>
              Standard Offset: -4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.SAWestern">
            <summary>
              Standard Offset: -4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.PacificSA">
            <summary>
              Standard Offset: -4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Newfoundland">
            <summary>
              Standard Offset: -3.5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.ESouthAmerica">
            <summary>
              Standard Offset: -3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Argentina">
            <summary>
              Standard Offset: -3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.SAEastern">
            <summary>
              Standard Offset: -3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Greenland">
            <summary>
              Standard Offset: -3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Montevideo">
            <summary>
              Standard Offset: -3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Bahia">
            <summary>
              Standard Offset: -3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.UTC_02">
            <summary>
              Standard Offset: -2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Mid_Atlantic">
            <summary>
              Standard Offset: -2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Azores">
            <summary>
              Standard Offset: -1
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.CapeVerde">
            <summary>
              Standard Offset: -1
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Morocco">
            <summary>
              Standard Offset: 0
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.UTC">
            <summary>
              Standard Offset: 0
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.GMT">
            <summary>
              Standard Offset: 0
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Greenwich">
            <summary>
              Standard Offset: 0
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.WEurope">
            <summary>
              Standard Offset: 1
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.CentralEurope">
            <summary>
              Standard Offset: 1
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Romance">
            <summary>
              Standard Offset: 1
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.CentralEuropean">
            <summary>
              Standard Offset: 1
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.WCentralAfrica">
            <summary>
              Standard Offset: 1
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Namibia">
            <summary>
              Standard Offset: 1
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.GTB">
            <summary>
              Standard Offset: 2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.MiddleEast">
            <summary>
              Standard Offset: 2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Egypt">
            <summary>
              Standard Offset: 2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Syria">
            <summary>
              Standard Offset: 2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.EEurope">
            <summary>
              Standard Offset: 2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.SouthAfrica">
            <summary>
              Standard Offset: 2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.FLE">
            <summary>
              Standard Offset: 2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Turkey">
            <summary>
              Standard Offset: 2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Israel">
            <summary>
              Standard Offset: 2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Libya">
            <summary>
              Standard Offset: 2
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Jordan">
            <summary>
              Standard Offset: 3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Arabic">
            <summary>
              Standard Offset: 3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Kaliningrad">
            <summary>
              Standard Offset: 3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Arab">
            <summary>
              Standard Offset: 3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.EAfrica">
            <summary>
              Standard Offset: 3
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Iran">
            <summary>
              Standard Offset: 3.5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Arabian">
            <summary>
              Standard Offset: 4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Azerbaijan">
            <summary>
              Standard Offset: 4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Russian">
            <summary>
              Standard Offset: 4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Mauritius">
            <summary>
              Standard Offset: 4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Georgian">
            <summary>
              Standard Offset: 4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Caucasus">
            <summary>
              Standard Offset: 4
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Afghanistan">
            <summary>
              Standard Offset: 4.5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.WestAsia">
            <summary>
              Standard Offset: 5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Pakistan">
            <summary>
              Standard Offset: 5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.India">
            <summary>
              Standard Offset: 5.5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.SriLanka">
            <summary>
              Standard Offset: 5.5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Nepal">
            <summary>
              Standard Offset: 5.75
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.CentralAsia">
            <summary>
              Standard Offset: 6
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Bangladesh">
            <summary>
              Standard Offset: 6
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Ekaterinburg">
            <summary>
              Standard Offset: 6
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Myanmar">
            <summary>
              Standard Offset: 6.5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.SEAsia">
            <summary>
              Standard Offset: 7
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.NCentralAsia">
            <summary>
              Standard Offset: 7
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.China">
            <summary>
              Standard Offset: 8
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.NorthAsia">
            <summary>
              Standard Offset: 8
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Singapore">
            <summary>
              Standard Offset: 8
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.WAustralia">
            <summary>
              Standard Offset: 8
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Taipei">
            <summary>
              Standard Offset: 8
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Ulaanbaatar">
            <summary>
              Standard Offset: 8
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.NorthAsiaEast">
            <summary>
              Standard Offset: 9
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Tokyo">
            <summary>
              Standard Offset: 9
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Korea">
            <summary>
              Standard Offset: 9
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.CenAustralia">
            <summary>
              Standard Offset: 9.5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.AUSCentral">
            <summary>
              Standard Offset: 9.5
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.EAustralia">
            <summary>
              Standard Offset: 10
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.AUSEastern">
            <summary>
              Standard Offset: 10
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.WestPacific">
            <summary>
              Standard Offset: 10
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Tasmania">
            <summary>
              Standard Offset: 10
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Yakutsk">
            <summary>
              Standard Offset: 10
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.CentralPacific">
            <summary>
              Standard Offset: 11
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Vladivostok">
            <summary>
              Standard Offset: 11
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.NewZealand">
            <summary>
              Standard Offset: 12
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.UTC12">
            <summary>
              Standard Offset: 12
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Fiji">
            <summary>
              Standard Offset: 12
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Magadan">
            <summary>
              Standard Offset: 12
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Kamchatka">
            <summary>
              Standard Offset: 12
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Tonga">
            <summary>
              Standard Offset: 13
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.cpTimeZone.Samoa">
            <summary>
              Standard Offset: 13
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.cpTimeZone.Id">
            <summary>
            The id of the time zone.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.ExecuteWorkflowCommandResponse">
            <summary>
              Returned by some calls to encapsulate the result of the operation.
            </summary>
            <example>
              <code lang="C#">
             <![CDATA[
            
                ExecuteWorkflowCommandResponse res = Asset.ExecuteWorkflowCommand(assetIds, commandName);
            
                if (!res.HasError)
                {
                  context.Error = "Error executing workflow command." + " error: " + res.ErrorMessage;
                }
             ]]>
             </code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.ExecuteWorkflowCommandResponse.FailedAssets">
            <summary>
              Gets or sets the list of failed assets.
            </summary>
            <value>List of failed assets if not using a long running task, otherwise an empty list</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ExecuteWorkflowCommandResponse.IsLongRunning">
            <summary>
              Gets or sets a value indicating whether this ExecuteWorkflowCommand request used a long running task.
            </summary>
            <value><c>true</c> if this ExecuteWorkflowCommand request used a long running task; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ExecuteWorkflowCommandResponse.JobId">
            <summary>
              Gets or sets the value of the long running Job Id if this request used a long running task.
            </summary>
            <value>value of the long running Job Id if this request used a long running task, otherwise zero.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ExecuteWorkflowCommandResponse.ErrorMessage">
            <summary>
              Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ExecuteWorkflowCommandResponse.HasError">
            <summary>
              Gets or sets a value indicating whether this instance has error.
            </summary>
            <value><c>true</c> if this instance has error; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CrownPeak.CMSAPI.FilterParams">
            <summary>
              Parameters to be used in <see cref="M:CrownPeak.CMSAPI.Asset.GetFilterList(CrownPeak.CMSAPI.FilterParams)">Asset.GetFilterList</see>.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(System.String,CrownPeak.CMSAPI.Comparison,System.Int32,System.Boolean)">
            <summary>
              Adds a filter on a field to be compared as an <see cref="T:System.Int32" />.
            </summary>
            <param name="name">The name of the field to compare.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="value">The value.</param>
            <param name="checkLists">Optional: Set to true if the field might be stored in an array (on a repeating panel).</param>
            <example>
              <code lang="c#">
            <![CDATA[    
            FilterParams filter = new FilterParams();
            filter.Add("foo",  Comparison.Equals, 42);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(CrownPeak.CMSAPI.AssetPropertyNames,CrownPeak.CMSAPI.Comparison,System.Int32)">
            <summary>
              Adds a filter on a property to be compared as an <see cref="T:System.Int32" />.
            </summary>
            <param name="name">The name of the asset property to compare.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="value">The value.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add(AssetPropertyNames.Id,  Comparison.Equals, 42);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(System.String,CrownPeak.CMSAPI.Comparison,System.DateTime,System.Boolean)">
            <summary>
              Adds a filter on a field to be compared as a <see cref="T:System.DateTime" />.  Fields can be filtered as dates if they are
              between January 1, 1753, through December 31, 9999.  This is a limitation of the database.  It does not have the
              range
              of the DateTime data type in C#.
            </summary>
            <param name="name">The name of the field to compare.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="value">The value.</param>
            <param name="checkLists">Optional: Set to true if the field might be stored in an array (on a repeating panel). </param>
            <example>
              <code lang="c#">
            <![CDATA[ 
            FilterParams filter = new FilterParams();
            filter.Add("foo",  Comparison.Equals, new DateTime(2010, 11, 15));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(CrownPeak.CMSAPI.AssetPropertyNames,CrownPeak.CMSAPI.Comparison,System.DateTime)">
            <summary>
              Adds a filter on a property to be compared as a <see cref="T:System.DateTime" />.
            </summary>
            <param name="name">The name of the asset property to compare.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="value">The value.</param>
            <example>
              <code lang="c#">
            <![CDATA[ 
            FilterParams filter = new FilterParams();
            filter.Add(AssetPropertyNames.LastModified, Comparison.GreaterThan, new DateTime(2010, 11, 15));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(System.String,CrownPeak.CMSAPI.Comparison,System.Boolean,System.Boolean)">
            <summary>
              Adds a filter on a field to be compared as a <see cref="T:System.Boolean" />.
            </summary>
            <param name="name">The name of the field to compare.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="value">The value.</param>
            <param name="checkLists">Optional: Set to true if the field might be stored in an array (on a repeating panel).</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add("foo",  Comparison.Equals, true);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(CrownPeak.CMSAPI.AssetPropertyNames,CrownPeak.CMSAPI.Comparison,System.Boolean)">
            <summary>
              Adds a filter on a property to be compared as a <see cref="T:System.Boolean" />.
            </summary>
            <param name="name">The name of the asset property to compare.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="value">The value.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add(AssetPropertyNames.SomeBool, Comparison.Equals, true);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(System.String,CrownPeak.CMSAPI.Comparison,System.String,System.Boolean)">
            <summary>
              Adds a filter on a field to be compared as a <see cref="T:System.String" />.
            </summary>
            <param name="name">The name of the field to compare.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="value">The value.</param>
            <param name="checkLists">Optional: Set to true if the field might be stored in an array (on a repeating panel).</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add("foo",  Comparison.Equals, "bar");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(CrownPeak.CMSAPI.AssetPropertyNames,CrownPeak.CMSAPI.Comparison,System.String)">
            <summary>
              Adds a filter on a property to be compared as a <see cref="T:System.String" />.
            </summary>
            <param name="name">The name of the asset property to compare.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="value">The value.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add(AssetPropertyNames.Label, Comparison.Equals, "foo");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(CrownPeak.CMSAPI.Comparison,CrownPeak.CMSAPI.AssetType)">
            <summary>
              Adds a filter on a property for comparing asset type.
            </summary>
            <param name="comparisonOperator">The operator to compare with. Such as GreaterThan or LessThan.</param>
            <param name="type">The type of the asset to compare.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add(Comparison.Equals, AssetType.File);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(System.String,CrownPeak.CMSAPI.Comparison,System.Double,System.Boolean)">
            <summary>
              Adds a filter on a field to be compared as a <see cref="T:System.Double" />.  Fields can be filtered as floats if they are a
              number in the
              range - 1.79E+308 to -2.23E-308, 0 and 2.23E-308 to 1.79E+308 .  This is a limitation of the database storage.  It
              does not have
              the range of a double in C#.
            </summary>
            <param name="name">The name of the field to compare.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="value">The value.</param>
            <param name="checkLists">Optional: Set to true if the field might be stored in an array (on a repeating panel).</param>
            <example>
              <code lang="c#">
            <![CDATA[ 
            FilterParams filter = new FilterParams();
            filter.Add("foo", Comparison.GreaterOrEquals, 12.34);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(CrownPeak.CMSAPI.AssetPropertyNames,CrownPeak.CMSAPI.Comparison,System.Double)">
            <summary>
              Adds a filter on a property to be compared as a <see cref="T:System.Double" />.
            </summary>
            <param name="name">The name of the asset property to compare.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="value">The value.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add(AssetPropertyNames.Label, Comparison.GreaterOrEquals, 12.34);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(System.String,CrownPeak.CMSAPI.Comparison,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
              Adds a filter which checks a list for the presence of a field.
            </summary>
            <param name="name">The name of the field to compare.</param>
            <param name="comparisonOperator">The comparison operator. Must be IsInSet or NotInSet.</param>
            <param name="set">The set.</param>
            <param name="checkLists">Optional: Set to true if the field might be stored in an array (on a repeating panel).</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add("foo", Comparison.IsInSet, Util.MakeList("value1", "value2"));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(CrownPeak.CMSAPI.AssetPropertyNames,CrownPeak.CMSAPI.Comparison,System.Collections.Generic.List{System.String})">
            <summary>
              Adds a filter which checks a list for the presence of a property.
            </summary>
            <param name="name">The name of the asset property to compare.</param>
            <param name="comparisonOperator">The comparison operator. Must be IsInSet or NotInSet.</param>
            <param name="set">The set.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add(AssetPropertyNames.Label, Comparison.IsInSet, Util.MakeList("value1", "value2"));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(System.String,CrownPeak.CMSAPI.Comparison,System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
              Adds a filter which checks a list for the presence of a field.
            </summary>
            <param name="name">The name of the field to compare.</param>
            <param name="comparisonOperator">The comparison operator. Must be IsInSet or NotInSet.</param>
            <param name="set">The set.</param>
            <param name="checkLists">Optional: Set to true if the field might be stored in an array (on a repeating panel).</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add("foo", Comparison.IsInSet, Util.MakeList(1234, 2345));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Add(CrownPeak.CMSAPI.AssetPropertyNames,CrownPeak.CMSAPI.Comparison,System.Collections.Generic.List{System.Int32})">
            <summary>
              Adds a filter which checks a list for the presence of a property.
            </summary>
            <param name="name">The name of the asset property to compare.</param>
            <param name="comparisonOperator">The comparison operator. Must be IsInSet or NotInSet.</param>
            <param name="set">The set.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add(AssetPropertyNames.Id, Comparison.IsInSet, Util.MakeList(1234, 2345));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FilterParams.Remove(System.String)">
            <summary>
              Removes a filter from the current criteria list based on its fieldName.
            </summary>
            <param name="fieldName">The name of the field to be removed.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams filter = new FilterParams();
            filter.Add("foo",  Comparison.Equals, "bar");
            filter.Remove("foo");
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Comparison">
            <summary>
              An enumeration representing operations that can be used in <see cref="T:CrownPeak.CMSAPI.FilterParams" />.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.GreaterThan">
            <summary>
              &gt; operator
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.GreaterOrEquals">
            <summary>
              &gt;= operator
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.LessThan">
            <summary>
              &lt; operator
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.LessOrEquals">
            <summary>
              &lt;= operator
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.Equals">
            <summary>
              == operator
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.NotEquals">
            <summary>
              != operator. Note for custom fields this only matches assets where the named field exists.
            </summary>
            <seealso cref="F:CrownPeak.CMSAPI.Comparison.NullOrNotEquals" />
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.NullOrNotEquals">
            <summary>
              == null or != value
            </summary>
            <seealso cref="F:CrownPeak.CMSAPI.Comparison.NotEquals" />
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.NotNull">
            <summary>
              != null
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.IsNull">
            <summary>
              == null
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.IsInSet">
            <summary>
              Is in set
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.NotInSet">
            <summary>
              Is not in set. Note for custom fields this only matches assets where the named field exists.
            </summary>
            <seealso cref="F:CrownPeak.CMSAPI.Comparison.NullOrNotInSet" />
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.NullOrNotInSet">
            <summary>
              Is null or not in set
            </summary>
            <seealso cref="F:CrownPeak.CMSAPI.Comparison.NotInSet" />
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.StartsWith">
            <summary>
              Starts with. Only valid on strings.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.EndsWith">
            <summary>
              Ends with. Only valid on strings.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Comparison.Contains">
            <summary>
              Contains. Only valid on strings.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.AssetPropertyNames">
            <summary>
              An enumeration representing the names of properties of the <see cref="T:CrownPeak.CMSAPI.Asset" /> class. Can be used in
              <see cref="T:CrownPeak.CMSAPI.FilterParams" />.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.Id">
            <summary>
              <see cref="P:CrownPeak.CMSAPI.Asset.Id" />
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.FolderId">
            <summary>
              <see cref="P:CrownPeak.CMSAPI.Asset.FolderId" />
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.WorkflowId">
            <summary>
              The WorkflowId of the asset
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.CreateDate">
            <summary>
              The DateTime the asset was created
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.ModifiedDate">
            <summary>
              The DateTime the asset was modified
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.ChangeDate">
            <summary>
              The DateTime the asset was changed
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.CheckoutDate">
            <summary>
              The DateTime the asset was checkedout
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.Label">
            <summary>
              <see cref="P:CrownPeak.CMSAPI.Asset.Label" />
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.TemplateLabel">
            <summary>
              The "Label" (Not full path) of the folder which is assigned as a template.  This can be used
              for filtering, but not sorting.
            </summary>
            <example>
              <code lang="C#">
            <![CDATA[
                  FilterParams fParams = new FilterParams();
                  fParams.Add(AssetPropertyNames.TemplateLabel, Comparison.Equals, "Content Page");
            
                  List<Asset> list2 = Asset.Load("/Site/About Us").GetFilterList(fParams);
            ]]></code>
            </example>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.TemplateId">
            <summary>
              <see cref="P:CrownPeak.CMSAPI.Asset.TemplateId" />
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.CreatedFromModelId">
            <summary>
              This is the id of the model asset used to create this one.
              <see cref="P:CrownPeak.CMSAPI.Asset.CreatedFromModelId" />
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.ModelId">
            <summary>
              The id of the model that is assigned to the asset.
              For folders.  This is the id of a folder whose children show up
              in the "New" menu when this folder is selected.
              This can be used
              for filtering, but not sorting.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.ShortcutId">
            <summary>
              The shortcut id.  Usually the same as the id, but different if the asset is a shortcut that points to another.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.BranchId">
            <summary>
              The branch id.  Usually the same as the id, but different if the asset is a branch of another asset.
              This can be used
              for filtering, but not sorting.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.PublishDate">
            <summary>
              The DateTime the asset was published
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.IsHidden">
            <summary>
              A flag which shows if the asset was hidden
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.IsDeleted">
            <summary>
              A flag which shows the asset has been deleted, but not yet purged (Takes 2 weeks)
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.Type">
            <summary>
              The asset type (File or Folder) <see cref="T:CrownPeak.CMSAPI.AssetType" />.
              Use FilterParams.Add(Comparison comparisonOperator, AssetType type) to filter on this.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.AssetPropertyNames.StatusDate">
            <summary>
              The Date and Time the asset moved into it's current workflow step.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.FilterTextType">
            <summary>
              Types of text filters that can be used in <see cref="M:CrownPeak.CMSAPI.Util.FilterText(System.String,CrownPeak.CMSAPI.FilterTextType)" />
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FilterTextType.Unspecified">
            <summary>
              For serialization only.  Don't use.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FilterTextType.Alpha">
            <summary>
              Filters everything but letters.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FilterTextType.AlphaNumeric">
            <summary>
              Filters everything but letters and digits.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FilterTextType.Filename">
            <summary>
              Filters everything not allowed in a file name.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FilterTextType.Filepath">
            <summary>
              Filters everything not allowed in a file path.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FilterTextType.Numeric">
            <summary>
              Filters everthing but digits.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.Unspecified">
            <summary>
              For serialization only.  Don't use.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.Folder">
            <summary>
              A regular folder.  Not a special type
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.SiteRoot">
            <summary>
              The root of a webbsite. Usually contains file that publish to the root folder of the website.  Used to help locate
              current project.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.Project">
            <summary>
              A project.  Contains templates and optionally a local library or references to a library.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.Library">
            <summary>
              A library which is local to the current project
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.LibraryReference">
            <summary>
              A library which is reference from somewhere else.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.TemplateFolder">
            <summary>
              A folder that can contain only templates and other template folders.  It can only be created in a project or another
              template folder.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.Template">
            <summary>
              A folder that contains or can contain template files.  It can only be created in a template folder.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.ModelFolder">
            <summary>
              A folder that contains models.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.WorkflowFolder">
            <summary>
              A folder that holds workflows
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FolderType.ComponentFrameworkFolder">
            <summary>
              A folder that holds component library definition assets.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.HttpParams">
            <summary>
              Base class of <see cref="T:CrownPeak.CMSAPI.PostHttpParams">PostHttpParams</see>.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.HttpParams.Headers">
            <summary>
              The list of headers that will be sent in the GET request.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.HttpParams.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CrownPeak.CMSAPI.HttpParams" /> class.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.HttpParams.TimeOut">
            <summary>
              This is the timeout value in seconds.
            </summary>
            <value>The time out.</value>
        </member>
        <member name="M:CrownPeak.CMSAPI.HttpParams.AddHeader(System.String)">
            <summary>
              Adds the given header to the headers list.
            </summary>
            <param name="header">The header.</param>
            <example>
              <code lang="C#">
            <![CDATA[
             string url = "http://www.crownpeak.com";
             
             PostHttpParams httpParams = new PostHttpParams();
             httpParams.PostData = "_username=test&_password=_test";
             httpParams.AddHeader("Accept-Encoding: gzip,deflate");      
             PostHttpResponse response = Util.PostHttp(url, httpParams);
            ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.GetHttpParams">
            <summary>
              Parameters to be used in <see cref="M:CrownPeak.CMSAPI.Util.GetHttp(System.String,CrownPeak.CMSAPI.GetHttpParams)">Util.GetHttp</see>.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.PostHttpParams">
            <summary>
              Parameters to be used in <see cref="M:CrownPeak.CMSAPI.Util.PostHttp(System.String,CrownPeak.CMSAPI.PostHttpParams)">Util.PostHttp</see>.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PostHttpParams.ContentType">
            <summary>
              The Content-Type of the POST request.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PostHttpParams.PostData">
            <summary>
              The data that will be sent in the POST request.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.PostHttpParams.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CrownPeak.CMSAPI.PostHttpParams" /> class.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.PutHttpParams">
            <summary>
              Parameters to be used in <see cref="M:CrownPeak.CMSAPI.Util.PutHttp(System.String,CrownPeak.CMSAPI.PutHttpParams)">Util.PutHttp</see>.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PutHttpParams.ContentType">
            <summary>
              The Content-Type of the POST request.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PutHttpParams.PutData">
            <summary>
              The data that will be sent in the POST request.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.PutHttpParams.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CrownPeak.CMSAPI.PostHttpParams" /> class.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.DeleteHttpParams">
            <summary>
              Parameters to be used in <see cref="M:CrownPeak.CMSAPI.Util.DeleteHttp(System.String,CrownPeak.CMSAPI.DeleteHttpParams)">Util.DeleteHttp</see>.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.HttpResponse">
            <summary>
              Base class of <see cref="T:CrownPeak.CMSAPI.PostHttpParams">PostHttpParams</see> and <see cref="T:CrownPeak.CMSAPI.GetHttpParams">GetHttpParams</see>.  Do
              not use directly.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.HttpResponse.ResponseText">
            <summary>
              The text that has been returned from the server.
            </summary>
            <value>The response text.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.HttpResponse.StatusCode">
            <summary>
              The status code returned from the server.
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.HttpResponse.StatusDescription">
            <summary>
              The status description returned from the server.
            </summary>
            <value>The status description.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.HttpResponse.Headers">
            <summary>
              This is the headers that were sent to the server that returned the POST.  There are provided for debugging purposes
              for cases where the receiving server needs a
              specific set of headers passed to it.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="T:CrownPeak.CMSAPI.PostHttpResponse">
            <summary>
              The object returned by <see cref="M:CrownPeak.CMSAPI.Util.PostHttp(System.String,CrownPeak.CMSAPI.PostHttpParams)">Util.PostHttp</see>.  It contains the
              response text and various meta information about the POST request.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.PutHttpResponse">
            <summary>
              The object returned by <see cref="M:CrownPeak.CMSAPI.Util.PutHttp(System.String,CrownPeak.CMSAPI.PutHttpParams)">Util.PutHttp</see>.  It contains the response
              text and various meta information about the PUT request.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.DeleteHttpResponse">
            <summary>
              The object returned by <see cref="M:CrownPeak.CMSAPI.Util.DeleteHttp(System.String,CrownPeak.CMSAPI.DeleteHttpParams)">Util.DeleteHttp</see>.  It contains the
              response text and various meta information about the DELETE request.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.GetHttpResponse">
            <summary>
              The object returned by <see cref="M:CrownPeak.CMSAPI.Util.GetHttp(System.String,CrownPeak.CMSAPI.GetHttpParams)">Util.GetHttp</see>.  It contains the response
              text and various meta information about the GET request.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.InputForm">
            <summary>
              A construct that allows you to read, edit, add, or remove form fields before they are commited to the Database.
            </summary>
            <example>
              <code> 
             <![CDATA[
             
             // Gets the value of a form field called "title" that was posted from the input form (input.aspx)
             string newTitle = context.InputForm["title"];
             
             // Change data to be saved
             context.InputForm["title"] = "A new value to be saved as a content property called title on the current asset";
            
             // add a value to be saved
             context.InputForm["newfield"] = "A new field to be saved as a content property on the current asset";
            
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.InputForm.UploadedFiles">
            <summary>
              Upload paths that were changed on the previous edit
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.InputForm.Item(System.String)">
            <summary>
              Used to read or assign a value.
              <para>If a null value is assigned, a blank string is stored.</para>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.GetEnumerator">
            <summary>
              Allows enumeration on the form fields.  Each entry is KeyValuePair.
            </summary>
            <returns>A single item from the collection.</returns>
            <example>
              post_input.aspx
              <code lang="c#">
            <![CDATA[
             foreach (KeyValuePair<string, string> entry in context.InputForm)
             {
               if (entry.Key.StartsWith("num_"))
               {
                 context.InputForm[entry.Key] = Util.FilterText(entry.Value, FilterTextType.Numeric);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#String}}#GetEnumerator">
            <summary>
              Allows enumeration on the form fields.  Each entry is KeyValuePair.
            </summary>
            <returns>A single item from the collection.</returns>
            <example>
              post_input.aspx
              <code lang="c#">
            <![CDATA[
             foreach (KeyValuePair<string, string> entry in context.InputForm)
             {
               if (entry.Key.StartsWith("num_"))
               {
                 context.InputForm[entry.Key] = Util.FilterText(entry.Value, FilterTextType.Numeric);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.GetPanels(System.String,CrownPeak.CMSAPI.SortOrder)">
            <summary>
              Get panels based on list name from data posted from the InputForm.
            </summary>
            <param name="name">Name of the field on which to create the list</param>
            <param name="sort">Optional: sort order, default is null. If null, the list will be in the order it was saved.</param>
            <returns>The requested list of PanelEntries</returns>
            <example>
              <code><![CDATA[
            List<PanelEntry> panels = context.InputForm.GetPanels("list_name");
            foreach (PanelEntry entry in panels)
            {
              Out.WriteLine("The value of list_field in this panel is: " + entry["list_field"]);
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.GetPanelsFromFolder(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.AssetParams,CrownPeak.CMSAPI.AssetType,System.String,System.String)">
            <summary>
              Gets a List of AssetPanelEntry objects which bind panel data with Assets found in the folder provided.  Panel data
              will be data in the inputform which has not yet
              been committed.
            </summary>
            <param name="folder">The folder that contains the assets to bind to the panels</param>
            <param name="panelName">The panel name</param>
            <param name="assetParams">
              Optional:  An AssetParams object that allows you to change how the list of bound assets is
              generated.
            </param>
            <param name="type">
              Optional:  Allows you to specify a type of asset (files or folders) to return.  By default, both are
              returned.
            </param>
            <param name="labelName">
              Optional:  The string that will be used to store the folder's label when we store the panel
              data. Use lower case.  Defaults to panelName + ".label"
            </param>
            <param name="idName">
              Optional:  The string that will be used to store the folder's id when we store the panel data. Use
              lower case.  Defaults to panelName + ".id"
            </param>
            <returns>Returns a List of <see cref="T:CrownPeak.CMSAPI.AssetPanelEntry" /></returns>
            <example>
              <code lang="C#">
            <![CDATA[
               List<AssetPanelEntry> panels = context.InputForm.GetPanelsFromFolder(asset.Parent, "folder_list", labelName: "folder_label", idName: "folder_id");
             
               foreach(AssetPanelEntry panel in panels)
               {
                 //Adding a new field called link so we don't ahve to check if it was an external or internal link in the output.
                 string link = "link_external";          
                 if ((panel["link_type"]).Equals("internal",StringComparison.OrdinalIgnoreCase))
                 {
                   link = "link_internal";
                 }
                 panel["page_link"] = panel[link];
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.GetPanelsFromFolder(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.FilterParams,CrownPeak.CMSAPI.AssetType,System.String,System.String)">
            <summary>
              The same as <see cref="M:CrownPeak.CMSAPI.InputForm.GetPanelsFromFolder(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.AssetParams,CrownPeak.CMSAPI.AssetType,System.String,System.String)" /> but with
              <see cref="T:CrownPeak.CMSAPI.FilterParams" /> instead of <see cref="T:CrownPeak.CMSAPI.AssetParams" />.
            </summary>
            <param name="folder">The folder that contains the assets to bind to the panels</param>
            <param name="panelName">The panel name</param>
            <param name="filterParams">A FilterParams object that allows you to change how the list of bound assets is generated.</param>
            <param name="type">
              Optional:  Allows you to specify a type of asset (files or folders) to return.  By default, both are
              returned.
            </param>
            <param name="labelName">
              Optional:  The string that will be used to store the folder's label when we store the panel
              data. Use lower case.  Defaults to panelName + ".label"
            </param>
            <param name="idName">
              Optional:  The string that will be used to store the folder's id when we store the panel data. Use
              lower case.  Defaults to panelName + ".id"
            </param>
            <returns>Returns a List of <see cref="T:CrownPeak.CMSAPI.AssetPanelEntry" /></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.GetPanelsFromFolder(System.String,CrownPeak.CMSAPI.AssetParams,CrownPeak.CMSAPI.AssetType,System.String,System.String)">
            <summary>
              Gets a List of AssetPanelEntry objects which bind panel data with Assets found in either the current asset instance,
              if it a folder or the current asset's parent.
              Panel data will be data in the inputform which has not yet been committed.
            </summary>
            <param name="panelName">The panel name</param>
            <param name="assetParams">
              Optional:  An AssetParams object that allows you to change how the list of bound assets is
              generated.
            </param>
            <param name="type">
              Optional:  Allows you to specify a type of asset (files or folders) to return.  By default, both are
              returned.
            </param>
            <param name="labelName">
              Optional:  The string that will be used to store the folder's label when we store the panel
              data. Use lower case.  Defaults to panelName + ".label"
            </param>
            <param name="idName">
              Optional:  The string that will be used to store the folder's id when we store the panel data. Use
              lower case.  Defaults to panelName + ".id"
            </param>
            <returns>Returns a List of <see cref="T:CrownPeak.CMSAPI.AssetPanelEntry" /></returns>
            <example>
              <code lang="C#">
            <![CDATA[
               List<AssetPanelEntry> panels = context.InputForm.GetPanelsFromFolder("press_releases", "folder_list", labelName: "folder_label", idName: "folder_id");
             
               foreach(AssetPanelEntry panel in panels)
               {
                 //Adding a new field called link so we don't ahve to check if it was an external or internal link in the output.
                 string link = "link_external";          
                 if ((panel["link_type"]).Equals("internal",StringComparison.OrdinalIgnoreCase))
                 {
                   link = "link_internal";
                 }
                 panel["page_link"] = panel[link];
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.HasField(System.String)">
            <summary>
              Use to see if a field with the given name is provided by the InputForm
            </summary>
            <param name="fieldName"></param>
            <returns>
              If the <see cref="T:CrownPeak.CMSAPI.InputForm" /> contains the requested field, returns <c>true</c>; otherwise <c>false</c>
            </returns>
            <example>
              <code lang="C#"> 
             <![CDATA[
            
            if (!context.InputForm.HasField("title")) // If a title is not provided
            { 
              // redisplay the input form with this message
              context.ValidationError = "Please add a title.";
            }
            else if (!asset.Label.Equals(context.InputForm["title"])) // If value is different from current label
            {
              asset.Rename(context.InputForm["title"]); // rename asset to new title value.
            }
            
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.HasKey(System.String)">
            <summary>
              Determines whether the specified key is contained in the inputForm.  It does not check if the value is null or empty.
              If you want to check for null or empty use, HasField.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key has key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.Remove(System.Collections.Generic.ICollection{System.String})">
            <summary>
              Add a collection of fieldsNames, that should be removed.  This could be a List of strings or the Keys property from a
              dictionary object
            </summary>
            <param name="fieldNames">The field name.</param>
            <example>
              <code lang="C#">
            <![CDATA[
            ICollection<string> names = 
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.Remove(System.Collections.Generic.List{System.String})">
            <summary>
              Overload for List
            </summary>
            <param name="fieldNames">The field name.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            List<string> fieldNames = new List<string>();
            fieldNames.Add("title");
            fieldNames.Add("description");
            context.InputForm.Remove(fieldNames);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.Remove(System.String)">
            <summary>
              Add the name of a field that should be removed.
            </summary>
            <param name="fieldName">The field name.</param>
            <example>
              <code lang="C#">
            <![CDATA[
            context.InputForm.Remove("Label");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.RemoveByPrefix(System.String)">
            <summary>
              Add all fields starting with the prefix to the list of fields to be removed.
            </summary>
            <param name="fieldNamePrefix">The field name prefix.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            //Removing all temp variables
            context.InputForm.RemoveByPrefix("temp_");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.SaveContentField(System.String,System.String)">
            <summary>
              Adds or edits a form field before committing to the DB
              <para>These fields will be committed after the post_input template file runs.</para>
            </summary>
            <param name="name">The name of the fieldname</param>
            <param name="value">The value to set the fieldName to.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            context.InputForm.SaveContentField("the_answer","42");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.SaveContent(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              Adds or edits form fields defined in the given dictionary.
              <para>These fields will be committed after the post_input template file runs.</para>
            </summary>
            <param name="fields">The dictionary of fields to save.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            Asset configAsset = Asset.Load(asset.Parent.AssetPath.ToString() + "/config");
            if(configAsset.IsLoaded)
            {
              Dictionary<string, string> fields = new Dictionary<string, string>();
              fields.Add("config_title", configAsset["title"]);
              fields.Add("config_description"l, configAsset["description"]);
              context.InputForm.SaveContent(fields);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.ClearUpload(System.String)">
            <summary>
              Causes the specified upload's meta data to be removed from the asset when the asset is saved after post_input runs.
            </summary>
            <param name="key">The key used to identify the upload that you are clearing.</param>
            <example>
              <code lang="C#">
            <![CDATA[
            <% context.InputForm.ClearUpload("my_photo"); %>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.SaveUploadedFile(System.String,CrownPeak.CMSAPI.UploadedFile)">
            <summary>
              <para>Save an uploaded file with the given key</para>
            </summary>
            <param name="key">
              The name to save it under.  Don't include "upload#".  If null or an empty string is passed,
              we will use the key in the object
            </param>
            <param name="uploadedFile">The uploaded file.</param>
            <example>
              <code lang="C#">
               <![CDATA[
               
             context.InputForm.SaveUploadedFile("my_photo_copy", context.InputForm.UploadedFiles["my_photo"]); 
            
             ]]>
               </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.SaveUploadedFile(System.String,CrownPeak.CMSAPI.UploadedFile,System.Boolean)">
            <summary>
              For internal use.  Called by CreateThumbnail.
            </summary>
            <param name="key"></param>
            <param name="uploadedFile"></param>
            <param name="copyFile"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.CreateThumbnail(CrownPeak.CMSAPI.Img,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              <para>
                Creates a thumbnail of the specified size from the currently loaded image.
                A ThumbnailKey is required.  The resulting image will be stored on the asset at the end of post_input.
              </para>
              <para>
                Note: Due to memory limitations, the pixel count of the source image cannot be more than 10 million.
              </para>
            </summary>
            <param name="img">The image to be used to create the thumbnail</param>
            <param name="thumbnailKey">The Key used to refer to the thumbnail later as part of the asset's content.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="qualityByPercent">
              Optional: The Quality of the saved JPG as a percent.  Higher numbers have higher
              quality, but also bigger sizes.
            </param>
            <param name="preserveAspectRatio">
              Optional: Pass false if you want the thumbnail to be generated with exactly the size
              of the passed in width and height.Available in builds 3451 and up.
            </param>
            <returns><see cref="T:CrownPeak.CMSAPI.ImgResult" />An ImgResult.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
            
              // Usually called from post_input.aspx
              
                if (context.InputForm.UploadedFiles["my_photo"] != null)
                {
                  Img img = Img.Load(context.InputForm.UploadedFiles["my_photo"]);
                  if (!img.HasError)
                  {
                    ImgResult result = context.InputForm.CreateThumbnail(img, "my_photo_thumbnail_on_post", 50,50);
                    if (result.HasError)
                    {
                      panel["Error"] = result.ErrorMessage;
                    }
                  }
                }
              
             
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.CreateThumbnail(CrownPeak.CMSAPI.UploadedFile,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              <para>
                Creates a thumbnail of the specified size from an uploaded files.
                A ThumbnailKey is required.  The resulting image will be stored on the asset at the end of post_input.
              </para>
              <para>
                Note: Due to memory limitations, the pixel count of the source image cannot be more than 10 million.
              </para>
            </summary>
            <param name="uploadedFile">The image to be used to create the thumbnail</param>
            <param name="thumbnailKey">The Key used to refer to the thumbnail later as part of the asset's content.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="qualityByPercent">
              Optional: The Quality of the saved JPG as a percent.  Higher numbers have higher
              quality, but also bigger sizes.
            </param>
            <param name="preserveAspectRatio">
              Optional: Pass false if you want the thumbnail to be generated with exactly the size
              of the passed in width and height.Available in builds 3451 and up.
            </param>
            <returns>
              <see cref="T:CrownPeak.CMSAPI.ImgResult" />
            </returns>
            <example>
              <code lang="C#">
             <![CDATA[
            
              // Usually called from post_input.aspx
              
              if (context.InputForm.UploadedFiles["my_photo"] != null)
              {
                ImgResult result = context.InputForm.CreateThumbnail(context.InputForm.UploadedFiles["my_photo"], "my_photo_thumbnail_on_post", 50,50);
                if (result.HasError)
                {
                  panel["Error"] = result.ErrorMessage;
                }
              }
              
             
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.CropImage(CrownPeak.CMSAPI.UploadedFile,System.String,System.Int32)">
            <summary>
              Recommended Version: Crop the current image stored on the uploadedFile using the box defined on the input form using
              the lasso.
              "Lasso" properties must be set on ShowAcquireParams when they are passed to Input.ShowAcquireImage
            </summary>
            <param name="uploadedFile">UploadedFile that contains an Image</param>
            <param name="thumbnailKey">A key used to save the result</param>
            <param name="qualityByPercent">Optional: The quality of the resulting image as a percent. Defaults to 75</param>
            <returns>ImgResult.  Contains the new Img.  Use HasError to check for errors.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
            
              // input.aspx : Important: First have an upload with lasso params in the input form
              
              ShowAcquireParams aParams = new ShowAcquireParams();
              aParams.DefaultFolder = "/Assets/images";
              aParams.ShowLasso = true;
              // final cropped image will be scaled down to 100 pixels
              aParams.LassoHeight = 100;
              aParams.LassoWidth = 100;
              // initial dimensions for the selection "lasso", after a successful crop the current dimensions will be saved and used on the input form the next time.
              aParams.LassoBoxTop = 0;
              aParams.LassoBoxLeft  = 0;
              aParams.LassoBoxWidth = 200;
              aParams.LassoBoxHeight = 200;
              
              //The original will be scaled down to not more than 600 on each side
              aParams.AddAdditionalImage("original_image", 600,600);
                
              Input.ShowAcquireImage("Original", "original_image", aParams);
              
             // post_input.aspx:
             // Take the file uploaded with the name "original_image" crop it as defined on the input form and store it with the name "cropped_Image"
             ImgResult img = context.InputForm.CropImage(context.InputForm.UploadedFiles["original_image"], "cropped_image");
             if (img.HasError)
             {
               context.Error "Crop error " + img.ErrorMessage;
             }
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.CropImage(CrownPeak.CMSAPI.UploadedFile,System.String,CrownPeak.CMSAPI.LassoParams,System.Int32)">
            <summary>
              Recommended Version: Crop the current image stored on the uploadedFile using the box defined on the input form using
              the lasso.
              "Lasso" properties must be set on ShowAcquireParams when they are passed to Input.ShowAcquireImage
            </summary>
            <param name="uploadedFile">UploadedFile that contains an Image</param>
            <param name="thumbnailKey">A key used to save the result</param>
            <param name="lParams">An object that defines the various lasso params such as BoxWidth and ScaleHeight.</param>
            <param name="qualityByPercent">Optional: The quality of the resulting image as a percent. Defaults to 75</param>
            <returns>ImgResult.  Contains the new Img.  Use HasError to check for errors.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.CropImage(CrownPeak.CMSAPI.Img,System.String,CrownPeak.CMSAPI.LassoParams,System.Int32)">
            <summary>
              Crop the given image as specified.  Lasso Params not saved with this call.
            </summary>
            <param name="img">The image to crop</param>
            <param name="thumbnailKey">The name of the key to save the thumbnail into.</param>
            <param name="lParams">LassoParams that specify how to crop and scale the image</param>
            <param name="qualityByPercent">Optional: The image quality of the created image. Defaults to 75.</param>
            <returns>
              <see cref="T:CrownPeak.CMSAPI.ImgResult" />
            </returns>
            <example>
              <code lang="c#">
            <![CDATA[
             // input.aspx : Important: First have an upload with lasso params in the input form
             
             ShowAcquireParams aParams = new ShowAcquireParams();
             aParams.DefaultFolder = "/Assets/images";
             aParams.ShowLasso = true;
             // final cropped image will be scaled down to 100 pixels
             aParams.LassoHeight = 100;
             aParams.LassoWidth = 100;
             // initial dimensions for the selection "lasso", after a successful crop the current dimensions will be saved and used on the input form the next time.
             aParams.LassoBoxTop = 0;
             aParams.LassoBoxLeft  = 0;
             aParams.LassoBoxWidth = 200;
             aParams.LassoBoxHeight = 200;
             
             //The original will be scaled down to not more than 600 on each side
             aParams.AddAdditionalImage("original_image", 600,600);
               
             Input.ShowAcquireImage("Original", "original_image", aParams);
             
            // post_input.aspx:
            // Take the file uploaded with the name "original_image" crop it as defined on the input form and store it with the name "cropped_Image"
            ImgResult img = context.InputForm.CropImage(context.InputForm.UploadedFiles["original_image"].Img, "cropped_image");
            if (img.HasError)
            {
              context.Error "Crop error " + img.ErrorMessage;
            }    
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.InputForm.GetLassoParams(System.String)">
            <summary>
              Get lasso params from the last post that were created using the lasso on the input form with an uploaded image.
            </summary>
            <param name="uploadFieldName">The name of the upload field</param>
            <returns>LassoParams or null, if not found.</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.DragParams">
            <summary>
              Parameters for use with <see cref="M:CrownPeak.CMSAPI.Input.ShowDragDrop(System.String,System.String,CrownPeak.CMSAPI.DragParams,System.String,System.String)" />.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.ShowAcquireParams">
            <summary>
              Params used in conjunction with Input.ShowAcquireDocument(string, string, ShowAcquireParams, string) and with
              Input.ShowAcquireImage(string, string, ShowAcquireParams, string, string).
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.ShowAcquireParams.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CrownPeak.CMSAPI.ShowAcquireParams" /> class with the default parameters.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.DefaultFolder">
            <summary>
              Use this parameter to set the default CMS folder that you will see when browsing assets.  ShowBrowse must be set to
              RelationshipType.Link or RelationshipType.Attach.
            </summary>
            <value>A string that represents a CMS folder path like "/Site/About Us"</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.ShowUpload">
            <summary>
              Show the option to upload.  Defaults to true
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.ShowBrowse">
            <summary>
              Show the CMS browse view in the acquire dialog.  Defaults to true
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.UploadType">
            <summary>
              Optional: Changing this setting is not recommended.  Use ShowUpload to control whether the upload control that lets
              you
              upload a file will be displayed when you call one of the ShowAcquire methods.
              Set to RelationshipType.Attach or RelationshipType.Link, if you want to be able to upload files with the control.
              Attach is recommended.  Link will cause a new asset to be created.
            </summary>
            <value>A RelationshipType param.  Default is RelationshipType.Attach</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.ModelId">
            <summary>
              Optional: Sets the model id for the file (image or document) to be uploaded. Used only when UploadType =
              RelationshipType.Link.
            </summary>
            <value>The model id to be used for the new asset.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.BrowseType">
            <summary>
              Optional: Changing this setting is not recommended.  Use ShowBrowse to control whether the browse control that lets
              you
              select an asset in the CMS will be displayed when you call one of the ShowAcquire methods.
              Set to RelationshipType.Link or RelationshipType.Attach, if you want to be able to browse for CMS assets with the
              control.  Link is recommended.  Attached will cause the selected asset to be copied as an
              attachment to the current asset.
            </summary>
            <value>A RelationshipType param.  Default is RelationshipType.Link</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.PickerType">
            <summary>
              Set to PickerView.FileView, PickerView.DigitalAssetView or PickerView.CollectionView, if you want to change the
              default view for the picker when browsing the CMS assets.
              If DAM and/or Collections are not enabled on the instance the FileView option will be used.
            </summary>
            <value>A PickerView param.  Default is PickerView.FileView</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.ShowLasso">
            <summary>
              Set this to true if you want the "lasso" selector to show up when you upload an image to the Input.ShowAcquireImage()
              control.  This gives you a draggable and resizable rectangle that
              can be used to select a region to "crop" from the image. Call InputForm.CropImage in post_input.aspx to use the last
              selected "lasso" parameters to crop the image.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.LassoHeight">
            <summary>
              Optional: Y-component of lasso aspect ratio. Works with Lasso.  When calling InputForm.CropImage() in post_input,
              scales cropped image using this value.
              0 or less for this value will result will result in no scaling for this dimension.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.LassoWidth">
            <summary>
              Optional: X-component of lasso aspect ratio. Works with Lasso.  When calling InputForm.CropImage() in post_input,
              scales cropped image using this value.
              0 or less for this value will result will result in no scaling for this dimension.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.LassoBoxTop">
            <summary>
              Optional: The initial top pixel postion of the "lasso" crop-selector when you have uploaded an image and want to crop
              it. ShowLasso must be set to true.
              If InputForm.CropImage is called from post_input.aspx, this value will be overridden on the next edit with the value
              used to crop the image.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.LassoBoxLeft">
            <summary>
              Optional: The initial left pixel postion of the "lasso" crop-selector when you have uploaded an image and want to
              crop it. ShowLasso must be set to true.
              If InputForm.CropImage is called from post_input.aspx, this value will be overridden on the next edit with the value
              used to crop the image.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.LassoBoxWidth">
            <summary>
              Optional: The initial width of the "lasso" crop-selector when you have uploaded an image and want to crop it.
              ShowLasso must be set to true. Defaults to 100.
              If InputForm.CropImage is called from post_input.aspx, this value will be overridden on the next edit with the value
              used to crop the image.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.LassoBoxHeight">
            <summary>
              Optional: The initial height of the "lasso" crop-selector when you have uploaded an image and want to crop it.
              ShowLasso must be set to true. Defaults to 100.
              If InputForm.CropImage is called from post_input.aspx, this value will be overridden on the next edit with the value
              used to crop the image.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.ThumbnailField">
            <summary>
              Use this parameter to set the field name where the path to the cropped image would be stored.
            </summary>
            <value>A string that represents a name of a content field like "cropped_image"</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.Extensions">
            <summary>
              <para>List of strings representing the supported extensions</para>
              <para>Acquire Image defaults to "png", "gif", "jpeg", "jpg"</para>
            </summary>
            <value>List of strings representing the supported extensions</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.ShowAcquireParams.ImageSizes">
            <summary>
              <para>
                Assign a list of the image sizes that you wish to create on upload when using
                Input.ShowAcquireImage
              </para>
              <para>Note: The AddAdditionalImage  method may be easier to use.</para>
              <para>Note: This works on uploaded images only, not linked assets.</para>
            </summary>
            <example>
              <code lang="C#">
             <![CDATA[
             
              ShowAcquireParams acquireImageParams = new ShowAcquireParams();
              acquireImageParams.Extensions = Util.MakeList( "png", "gif",  "jpeg", "jpg");
              acquireImageParams.ImageSizes = new List<Size>(){ {new Size("my_photo_300",300,300)}, {new Size("my_photo_100",100,100)}};
            
              Input.ShowAcquireImage("My Photo", "my_photo_thumbnail", acquireImageParams, displaySizeName: "my_photo_300");
                   
             
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.ShowAcquireParams.AddAdditionalImage(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              <para>
                Add an image to be scaled to the size specified when an image is selected or uploaded with the
                Input.ShowAcquireImage control.
              </para>
              <para>
                Note: Add the optional displaySizeName parameter to the ShowAcquireImage call if you want to display one
                of these images after the upload instead of the original
              </para>
            </summary>
            <param name="name">The name that will be used to refer to the size later</param>
            <param name="width">The desired width</param>
            <param name="height">The desired width</param>
            <param name="qualityPercent">The desired quality.  Default is 75 percent</param>
            <param name="preserveAspectRatio">
              Optional: Pass false if you want the thumbnail to be generated with exactly the size
              of the passed in width and height. Available in builds 3451 and up.
            </param>
            <example>
              <code lang="C#">
             <![CDATA[
             
              ShowAcquireParams acquireImageParams = new ShowAcquireParams();
              acquireImageParams.Extensions = Util.MakeList( "png", "gif",  "jpeg", "jpg");
              acquireImageParams.AddAdditionalImage("my_photo_300",300,300);
              acquireImageParams.AddAdditionalImage("my_photo_100",100,100);
            
              Input.ShowAcquireImage("My Photo", "my_photo_thumbnail", acquireImageParams, displaySizeName: "my_photo_300");
                   
             
             ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.WysiwygParams">
            <summary>
              The set of Params for enabling and disabling features in the Wysiwyg editor.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CrownPeak.CMSAPI.WysiwygParams" /> class with the default parameters.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.Stylesheet">
            <summary>
              Sets the wysiwyg stylesheet.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.PreviewStylesheet">
            <summary>
              Optional: Stylesheet to use during preview.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.BodyBackground">
            <summary>
              Sets the body background of the wysiwyg, use web color format (#ffffff).
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.DisableXHTMLOutput">
            <summary>
              Used to control the wysiwyg XHTMLOutput feature. Setting this value to true will prevent the wysiwyg from converting
              the html to xhtml.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.IndentContent">
            <summary>
              Formats the content based on html tags. Setting IndentContent to true will base the formatting on the html tags.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.DisableImageEditing">
            <summary>
              Used to turn on and off the image editing tools.  Setting this value to true will disable the image editing tools.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.DocumentNavigator">
            <summary>
              Used to turn on and off the Document Navigator. Setting the value to false will turn off the document navigator.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.DesignEditTabs">
            <summary>
              Used to turn on and off the Design/Edit tabs, whic hthe user can use to switch back and forth between code view and
              design view. Setting this value to false will disable this feature.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.brOnEnter">
            <summary>
              If this field is set to true, the wysiwyg will add a &lt;br /&gt; when the enter button is pressed.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.DisableAutoPTags">
            <summary>
              <para>
                If set to true, content will be not automatically be wrapped with paragraph (&lt;p&gt;) tags if it has not been
                properly enclosed with block tags. See also <see cref="P:CrownPeak.CMSAPI.WysiwygParams.brOnEnter" />.
              </para>
              <para>
                Ephox does not recommend setting this attribute to true as it may cause invalid HTML to be generated.
                According to TinyMCE, not using P elements as root block can severly cripple the functionality of the editor.
              </para>
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.DisableWrapCustomTagsInP">
            <summary>
              <para>
                If set to true, any custom tag specified outside of a block element will be automatically wrapped in a P tag
                (Ephox).
              </para>
              <para>
              </para>
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.WordPasteOptions">
            <summary>
              Turns on and off the Word Paste Options. When true, ephox will present the user with some paste options to sanitize
              the data coming in from a paste. This is useful when pasting from a word document.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.WordImportStyleOption">
            <summary>
              Turns on and off the Word Import Style Option.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.HtmlPasteOptions">
            <summary>
              Turns on or off the HtmlPasteOptions.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.HtmlImportStyleOption">
            <summary>
              Turns on or off the HtmlImportStyleOption.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.ImageEditingOptions">
            <summary>
              A list that determines what should be on the image editing toolbar. Possible values are: separator, rotateCCW,
              rotateCW, flipVertical, flipHorizontal, reflect, dropShadow, roundedCorners, and crop.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.HyperlinkList">
            <summary>
              Represents a list of hyper links that contain both a link, the key, and a label, the value.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.MailtoList">
            <summary>
              Represents a list of email addresses available to the MailTo Control. The Key is the email address, and the Value is
              the email label.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.ImageFolder">
            <summary>
              Sets the default folder location that displays in the aset browse window when the image upload button is clicked.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.ImageUpload">
            <summary>
              Sets the behavior when uploading an image into the wysiwyg from the user's computer. Defaults to
              RelationShipType.Attach which attaches the image to the asset.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.ImageBrowse">
            <summary>
              Sets the behavior when browsing to an image in the cms. Defaults to RelationShipType.Link which creates a link the
              image.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.LinkFolder">
            <summary>
              Sets the default folder location that displays in the asset browse window when the asset select button is clicked.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.LinkUpload">
            <summary>
              Sets the behavior when uploading a file into the wysiwyg from the user's computer. Defaults to
              RelationShipType.Attach which uploads the file into the asset.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.LinkBrowse">
            <summary>
              Sets the behavior when browsing to an asset in the cms. Defaults to RelationShipType.Link which creates a link the
              asset.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.BodyStyle">
            <summary>
              Gets or sets the style of the body tag inside the WYSIWYG editor.
            </summary>
            <value>The name of the CSS class to be applied</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.TemplateBrowserOn">
            <summary>
              Gets or sets whether to display the "Insert Template" button. Clicking the button shows a list of WYSIWYG templates
              containing HTML fragments that may be inserted.
              All developer templates in the <see cref="P:CrownPeak.CMSAPI.WysiwygParams.TemplateFolder" /> folder will show up as WYSIWYG templates.
              The asset label is the WYSIWYG template's name, and the asset body is the WYSIWYG template's HTML fragment.
            </summary>
            <value>True to show the button, false to hide it</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.TemplateFolder">
            <summary>
              Gets or sets the template folder used by <see cref="P:CrownPeak.CMSAPI.WysiwygParams.TemplateBrowserOn" />. Defaults to /System/CMS Snippets/Default
            </summary>
            <value>The path of the template folder.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.InsertHTML">
            <summary>
              Gets or sets whether the user will be allowed to insert HTML into the wysiwyg at the cursor without switching to the
              code tab with the "Insert HTML Fragment" button.
            </summary>
            <value>True to show the button, false to hide it</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.PreferredWidth">
            <summary>
              Use this when uploading images larger than 800 x 600, if you do not want them to be resized.
              Always set PreferredHeight when setting this parameter or it will be ignored.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.PreferredHeight">
            <summary>
              Use this when uploading images larger than 800 x 600, if you do not want them to be resized.
              Always set PreferredWidth when setting this parameter or it will be ignored.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.ValidChildren">
            <summary>
            Enables you to control what child elements can exist within specified parent elements.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.WysiwygParams.ExtraPlugins">
            <summary>
            Adds extra plugins to the current configuration
            </summary>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.ExtraPlugins = "ExtraPlugin1,ExtraPlugin2"; 
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddButtons(System.Collections.Generic.List{CrownPeak.CMSAPI.FeatureType})">
            <summary>
              This function is used to add a set of buttons to the wysiwyg. The order that they are added is the order that they
              will displayed on the screen.
            </summary>
            <param name="buttons">The list of buttons.</param>
            <example>
              <code lang="c#">
            <![CDATA[
             List<FeatureType> buttons = new List<FeatureType>();
             buttons.Add(FeatureType.copy);
             buttons.Add(FeatureType.cut);
             buttons.Add(FeatureType.paste);
             buttons.Add(FeatureType.Separator);
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddButtons(buttons);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);    
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddButton(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              This function is used to add a button to the wysiwyg.
            </summary>
            <param name="button">The button to add.</param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddButton(FeatureType.copy);
             wParams.AddButton(FeatureType.cut);
             wParams.AddButton(FeatureType.paste);
             wParams.AddButton(FeatureType.Separator);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);    
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddFontGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds fontstyle, fontface and fontsize buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddColorGroup();
             wParams.AddCutPasteGroup();
             wParams.AddFontGroup(FeatureType.None);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddCutPasteGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds cut, cuthtml and paste buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.Add(FeatureType.fontstyle);
             wParams.Add(FeatureType.fontface);
             wParams.Add(FeatureType.fontsize);
             wParams.AddCutPasteGroup(FeatureType.None);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddUndoGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds undo, redo buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddJustifyGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds justify left, justify center, justify right buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddColorGroup();
             wParams.AddCutPasteGroup();
             wParams.AddFontGroup();
             wParams.AddUndoGroup(FeatureType.None);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddLinkGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds link, remove link and make anchor buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddColorGroup();
             wParams.AddCutPasteGroup();
             wParams.AddFontGroup();
             wParams.AddLinkGroup(FeatureType.None);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddListGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds unordered list and ordered list buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddColorGroup();
             wParams.AddCutPasteGroup();
             wParams.AddFontGroup();
             wParams.AddListGroup(FeatureType.None);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddColorGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds fore color and back color buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddButton(FeatureType.copy);
             wParams.AddButton(FeatureType.cut);
             wParams.AddButton(FeatureType.paste);
             wParams.AddButton(FeatureType.Separator);
             wParams.AddColorGroup(FeatureType.None);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);        
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddIndentGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds indent and outdent buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddColorGroup();
             wParams.AddIndentGroup();
             wParams.AddCutPasteGroup();
             wParams.AddFontGroup();
             Input.ShowWysiwyg("Page Body", "page_body", wParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddSimpleStyleGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds bold, italic and underline buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddColorGroup();
             wParams.AddCutPasteGroup();
             wParams.AddFontGroup();
             wParams.AddSimpleStyleGroup(FeatureType.None);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddExtendedSyleGroup(CrownPeak.CMSAPI.FeatureType)">
            <exclude />
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddExtendedStyleGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds strikethrough, superscript and subscript buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddColorGroup();
             wParams.AddCutPasteGroup();
             wParams.AddFontGroup();
             wParams.AddExtendedSyleGroup(FeatureType.None);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.WysiwygParams.AddStyleGroup(CrownPeak.CMSAPI.FeatureType)">
            <summary>
              Adds bold, italic, underline, strikethrough, superscript and subscript buttons buttons
            </summary>
            <param name="endSeparator">
              Optional:   defaults to Separator.  Set to FeatureType.None if using at the end of the
              toolbar.
            </param>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = new WysiwygParams();
             wParams.AddColorGroup();
             wParams.AddCutPasteGroup();
             wParams.AddFontGroup();
             wParams.AddStyleGroup(FeatureType.None);
             Input.ShowWysiwyg("Page Body", "page_body", wParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.FeatureType">
            <summary>
              A set of Wysiwyg Editor Features.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.None">
            <summary>
              No feature.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.Separator">
            <summary>
              Creates a separator.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.SeparatorInDesignMode">
            <summary>
              Creates a separator in design mode.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.NewRow">
            <summary>
              Creates a new row to add FeatureTypes to.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.NewRowInDesignMode">
            <summary>
              Creates a new row in design mode.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.fontstyle">
            <summary>
              Represents the Font Style button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.fontface">
            <summary>
              Represents the font face button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.fontsize">
            <summary>
              Represents the font size control.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.bold">
            <summary>
              Represents the bold button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.italic">
            <summary>
              Represnts the italic button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.underline">
            <summary>
              Represents the underline button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.cut">
            <summary>
              Represents the cut button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.cuthtml">
            <summary>
              Represents the cut html button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.copy">
            <summary>
              Represents the copy button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.paste">
            <summary>
              Represents the paste button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.undo">
            <summary>
              Represents the undo button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.redo">
            <summary>
              Represents the redo button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.link">
            <summary>
              Represents the Link button. Which allows the user to add a link to the selected text.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.removelink">
            <summary>
              Represents the remove link button which removes a link.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.anchorlink">
            <summary>
              anchorlink is no longer used.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.makeanchor">
            <summary>
              Represents the makeanchor button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.symbol">
            <summary>
              Represents the Symbol selector tool, which allows you to select characters that are not typically accessible from the
              keyboard.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.find">
            <summary>
              Represents the Find button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.sec508">
            <summary>
              Represents the Accessibility features.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.accessibilityasyoutype">
            <summary>
              Represents the Accessiblity as you type button. Clicking the button on, will turn on a feature that will identify any
              accessibility issues as the user types into wysiwyg.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.popout">
            <summary>
              Represents the popout button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.justifyleft">
            <summary>
              Represents the left justify button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.justifycenter">
            <summary>
              Represents the center justify button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.justifyright">
            <summary>
              Represents the right justify button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.unorderedlist">
            <summary>
              Represents the unordered list button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.orderedlist">
            <summary>
              Represents the ordered list button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.indent">
            <summary>
              Represents the indent button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.outdent">
            <summary>
              Represents the outdent button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.strikethrough">
            <summary>
              Represents the strikethrough button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.superscript">
            <summary>
              Represents the superscript button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.subscript">
            <summary>
              Represents the subscript button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.forecolor">
            <summary>
              Represents the forecolor button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.backcolor">
            <summary>
              Represents the backcolor button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.format">
            <summary>
              Represents the format button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.formatpainter">
            <summary>
              Represents the format painter button. Allows the user to highlight text and copy the style and then apply it to
              another set of text.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.removeformatting">
            <summary>
              Represents the remove formatting button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.pagebreak">
            <summary>
              Represents the pagebreak button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.blockquote">
            <summary>
              Represents the blockquote button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.mailto">
            <summary>
              Represents the mailto button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.upload">
            <summary>
              Represents the upload button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.table">
            <summary>
              Represents the table button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.edittable">
            <summary>
              Represents the edittable button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.altertable">
            <summary>
              Represents the altertable button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.tableborder">
            <summary>
              Represents the tableborder button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.hrule">
            <summary>
              Represents a horizontal rule.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.datetime">
            <summary>
              Represents the datetime button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.insertcomment">
            <summary>
              Represents the insert comment button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.wordcount">
            <summary>
              Represents the word count button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.paragraphmarker">
            <summary>
              Represents the paragraph marker button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.forms">
            <summary>
              Represents the forms control.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.thesaurus">
            <summary>
              Represents the thesaurus button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.createsection">
            <summary>
              Represents the create section button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.removesection">
            <summary>
              Represents the remove section button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.import">
            <summary>
              Represents the import button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.importword">
            <summary>
              Represents the import word button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.objectinsert">
            <summary>
              Represents the object insert button.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.restoreautosave">
            <summary>
              Represents the restore autosave button. Enables an autosave feature which saves changes locally so if a problem
              occurs the changes are not lost.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.spellcheck">
            <summary>
              Represents the spellcheck button (if supported).
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.FeatureType.search">
            <summary>
              Represents the Search button.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.RelationshipType">
            <summary>
              Use this to see if this is related to the parent asset as an
              a link to an asset or if it is an attachment (not an asset)
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.RelationshipType.None">
            <summary>
              This feature is disabled.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.RelationshipType.Attach">
            <summary>
              Treat the related asset as an attachment.  If it is an asset in the CMS, it will be copied to
              the current asset's attachment area.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.RelationshipType.Link">
            <summary>
              Treat the related asset as a link to a CMS asset.  If it is an upload file, it will automatically be saved into the
              CMS as an asset.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.PickerViewType">
            <summary>
              Use this to decide the type of picker view used in the Acquire window
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PickerViewType.NotSet">
            <summary>
              Default Picker View
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PickerViewType.FileView">
            <summary>
              File View
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PickerViewType.DigitalAssetView">
            <summary>
              Digital Asset Management (DAM) View
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PickerViewType.CollectionView">
            <summary>
              Collections View
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.ListPanelType">
            <summary>
              Types of list panels used in <see cref="!:Input.NextPanel(string, ListPanelType, int?, int?, SortOrder)" />
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.ListPanelType.Regular">
            <summary>
              A two-column panel, with the left column containing buttons to insert, delete, and move panels.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.ListPanelType.InlineButtons">
            <summary>
              A one-column panel, with buttons to insert, delete, and move panels directly above and below each panel.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.ListPanelType.MoveOnly">
            <summary>
              A one-column panel, with buttons only to move panels directly above and below each panel.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.ListPanelType.Sorted">
            <summary>
              A two-column panel, with the left column containing buttons to insert and delete panels. Sort order must be
              specified.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.IPublishing">
            <summary>
              If a context implements this, it means that the template MAY render during publishing and this would contain
              information
              that is relevant to publishing including information needed to render live links.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.IPublishing.PublishingPackage">
            <summary>
              Contains information about the current publishing package while publishing
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.IPublishing.IsPublishing">
            <summary>
              Are we publishing right now?
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.IPublishing.PublishingLoopNumber">
            <summary>
              The current publishing loop number.  Usually the same as page number, but it always starts at 1.
              Goes hand-in-hand with "PublishAgain".  Use this to see which iteration you are on if you are using PublishAgain to
              continue publishing.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.IPublishing.LayoutName">
            <summary>
              Name of the layout file such as output.aspx or xml_output.aspx.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.IPublishing.PublishingStatus">
            <summary>
              The status that corresponds to the current publishing destination.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.IPublishing.RenderPublishLinks">
            <summary>
              Set this to true, if you want generated links to be publish links during preview.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.IPublishing.IsGeneratingPublishLinks">
            <summary>
              A read only property that tells whether asset.GetLink() will return a live link or a preview link.  The rules are
              different
              depending on the context that you are in.
              NOTE: Does not apply to Util.ReplaceAttachments() or UploadedFile.GetLink() those always return a live link if
              package info is available.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.LassoParams">
            <summary>
              Encapsulates a set of parameters used with image manipulation such as scaling and croping.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.LassoParams.ScaleWidth">
            <summary>
              The value with which to scale the width.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.LassoParams.ScaleHeight">
            <summary>
              The value with which to scale the height.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.LassoParams.BoxLeft">
            <summary>
              The x coordinate of the left side of the box.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.LassoParams.BoxTop">
            <summary>
              The y coordinate of the top of the box.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.LassoParams.BoxWidth">
            <summary>
              The width of the box.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.LassoParams.BoxHeight">
            <summary>
              The height of the box.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.LassoParams.ThumbnailField">
            <summary>
              The name of the field to store the cropped image.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.LinkType">
            <summary>
              Link types to pass to <see cref="!:Asset.GetLink()" />.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.LinkType.Unspecified">
            <summary>
              For serialization only.  Don't use.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.LinkType.Default">
            <summary>
              Represents a general link to an asset/webpage.  During preview, the link will be rendered to link to
              the asset within the confines of the CMS.  Upon publishing the asset, the links will be render to link
              to the page out in the wild known as the WWW.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.LinkType.Include">
            <summary>
              Represents a relative link to an asset/webpage.  This is best used when linking to assets that contain CSS and
              Javascript using
              the html 'rel' tag.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.LinkType.Binary">
            <summary>
              A link which serves up raw content. Useful during preview when you don't want preview related HTML added.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.LinkType.Internal">
            <summary>
            Represents an internal link.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.UtilityLinkType">
            <summary>
              Used for specifying a Utility link type.  Used in conjuction with Asset.GetCmsUtilityLink
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.UtilityLinkType.Unspecified">
            <summary>
              For serialization only.  Don't use.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.UtilityLinkType.Edit">
            <summary>
              Creates a link that when clicked will direct the user to the input screen for the corresponding asset.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.UtilityLinkType.Internal">
            <summary>
              <![CDATA[Creates a link of the form /<ClientName>/cpt_internal/1234/1235/1439 ]]>
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.InputLinkType">
            <summary>
              Types of links that can be used in an input form.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.InputLinkType.Unspecified">
            <summary>
              For serialization only.  Don't use.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.InputLinkType.Preview">
            <summary>
              Navigates to preview an asset
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.InputLinkType.Edit">
            <summary>
              Navigates to edit an asset
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.InputLinkType.EditForm">
            <summary>
              Navigates to the full edit form for an asset
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.InputLinkType.EditTab">
            <summary>
              Shows the asset's edit screen in a tab
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.MessageType">
            <summary>
              Represents the type of a ShowMessage box.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.MessageType.Basic">
            <summary>
              The default message box.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.MessageType.Warning">
            <summary>
              The warning/severe message box.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.Meta">
            <summary>
              The contents of the asset's metadata.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Meta.Cache">
            <summary>
            The cached metadata.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Meta.IsCached">
            <summary>
            Check if metadata is cached.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Meta.Item(System.String)">
            <summary>
              Gets the <see cref="T:System.String" /> with the specified key.
            </summary>
            <param name="key">The field name</param>
            <value>The field value</value>
            <remarks>
              <para>This is a read-only method.</para>
            </remarks>
            <example>
              <code> 
             <![CDATA[
              
              //reading example 
              
              string value = asset.Meta["key"];
            ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.PaginateResult">
            <summary>
              Returns the results of the paginate call. You can enumerate over it to get the sub list items.
            </summary>
            <example>
              <code lang="C#"><![CDATA[
             List<Asset> pressReleases = folder.GetFileList();
             PaginateResult result = Util.Paginate(pressReleases, 10);
             // Print links to press releases on the current page
             foreach(Asset child in result)
             {
               Out.WriteLine("<a href=\"{0}\">{1}</a><br/>",child.GetLink(), child.Label);
             }
             
             // Print links to other pages
            
             foreach (PageLink link in result.PaginatedLinks)
             {
               if (link.IsCurrent())
               {
                 Out.WriteLine("{0}|", link.PageNumber);   
               }
               else
               {
                 Out.WriteLine("<a href=\"{0}\">{1}</a>|", link, link.PageNumber);
               }
             }
             ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.PaginatePanelResult">
            <summary>
              Returns the results of the paginate call. You can enumerate over it to get the sub list items.
            </summary>
            <example>
              <code lang="C#"><![CDATA[
             List<PanelEntry> panels = asset.GetPanels("field");
             PaginatePanelResult result = Util.Paginate(panels, 10);
             // Print links to press releases on the current page
             foreach(PanelEntry panel in result)
             {
               Out.WriteLine("<p>{0}</p>", panel["field"]);
             }
             
             // Print links to other pages
            
             foreach (PageLink link in result.PaginatedLinks)
             {
               if (link.IsCurrent())
               {
                 Out.WriteLine("{0}|", link.PageNumber);
               }
               else
               {
                 Out.WriteLine("<a href=\"{0}\">{1}</a>|", link, link.PageNumber);
               }
             }
             ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginateResultBase`1.PaginatedLinks">
            <summary>
              A collection of links to each of the pages.  You may enumerate over this collection
              with a foreach as in the example
            </summary>
            <example>
              <code lang="C#"><![CDATA[
             List<Asset> pressReleases  = folder.GetFileList();
             PaginateResult result = Util.Paginate(pressReleases, 10);
             
             // Print links to other pages
            
             foreach (PageLink link in result.PaginatedLinks)
             {
               if (link.IsCurrent())
               {
               Out.WriteLine("{0}|", link.PageNumber);   
               }
               else
               {
               Out.WriteLine("<a href=\"{0}\">{1}</a>|", link, link.PageNumber);
               }
             }
             ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginateResultBase`1.PageTotal">
            <summary>
              The total number of pages that the paginated list requires
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginateResultBase`1.Count">
            <summary>
              After the call to Util.Paginate, this will return the number of items in the sub list for the current page.
            </summary>
            <example>
              <code lang="C#"><![CDATA[
             List<Asset> pressReleases  = folder.GetFileList();
             PaginateResult result = Util.Paginate(pressReleases, 10);
             
             Out.WriteLine("The number of items on this page is {0}",result.Count); 
            
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PaginateResultBase`1.GetEnumerator">
            <summary>
              This implements the IEnumerable interface so that you may enumerate over the sub lists created during the call to
              Util.Paginate
              Do not call this directly.  Use a foreach as in the example
            </summary>
            <returns>A single item from the collection.</returns>
            <example>
              <code lang="C#"><![CDATA[
             List<Asset> pressReleases  = folder.GetFileList();
             PaginateResult result = Util.Paginate(pressReleases, 10);
             
             foreach(Asset child in result)
             {
              Out.WriteLine("<a href=\"{0}\">{1}</a><br/>",child.GetLink(), child.Label);
             }
             
             ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.PaginateFieldResult">
            <summary>
              The result returned from <seealso cref="M:CrownPeak.CMSAPI.Util.Paginate(CrownPeak.CMSAPI.Asset,System.String)" /> and
              <seealso cref="M:CrownPeak.CMSAPI.Util.Paginate(System.Collections.Generic.List{CrownPeak.CMSAPI.Asset},System.Int32)" /> contains various
              information such as the content from the current page and the links to the other pages.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PaginateFieldResult._currentPageNumber">
            <summary>
              The Current Page number
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PaginateFieldResult.pages">
            <summary>
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.PaginateFieldResult.#ctor(System.String[],System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:CrownPeak.CMSAPI.PaginateFieldResult" /> class.
            </summary>
            <param name="pages">The pages.</param>
            <param name="currentPage">The current page.</param>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginateFieldResult.CurrentPageContent">
            <summary>
              Gets or sets the content of the current page.
            </summary>
            <value>The content of the current page.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginateFieldResult.PaginatedLinks">
            <summary>
              A collection of links to each of the pages.  You may enumerate over this collection
              with a foreach as in the example.
            </summary>
            <example>
              <code lang="C#"><![CDATA[
             PaginateFieldResult result = Util.Paginate(asset, "Name");
             
             // Print links to other pages
            
             foreach (PageLink link in result.PaginatedLinks)
             {
               if (link.IsCurrent())
               {
               Out.WriteLine("{0}|", link.PageNumber);   
               }
               else
               {
               Out.WriteLine("<a href=\"{0}\">{1}</a>|", link, link.PageNumber);
               }
             }
             ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginateFieldResult.PaginatedLink">
            <summary>
              Please Don't use this.  Use PaginatedLinks instead.  This will be removed in a future build.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.PaginatedLinks">
            <summary>
              A collection of PageLinks created to point at the pages that are needed to display a list that was paginated with
              Util.Paginate.  See the examples in PaginateResult or Util.Paginate.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginatedLinks.Current">
            <summary>
              Return the current link
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginatedLinks.First">
            <summary>
              Return the first link
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginatedLinks.Last">
            <summary>
              Return the last link
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginatedLinks.Next">
            <summary>
              Return the next link after the current page
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginatedLinks.Previous">
            <summary>
              Return the link previous to the current page
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PaginatedLinks.Count">
            <summary>
              The total number of links
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.PaginatedLinks.GetEnumerator">
            <summary>
              Do not call directly.  Makes it possible to enumerate over the collection with a foreach.
            </summary>
            <returns>A single item from the collection.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            List<Asset> children = asset.GetFileList();    
            PaginateResult result = Util.Paginate(children, 5);
             int i = 0;
             foreach (PageLink link in result.PaginatedLinks)
             {        
               Out.WriteLine("<a href=\"{0}\">{1}</a>",link.ToString(), ++i);
             }        
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PaginatedLinks.LinkAt(System.Int32)">
            <summary>
              Retrieves a link by index where 0 points to page 1, 1 points to page 2, etc.
            </summary>
            <param name="index">The index corresponding to the page number. This value is offset by one, so index 0 is page 1.</param>
            <returns>
              The <see cref="T:CrownPeak.CMSAPI.PageLink" /> corresponding to the requested page. If the requested page does not exist, it will
              return a <see cref="T:CrownPeak.CMSAPI.PageLink" /> with empty fields.
            </returns>
            <example>
              <code lang="c#">
            <![CDATA[
            List<Asset> children = asset.GetFileList();    
            PaginateResult result = Util.Paginate(children, 5);
             for(int i = 0; i < result.PaginatedLinks.Count; i++)
             {      
               Out.WriteLine("<a href=\"{0}\">{1}</a>", result.PaginatedLinks.LinkAt(i).ToString(), ++i);
             }        
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PaginatedLinks.HasNext">
            <summary>
              Used to check if there are anymore links beyond the current page.
            </summary>
            <returns>if another page exists returns <c>true</c>; otherwise <c>false</c></returns>
            <example>
              <code lang="c#">
            <![CDATA[
            List<Asset> children = asset.GetFileList();    
            PaginateResult result = Util.Paginate(children, 5);
            
            if(result.PaginatedLinks.HasPrevious())
            {
              Out.WriteLine("<a href=\"{0}\">&lt; Previous</a> | ", result.PaginatedLinks.Previous);
            }
            
            int i = 0;
            foreach (PageLink link in result.PaginatedLinks)
            { 
              if(!link.IsCurrent)
              {
                Out.WriteLine("<a href=\"{0}\">{1}</a> | ", link.ToString(), ++i);
              }
              else
              {
                Out.WriteLine("{0} | ", ++i);
              }
            }
            if(result.PaginatedLinks.HasNext())
            {
              Out.WriteLine("<a href=\"{0}\">Next &gt;</a> | ", result.PaginatedLinks.Next);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PaginatedLinks.HasPrevious">
            <summary>
              Used to check if there are anymore links prior the current page.
            </summary>
            <returns>If the current page has a previous page HasPrevious will return <c>true</c>; otherwise <c>false</c></returns>
            <example>
              <code lang="c#">
            <![CDATA[
            List<Asset> children = asset.GetFileList();    
            PaginateResult result = Util.Paginate(children, 5);
            
            if(result.PaginatedLinks.HasPrevious())
            {
              Out.WriteLine("<a href=\"{0}\">&lt; Previous</a> | ", result.PaginatedLinks.Previous);
            }
            
            int i = 0;
            foreach (PageLink link in result.PaginatedLinks)
            { 
              if(!link.IsCurrent)
              {
                Out.WriteLine("<a href=\"{0}\">{1}</a> | ", link.ToString(), ++i);
              }
              else
              {
                Out.WriteLine("{0} | ", ++i);
              }
            }
            if(result.PaginatedLinks.HasNext())
            {
              Out.WriteLine("<a href=\"{0}\">Next &gt;</a> | ", result.PaginatedLinks.Next);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.PageLink">
            <summary>
              A link contained in the PaginatedLinks collection.  Returned while enumerating over the
              paginatedLinks collection.  Use the PageNumber property to get the page number associated with this link.
              Call ToString() to get the actual link.
            </summary>
            <example>
              <code lang="C#"><![CDATA[
             List<Asset> pressReleases  = folder.GetFileList();
             PaginateResult result = Util.Paginate(pressReleases, 10);
             
             // Print links to other pages
            
             foreach (PageLink link in result.PaginatedLinks)
             {
               if (link.IsCurrent())
               {
               Out.WriteLine("{0}|", link.PageNumber);   
               }
               else
               {
               Out.WriteLine("<a href=\"{0}\">{1}</a>|", link, link.PageNumber);
               }
             }
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PageLink.#ctor(System.String,System.Int32,System.Int32)">
            <exclude></exclude>
        </member>
        <member name="P:CrownPeak.CMSAPI.PageLink.PageNumber">
            <summary>
              The page number of this link.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.PageLink.ToString">
            <summary>
              Returns the actual link as a string
            </summary>
            <returns>The string representation of the link.</returns>
            <example>
              <code lang="C#"><![CDATA[
            PaginateFieldResult result = Util.Paginate(asset, "Name");
            
            // Print links to pages
            foreach (PageLink link in result.PaginatedLinks)
            {
              if (link.IsCurrent())
              {
              Out.WriteLine("{0}|", link.PageNumber);   
              }
              else
              {
              Out.WriteLine("<a href=\"{0}\">{1}</a>|", link, link.PageNumber);
              }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PageLink.IsCurrent">
            <summary>
              Is this a link to the current page
            </summary>
            <returns>If this link is the current page returns <c>true</c>; otherwise <c>false</c></returns>
            <example>
              <code lang="C#"><![CDATA[
            PaginateResult result = Util.Paginate(asset, "Name");
            // Print links to press releases on the current page
            foreach(Asset child in result)
            {
             Out.WriteLine("<a href=\"{0}\">{1}</a><br/>",child.GetLink(), child.Label);
            }
            
            // Print links to other pages
            foreach (PageLink link in result.PaginatedLinks)
            {
              if (link.IsCurrent())
              {
              Out.WriteLine("{0}|", link.PageNumber);   
              }
              else
              {
              Out.WriteLine("<a href=\"{0}\">{1}</a>|", link, link.PageNumber);
              }
            }
            ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.PanelEntry">
            <summary>
              Represents a single Panel within a ListPanel
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PanelEntry._postfix">
            <exclude></exclude>
        </member>
        <member name="M:CrownPeak.CMSAPI.PanelEntry.#ctor(CrownPeak.CMSAPI.IContentProperties,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:CrownPeak.CMSAPI.PanelEntry" /> class.
            </summary>
            <param name="contentProperties">The content properties.</param>
            <param name="postfix">The postfix.</param>
        </member>
        <member name="P:CrownPeak.CMSAPI.PanelEntry.UploadedFiles">
            <summary>
              The set of uploaded files related to this PanelEntry.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PanelEntry.Item(System.String)">
            <summary>
              <para>Gets the field associated with this panel instance.</para>
              <para>Note: Do not include the post fix ":..." part of the name.  Use the shortname "my_field", not "my_field:1"</para>
            </summary>
            <param name="key">The name of the field.</param>
            <returns></returns>
        </member>
        <member name="P:CrownPeak.CMSAPI.PanelEntry.Raw">
            <summary>
              <para>
                Gets the raw contents of the field associated with this panel instance. Automatically-inserted markup code is
                removed.
              </para>
              <para>Note: Do not include the post fix ":..." part of the name.  Use the shortname "my_field", not "my_field:1"</para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:CrownPeak.CMSAPI.PanelEntry.ContentProperties">
            <summary>
              The asset that contains or will contain the metadata associated with the panel entries.  Usually the current asset.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.PanelEntry.GetFieldName(System.String)">
            <summary>
              Returns the full field name of a field in the list panel, accounting for proper index.
            </summary>
            <param name="key">The base field name</param>
            <returns>The full field name</returns>
            <example>
              post_input.aspx
              <code><![CDATA[
            foreach (var panel in context.InputForm.GetPanels("list_counter"))
            {
              if (string.IsNullOrWhiteSpace(panel["list_item"]))
              {
                context.ValidationErrorFields.Add(panel.GetFieldName("list_item"), "List item is a required field.");
              }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PanelEntry.GetPanels(System.String,CrownPeak.CMSAPI.SortOrder)">
            <summary>
              Creates a sublist from the current list.
            </summary>
            <param name="name">The name of the panel</param>
            <param name="sort">Optional: Sorts the data before returning.  Does not work if the source is an inputForm</param>
            <returns>List of PanelEntry objects containing panels.</returns>
            <example>
              <code lang="C#"> 
             <![CDATA[
             
             List<PanelEntry> panels = asset.GetPanels("panelName");
             
             if (panels.Count > 0)
             {
               // Get the upload called "thumbnail" from the first panel
               UploadedFile file = panels[0].UploadedFiles["thumbnail"];
               if (file != null) // save another copy
                 panels[0].SaveUploadedFile("save_thumbnail", file);
              }
             
            
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PanelEntry.SaveUploadedFile(System.String,CrownPeak.CMSAPI.UploadedFile)">
            <summary>
              Save an uploaded file with the given key to the panel in the context of the backing asset or current asset.
              Note: If this is in the PostInputContext and you go the panels from an InputForm, the
              data will be saved in the current asset.
              <para>Note: Do not include the post fix ":..." part of the name.  Use the shortname "my_field", not "my_field:1"</para>
            </summary>
            <param name="key">The key where we are going to save this file</param>
            <param name="uploadedFile">The UploadedFile object</param>
            <example>
              <code lang="C#"> 
             <![CDATA[
             
             List<PanelEntry> panels = asset.GetPanels("panelName");
             
             if (panels.Count > 0)
             {
               // Get the upload called "thumbnail" from the first panel
               UploadedFile file = panels[0].UploadedFiles["thumbnail"];
               if (file != null) // save another copy
                 panels[0].SaveUploadedFile("save_thumbnail", file);
              }
             
            
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PanelEntry.ClearUpload(System.String)">
            <summary>
              Clears the specified upload's meta data from the panel.  If there is an array
              of uploads with this name, they are all removed unless a specific element is named.
              <para>Note: Do not include the post fix ":..." part of the name.  Use the shortname "my_field", not "my_field:1"</para>
            </summary>
            <param name="key">The key used to identify the upload that you are clearing.</param>
            <example>
              <code lang="C#">
            <![CDATA[
            <% panel.ClearUpload("my_photo"); %>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PanelEntry.CreateThumbnail(CrownPeak.CMSAPI.Img,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
              <para>
                Creates a thumbnail of the specified size from the currently loaded image.
                A ThumbnailKey is required.  The resulting image will be stored on the panel.
              </para>
              <para>
                Note: Due to memory limitations, the pixel count of the source image cannot be more than 10 million.
              </para>
              <para>Note: Do not include the post fix ":..." part of the name.  Use the shortname "my_field", not "my_field:1"</para>
            </summary>
            <param name="img">The image to be used to create the thumbnail</param>
            <param name="thumbnailKey">The Key used to refer to the thumbnail later as part of the asset's content.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="qualityByPercent">
              Optional: The Quality of the saved JPG as a percent.  Higher numbers have higher
              quality, but also bigger sizes.
            </param>
            <returns><see cref="T:CrownPeak.CMSAPI.ImgResult" />An ImgResult.</returns>
            <example>
              <code lang="C#">
             <![CDATA[
              // Usually called from post_input.aspx
              List<PanelEntry> panels = context.InputForm.GetPanels("imageList");
            
              foreach(PanelEntry panel in panels)
              {
                if (panel.UploadedFiles["my_photo"] != null)
                {
                  Img img = Img.Load(panel.UploadedFiles["my_photo"]);
                  if (!img.HasError)
                  {
                    ImgResult result = panel.CreateThumbnail(img, "my_photo_thumbnail_panelpost_50_", 50,50);
                    if (result.HasError)
                    {
                      panel["Error"] = result.ErrorMessage;
                    }
                  }
                }
              }
             
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PanelEntry.CreateThumbnail(CrownPeak.CMSAPI.UploadedFile,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
              <para>
                Creates a thumbnail of the specified size from the UploadedFile, it must be an image.
                A ThumbnailKey is required.  The resulting image will be stored on the panel.
              </para>
              <para>
                Note: Due to memory limitations, the pixel count of the source image cannot be more than 10 million.
              </para>
              <para>Note: Do not include the post fix ":..." part of the name.  Use the shortname "my_field", not "my_field:1"</para>
            </summary>
            <param name="uploadedFile">The image to be used to create the thumbnail</param>
            <param name="thumbnailKey">The Key used to refer to the thumbnail later as part of the asset's content.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="qualityByPercent">
              Optional: The Quality of the saved JPG as a percent.  Higher numbers have higher
              quality, but also bigger sizes.
            </param>
            <returns><see cref="T:CrownPeak.CMSAPI.ImgResult" />An ImgResult.</returns>
            <example>
              <code lang="C#">
             <![CDATA[   
              // Usually called from post_input.aspx     
              List<PanelEntry> panels = context.InputForm.GetPanels("imageList");
            
              foreach(PanelEntry panel in panels)
              {
                if (panel.UploadedFiles["my_photo"] != null)
                {
                  ImgResult result = panel.CreateThumbnail(panel.UploadedFiles["my_photo"], "my_photo_thumbnail_panelpost_50_", 50,50);
                  if (result.HasError)
                  {
                    panel["Error"] = result.ErrorMessage;
                  }
                }
              }
             
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PanelEntry.CropImage(CrownPeak.CMSAPI.Img,System.String,CrownPeak.CMSAPI.LassoParams,System.Int32)">
            <summary>
              Crop the current image using the box defined by x, y, xx, yy and scaling to width and height.  Saving on the panel
              using thumbnailKey as a fieldname.
            </summary>
            <param name="img">The image from which the result will be cropped</param>
            <param name="thumbnailKey">A key used to save the result</param>
            <param name="lParams">LassoParams that specify how to crop and scale the image</param>
            <param name="qualityByPercent">Optional: The quality of the resulting image as a percent. Defaults to 75</param>
            <returns>ImgResult.  Contains the new Img.  Use HasError to check for errors.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             LassoParams lParams = new LassoParams();
             lParams.BoxHeight = 200;
             lParams.BoxLeft = 150;
             lParams.BoxTop = 150;
             lParams.BoxWidth = 50;
             lParams.ScaleHeight = 50;
             lParams.ScaleWidth = 75;
             Asset imageAsset = Asset.Load(" /Assets/images 2/gundam.jpg");
             Img imageToCrop = Img.Load(imageAsset);      
             ImgResult result = context.PanelEntry.CropImage(imageToCrop, "cropped_image", lParams, 100);    
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PanelEntry.CropImage(CrownPeak.CMSAPI.UploadedFile,System.String,CrownPeak.CMSAPI.LassoParams,System.Int32)">
            <summary>
              Crop the current image stored in the UploadedFile using the box defined by x, y, xx, yy and scaling to width and
              height.  Saving on the panel using thumbnailKey as a fieldname.
            </summary>
            <param name="uploadedFile">UploadedFile that contains an Image</param>
            <param name="thumbnailKey">A key used to save the result</param>
            <param name="lParams">
              Optional: if panel is part of an InputForm in post input. LassoParams that specify how to crop
              and scale the image
            </param>
            <param name="qualityByPercent">Optional: The quality of the resulting image as a percent. Defaults to 75</param>
            <returns>ImgResult.  Contains the new Img.  Use HasError to check for errors.</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            // post_input.aspx:
            // Take the file uploaded with the name "original_image" crop it and store it with the name "cropped_Image"
             LassoParams lParams = new LassoParams();
             lParams.BoxHeight = 200;
             lParams.BoxLeft = 150;
             lParams.BoxTop = 150;
             lParams.BoxWidth = 50;
             lParams.ScaleHeight = 50;
             lParams.ScaleWidth = 75;
            
            ImgResult img = context.PanelEntry.CropImage(context.InputForm.UploadedFiles["original_image"], "cropped_image", lParams, 100);
            if (img.HasError)
            {
              context.Error "Crop error " + img.ErrorMessage;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PanelEntry.GetLassoParams(System.String)">
            <summary>
              Get lasso params stored the last time you did a crop in post_input
            </summary>
            <param name="uploadFieldName">The name of the upload field</param>
            <returns>LassoParams or null, if not found.</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.AssetPanelEntry">
            <summary>
              Represents a single Panel within a ListPanel that was intialized from the children of a folder.
              Returned in a List by calling asset.GetPanelsFromFolder()
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.AssetPanelEntry.ChildAsset">
            <summary>
              The asset associated with the current PanelEntry.
              by GetPanelsFromFolder.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.AssetPanelEntry.Item(System.String)">
            <summary>
              <para>Gets the field associated with this panel instance.</para>
              <para>Note: Do not include the post fix ":..." part of the name.  Use the shortname "my_field", not "my_field:1"</para>
            </summary>
            <param name="key">Name of the field</param>
            <returns></returns>
        </member>
        <member name="P:CrownPeak.CMSAPI.AssetPanelEntry.Raw">
            <summary>
              <para>
                Gets the raw contents of the field associated with this asset panel instance. Automatically-inserted markup
                code is removed.
              </para>
              <para>Note: Do not include the post fix ":..." part of the name.  Use the shortname "my_field", not "my_field:1"</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.AssetPanelEntry.GetPanelsFromFolders(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.AssetParams,CrownPeak.CMSAPI.AssetType,System.String,System.String)">
            <summary>
              Gets a sublist from the current panel using folder children.  See asset.GetPanelsFromFolders
            </summary>
            <param name="folder">The folder whose children we will use to initialize the list</param>
            <param name="panelName">The name of the panel</param>
            <param name="assetParams">Optional:  Used like in GetFileList or GetFolderList to  filter data, etc.</param>
            <param name="type">
              Optional:  Can be used to get back only a specific type of child - file or folder, defaults to
              AssetType.Unspecified which returns both
            </param>
            <param name="labelName">
              Optional:  The string that will be used to store the folder's label when we store the panel
              data. Use lower case. Defaults to panelName + ".label"
            </param>
            <param name="idName">
              Optional:  The string that will be used to store the folder's id when we store the panel data. Use
              lower case. Defaults to panelName + ".id"
            </param>
            <returns>A List of AssetPanelEntry objects</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.Params">
            <summary>
              Base class of <see cref="T:CrownPeak.CMSAPI.AssetParams" /> and <see cref="T:CrownPeak.CMSAPI.FilterParams" />. Do not use directly.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.Params.ExcludeProjectTypes">
            <summary>
              Whether to include projects, libraries and other special types when calling GetFilterList
              Defaults to true.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Params.#ctor">
            <summary>
              Base constructor added to make sure that ExcludeProjectTypes defaults to true all the time.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Params.SortOrder">
            <summary>
              The sort order that will be used in the upcoming query.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Params.Limit">
            <summary>
              The maximum number of assets to return.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Params.FilterStatus">
            <summary>
              <para>
                Names of the workflow statuses to filter on.
                If the ExcludeFilterStatus parameter is set (not null or empty), the FilterStatus parameter is ignored.
              </para>
              <para>
                Warning, this may cause undesirable effects during publishing.  Use Caution.
              </para>
            </summary>
            <value>The filter status.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Params.ExcludeFilterStatus">
            <summary>
              <para>
                List of strings containing the names of statuses that should not be included in the result set.
                If this parameter is set (not null or empty), the FilterStatus parameter is ignored.
              </para>
              <para>
                Warning, this may cause undesirable effects during publishing.  Use Caution.
              </para>
            </summary>
            <value>A list of strings containing the names of statuses that should not be included in the result set.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Params.FieldNames">
            <summary>
              The names of fields that will be preloaded into the returned assets.
            </summary>
            <value>The field names.</value>
        </member>
        <member name="M:CrownPeak.CMSAPI.Params.SetFieldNames(System.String[])">
            <summary>
              Sets the FieldNames property with the passed in strings.
              If the list was not empty, previously added items are cleared from the list.
            </summary>
            <param name="fieldNameList">The list of field names to set.</param>
            <example>
              <code lang="c#">
            <![CDATA[
            AssetParams aParams = new AssetParams("modified_date DESC", 20);
            aParams.SetFieldNames("headline", "label", "summary");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Params.SetFilterStatus(System.String[])">
            <summary>
              Sets the FilterStatus property with the passed in strings.
              If the list was not empty, previously added items are cleared from the list.
            </summary>
            <param name="statusList">Names of the workflow statuses to filter on</param>
            <example>
              <code lang="c#">
            <![CDATA[
            FilterParams fParams = new FilterParams();    
            fParams.SetFilterStatus("DRAFT", "STAGE", "LIVE");
            List<asset> results = asset.Parent.GetFilterList(fParams);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Path">
            <summary>
              Encapsulates path information.  Parses a path into various parts.
              Usually available from filename.aspx, url.aspx, asseturl.aspx, and assetfilename.aspx.
              Usually available from output.aspx when publishing.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Path.Label">
            <summary>
              The label of the path
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Path.Extension">
            <summary>
              The file extension
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Path.FullPath">
            <summary>
              The full path including the Label and the extension
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Path.Folder">
            <summary>
              The folder
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Path.FileName">
            <summary>
              The name of the file
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Path.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
            <example>
              <code lang="C#">
            <![CDATA[
            Out.WriteLine(context.RemotePath);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.PathInfo">
            <summary>
              Container for path information.
            </summary>
            <exclude />
        </member>
        <member name="P:CrownPeak.CMSAPI.PathInfo.IdPath">
            <summary>
              The path to the asset represented by the asset ids of the folder. Example: /828/856/871
            </summary>
            <exclude />
        </member>
        <member name="P:CrownPeak.CMSAPI.PathInfo.AssetPath">
            <summary>
              The string path to the asset. Example: /Site/About Us/Management Team
            </summary>
            <exclude />
        </member>
        <member name="T:CrownPeak.CMSAPI.ProtocolType">
            <summary>
              <para>Available in builds 4201 and up.</para>
              <para>Represents a protocol type to be used in the call to GetLink.</para>
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.ProtocolType.None">
            <summary>
              Don't add a protocol at all.  The link will start with the domain (if available)
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.ProtocolType.Http">
            <summary>
              Start the link with "http://"
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.ProtocolType.Https">
            <summary>
              Start the link with "https://"
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.PublishDirection">
            <summary>
              Used in the PostPublishContext this tells you more about the type of operation that was going on.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PublishDirection.None">
            <summary>
              The direction is unknown, unspecified, or not applicable in the current case.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PublishDirection.Add">
            <summary>
              A workflow state change lead to this publish.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PublishDirection.Refresh">
            <summary>
              The workflow state did not change.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.PublishDirection.Delete">
            <summary>
              Files are being removed from the server
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.PublishingPackage">
            <summary>
              Encapsulates Publishing Package Info.  Available during Publishing
              and during "View Output".  In the case of output, there may not be any specific publishing
              information so a package is picked from a list of available packages so that "view output" may more closely model
              the publishing output.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.PublishingPackage.#ctor">
            <summary>
              Creates new empty object
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PublishingPackage.PackageName">
            <summary>
              The name of the Publishing Package.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PublishingPackage.FtpRoot">
            <summary>
              Obsolete:  Packages can have more than one repository.  Use FtpRootList
              The root where files will be published under this package.
              If you have configured the package for more than one repository, you will get the oldest repository's FtpRoot.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PublishingPackage.FtpRootList">
            <summary>
              A list of the roots for each repository associated with the package. The root is where files will be published under
              this package.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.PublishingPackage.HostName">
            <summary>
              <para>Available during output or publishing : output.aspx, url.aspx or filename.aspx</para>
              <para>
                The domain name for this publishing package.  Must have been configured in the publishing package configuration
                under "Hostname"
              </para>
            </summary>
            <example>
              <code lang="C#">
            <![CDATA[
            <% Out.WriteLine("HostName: " + context.PublishingPackage.HostName   + "<br/>"); %>    
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.PublishingPackage.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this status
            </summary>
            <returns>
              A <see cref="T:System.String" /> that represents this asset.
            </returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Out.WriteLine(context.PublishingPackage);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.FedPublishingPackage">
            <summary>
              Encapsulates Publishing Package Info.  Available during Publishing
              and during "View Output".  In the case of output, there may not be any specific publishing
              information so a package is picked from a list of available packages so that "view output" may more closely model
              the publishing output.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FedPublishingPackage.PackageName">
            <summary>
              The name of the Publishing Package.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FedPublishingPackage.SiteFolderId">
            <summary>
              The CMS root  folder that publishes to the root of the web application
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FedPublishingPackage.SiteProfileId">
            <summary>
              The id of the asset holding the package's site profile
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FedPublishingPackage.GateKeeperMode">
            <summary>
              The gate keeper mode that determines how the auth module will behave.  Can be Off, On, or PassThrough
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FedPublishingPackage.IsLocalInstall">
            <summary>
              Refers to how the AuthModule will be installed on the site.  If true, the module is installed locally to the
              web application in the bin folder and the modules
              are loaded one by one in the web.config.  False would indicate the module is installed into the GAC and the modules
              are loaded globally into the server.  The consequence of a true is that web.config files published to the site will
              automatically have
              the modules entries added and a false one would not.  The default is false.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FedPublishingPackage.IgnoreRoster">
            <summary>
              If this is set to true, no user list will be checked on the login.  All users that are authenticated will be allowed
              in.
              Defaults to false
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.FedPublishingPackage.HostName">
            <summary>
              <para>Available in builds 4201 and up.</para>
              <para>Available during output or publishing : output.aspx, url.aspx or filename.aspx</para>
              <para>
                The domain name for this publishing package.  Must have been configured in the publishing package configuration
                under "Hostname"
              </para>
            </summary>
            <example>
              <code lang="C#">
            <![CDATA[
            <% Out.WriteLine("HostName: " + context.PublishingPackage.HostName   + "<br/>"); %>    
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedPublishingPackage.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this status
            </summary>
            <returns>
              A <see cref="T:System.String" /> that represents this asset.
            </returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Out.WriteLine(context.PublishingPackage);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Raw">
            <summary>
              The raw contents of the asset fields.
              This removes any special formatting from a content field.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Raw.Item(System.String)">
            <summary>
              Gets the <see cref="T:System.String" /> with the specified key.
            </summary>
            <param name="key">The field name</param>
            <value>The field value</value>
            <remarks>
              <para>This is a read-only method.</para>
            </remarks>
            <example>
              <code> 
             <![CDATA[
              
              //reading example 
              
              string value = asset.Raw["key"];
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.RawAssetPanel.Item(System.String)">
            <summary>
              Gets the <see cref="T:System.String" /> with the specified key.
            </summary>
            <param name="key">The field name</param>
            <value>The field value</value>
            <remarks>
              <para>This is a read-only method.</para>
            </remarks>
            <example>
              <code> 
             <![CDATA[
              
              //reading example 
              
              string value = asset.Raw["key"];
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.RawPanel.Item(System.String)">
            <summary>
              Gets the <see cref="T:System.String" /> with the specified key.
            </summary>
            <param name="key">The field name</param>
            <value>The field value</value>
            <remarks>
              <para>This is a read-only method.</para>
            </remarks>
            <example>
              <code> 
             <![CDATA[
              
              //reading example 
              
              string value = asset.Raw["key"];
            ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.RouteResponse">
            <summary>
              Returned by some calls to encapsulate the result of the operation.
              Contains the resulting image and properties to tell whether there
              was an error and to provide an error message
            </summary>
            <example>
              <code lang="C#">
             <![CDATA[
             
                // resize the image to 50x50 and call it a thumbnail
                RouteResponse res = asset.RouteCollection(collId, sLive);
            
                if (!res.HasError)
                {
                  context.Error = "Error routing assets." + " error: " + res.ErrorMessage;           
                }  
             ]]>
             </code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.RouteResponse.FailedAssets">
            <summary>
              Gets or sets the list of failed assets.
            </summary>
            <value>List of failed assets if not using a long running task, otherwise an empty list</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.RouteResponse.IsLongRunning">
            <summary>
              Gets or sets a value indicating whether this Route request used a long running task.
            </summary>
            <value><c>true</c> if this Route request used a long running task; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.RouteResponse.JobId">
            <summary>
              Gets or sets the value of the long running Job Id if this request used a long running task.
            </summary>
            <value>value of the long running Job Id if this request used a long running task, otherwise zero.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.RouteResponse.ErrorMessage">
            <summary>
              Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.RouteResponse.HasError">
            <summary>
              Gets or sets a value indicating whether this instance has error.
            </summary>
            <value><c>true</c> if this instance has error; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CrownPeak.CMSAPI.SearchG2JsonParams">
            <summary>
              Parameters to be used in <see cref="T:CrownPeak.CMSAPI.SearchG2Context">SearchG2Context</see> JsonParams property which generates a JSON
              string for updating
              content in a Search G2 Collection. See https://wiki.apache.org/solr/UpdateJSON for more details on the JSON format,
              this class will create
              the JSON for you. The collection updated is based on the Search G2 Server configured on the Publishing Package.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.SearchG2JsonParams.OperationType">
            <summary>
              Enumeration that specifies the type of update Operation described by the SearchG2JsonParams class.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.SearchG2JsonParams.OperationType.Create">
            <summary>
              Create a new document in the collection.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.SearchG2JsonParams.OperationType.Update">
            <summary>
              Update an existing document in the collection.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.SearchG2JsonParams.OperationType.Delete">
            <summary>
              Delete a document in the collection.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.SearchG2JsonParams.#ctor">
            <summary>
              Default constructor. Operation is set based on the template name. Asset is set to template asset property.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2JsonParams.Properties">
            <summary>
              An Enumerator over the collection of Json property names with AssetPropertyNames that will be used to retrieve data
              from the asset.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2JsonParams.Fields">
            <summary>
              An Enumerator over the collection of Json property names with Asset field names that will be used to retrieve data
              from the asset.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2JsonParams.Fixeds">
            <summary>
              An Enumerator over the collection of Json property names with string values that will be added to the update string.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2JsonParams.Operation">
            <summary>
              Type of content change Operation to perform with this data.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2JsonParams.CommitWithin">
            <summary>
              Number of miliseconds to commit the document within.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2JsonParams.Overwrite">
            <summary>
              Specifies whether to first check for existing documents with the same unique key before updating.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2JsonParams.Id">
            <summary>
              Unique key describing the document.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2JsonParams.Query">
            <summary>
              Specify a query used to delete multiple documents.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SearchG2JsonParams.Asset">
            <summary>
              Asset used to retrieve AssetPropertyNames and content field values from.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.SearchG2JsonParams.Add(System.String,CrownPeak.CMSAPI.AssetPropertyNames)">
            <summary>
              Add an AssetPropertyNames value to your update JSON string.
            </summary>
            <param name="jsonName">JSON property name.</param>
            <param name="value">AssetPropertyNames used to specify the Asset Property to include as the value.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.SearchG2JsonParams.Add(System.String,System.String)">
            <summary>
              Add an Asset content field value to your update JSON string.
            </summary>
            <param name="jsonName">JSON property name.</param>
            <param name="value">Name of Asset content field or prefix of content fields whose values will be added.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.SearchG2JsonParams.AddFixed(System.String,System.String)">
            <summary>
              Add a hardcoded string value to your update JSON string.
            </summary>
            <param name="jsonName">JSON property name.</param>
            <param name="value">JSON property value.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.SearchG2JsonParams.AddFixed(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Add multiple hardcoded string values to your update JSON string.
            </summary>
            <param name="jsonName">JSON property name.</param>
            <param name="values">JSON property values for multi-value field in Search G2.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.SearchG2JsonParams.AddFixed(System.String,System.String[])">
            <summary>
              Add multiple hardcoded string values to your update JSON string.
            </summary>
            <param name="jsonName">JSON property name.</param>
            <param name="values">JSON property values for multi-value field in Search G2.</param>
        </member>
        <member name="T:CrownPeak.CMSAPI.SectionElement">
            <summary>
              Used to model Xml so you can edit the generated web.config sections when usign FedAuthHosting
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.SectionElement.#ctor(System.String)">
            <summary>
              Constructor.  Pass the element name.  Bear in mind the name has no effect on the top-level parent element when
              generating sections. You cannot change the name of "modules" for example.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:CrownPeak.CMSAPI.SectionElement.Name">
            <summary>
              The elements name.  Has no effect on parent.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SectionElement.Attributes">
            <summary>
              Dictionary of attributes in the element
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SectionElement.Children">
            <summary>
              List of child elements to add
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SectionElement.InnerText">
            <summary>
              Text to go inside the element
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.SectionElement.AddAttribute(System.String,System.String)">
            <summary>
              Add attributes to the element
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.SectionElement.AddChild(CrownPeak.CMSAPI.SectionElement)">
            <summary>
              Add a child element to the element
            </summary>
            <param name="child"></param>
        </member>
        <member name="T:CrownPeak.CMSAPI.SelectListSort">
            <summary>
              Sort options for the <see cref="M:CrownPeak.CMSAPI.Input.ShowSelectList(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Int32,CrownPeak.CMSAPI.SelectListSort,System.String,System.String)" /> method.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.SelectListSort.None">
            <summary>
              Sort neither list
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.SelectListSort.Dictionary">
            <summary>
              Sort only the dictionary (unselected values) list
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.SelectListSort.Selected">
            <summary>
              Sort only the selected values list
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.SelectListSort.Both">
            <summary>
              Sort both lists
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.SiteRootProperties">
            <summary>
              The Properties of a Site Root asset.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.SiteRootProperties.#ctor">
            <summary>
              <![CDATA[Initializes a new instance of the <see cref="SiteRootProperties"/> class.]]>
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.SiteRootProperties.DefaultExtension">
            <summary>
              Gets or sets the default extension for assets under this site root.
            </summary>
            <value>The save location.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.SiteRootProperties.ProjectId">
            <summary>
              Gets or sets the asset id of the project used by this site root.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.SiteRootProperties.ProjectPath">
            <summary>
              Gets the path of the project used by this site root.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:CrownPeak.CMSAPI.SortOrder">
            <summary>
              Represents an order by which <see cref="T:CrownPeak.CMSAPI.Asset">assets</see> or <see cref="T:CrownPeak.CMSAPI.PanelEntry">panels</see> can be sorted.
              Allows for multiple levels of sorting on both <see cref="T:CrownPeak.CMSAPI.AssetPropertyNames">built-in</see> and custom asset fields.
            </summary>
            <example>
              <code><![CDATA[
            // Sort by a built-in field, ascending
            SortOrder order1 = SortOrder.OrderBy(AssetPropertyNames.Label);
            
            // Sort by custom field, descending
            SortOrder order2 = SortOrder.OrderByDescending("field_name");
            
            // Sort by multiple fields
            SortOrder order3 = SortOrder.OrderBy("field_name")
                                        .ThenBy("other_field")
                                        .ThenByDescending(AssetPropertyNames.ModifiedDate);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.SortOrder.OrderBy(System.String)">
            <summary>
              Creates an ascending sort order on a custom field.
            </summary>
            <param name="name">The name.</param>
            <returns>A new <see cref="T:CrownPeak.CMSAPI.SortOrder" /> object</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             int search = 1630;
             FilterParams filterParams = new FilterParams();
             filterParams.Add(AssetPropertyNames.TemplateId, Comparison.Equals, search);    
             filterParams.Limit = 10;
             filterParams.SortOrder = SortOrder.OrderBy("start_date");
             List<Asset> list = Asset.Load("/Site/About Us").GetFilterList(filterParams);    
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.SortOrder.OrderBy(CrownPeak.CMSAPI.AssetPropertyNames)">
            <summary>
              Creates an ascending sort order on a built-in field.
            </summary>
            <param name="name">The name.</param>
            <returns>A new <see cref="T:CrownPeak.CMSAPI.SortOrder" /> object</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             int search = 1630;
             FilterParams filterParams = new FilterParams();
             filterParams.Add(AssetPropertyNames.TemplateId, Comparison.Equals, search);    
             filterParams.Limit = 10;
             filterParams.SortOrder = SortOrder.OrderBy(AssetPropertyNames.Type);
             List<Asset> list = Asset.Load("/Site/About Us").GetFilterList(filterParams);    
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.SortOrder.OrderByDescending(System.String)">
            <summary>
              Creates a descending sort order on a custom field.
            </summary>
            <param name="name">The name.</param>
            <returns>A new <see cref="T:CrownPeak.CMSAPI.SortOrder" /> object</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             int search = 1630;
             FilterParams filterParams = new FilterParams();
             filterParams.Add(AssetPropertyNames.TemplateId, Comparison.Equals, search);    
             filterParams.Limit = 10;
             filterParams.SortOrder = SortOrder.OrderByDescending("start_date");
             List<Asset> list = Asset.Load("/Site/About Us").GetFilterList(filterParams);    
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.SortOrder.OrderByDescending(CrownPeak.CMSAPI.AssetPropertyNames)">
            <summary>
              Creates a descending sort order on a built-in field.
            </summary>
            <param name="name">The name.</param>
            <returns>A new <see cref="T:CrownPeak.CMSAPI.SortOrder" /> object</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             int search = 1630;
             FilterParams filterParams = new FilterParams();
             filterParams.Add(AssetPropertyNames.TemplateId, Comparison.Equals, search);    
             filterParams.Limit = 10;
             filterParams.SortOrder = SortOrder.OrderByDescending(AssetPropertyNames.Label);
             List<Asset> list = Asset.Load("/Site/About Us").GetFilterList(filterParams);    
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.SortOrder.ThenBy(CrownPeak.CMSAPI.AssetPropertyNames)">
            <summary>
              Adds an additional built-in field to the current sort order in ascending order.
            </summary>
            <param name="name">The property name.</param>
            <returns>Itself.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             int search = 1630;
             FilterParams filterParams = new FilterParams();
             filterParams.Add(AssetPropertyNames.TemplateId, Comparison.Equals, search);    
             filterParams.Limit = 10;
             filterParams.SortOrder = SortOrder.ThenBy(AssetPropertyNames.Label);
             List<Asset> list = Asset.Load("/Site/About Us").GetFilterList(filterParams);    
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.SortOrder.ThenBy(System.String)">
            <summary>
              Adds an additional custom field to the current sort order in ascending order.
            </summary>
            <param name="name">The field name.</param>
            <returns>Itself.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             int search = 1630;
             FilterParams filterParams = new FilterParams();
             filterParams.Add(AssetPropertyNames.TemplateId, Comparison.Equals, search);    
             filterParams.Limit = 10;
             filterParams.SortOrder = SortOrder.ThenBy("start_date");
             List<Asset> list = Asset.Load("/Site/About Us").GetFilterList(filterParams);    
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.SortOrder.ThenByDescending(CrownPeak.CMSAPI.AssetPropertyNames)">
            <summary>
              Adds an additional built-in field to the current sort order in descending order.
            </summary>
            <param name="name">The property name.</param>
            <returns>Itself.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             int search = 1630;
             FilterParams filterParams = new FilterParams();
             filterParams.Add(AssetPropertyNames.TemplateId, Comparison.Equals, search);    
             filterParams.Limit = 10;
             filterParams.SortOrder = SortOrder.ThenByDescending(AssetPropertyNames.Label);
             List<Asset> list = Asset.Load("/Site/About Us").GetFilterList(filterParams);    
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.SortOrder.ThenByDescending(System.String)">
            <summary>
              Adds an additional custom field to the current sort order in descending order.
            </summary>
            <param name="name">The field name.</param>
            <returns>Itself.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             int search = 1630;
             FilterParams filterParams = new FilterParams();
             filterParams.Add(AssetPropertyNames.TemplateId, Comparison.Equals, search);    
             filterParams.Limit = 10;
             filterParams.SortOrder = SortOrder.ThenByDescending("start_date");
             List<Asset> list = Asset.Load("/Site/About Us").GetFilterList(filterParams);    
             ]]>
             </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Status">
            TODO: Consider whether this should be immutable.
            <summary>
              A status as related to workflow or publishing
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Status.Load(System.String)">
            <summary>
              Loads a Status object by name.
            </summary>
            <param name="statusName">Name of the status like "LIVE" or "STAGE".</param>
            <returns>
              Status object or null, if not found
            </returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Status liveStatus = Status.Load("LIVE")    
            asset.Route(liveStatus);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Status.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this status
            </summary>
            <returns>
              A <see cref="T:System.String" /> that represents this status.
            </returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Status stageStatus = Status.Load("STAGE");
            Out.WriteLine("The loaded status: {0}", stageStatus);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Status.Equals(System.Object)">
            <summary>
              Compares Equality between to Status based on whether their internal Id is the same.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Status liveStatus = Status.Load("LIVE");
            if(!asset.WorkflowStatus.Equals(liveStatus))
            {
              asset.Route(liveStatus);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Status.GetHashCode">
            <summary>
              Since Equals depends only on Id, we override HashCode to use only the Id.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Status.Load(System.Int32)">
            TODO: Do users need to access this?
            <summary>
              Loads the specified status.
            </summary>
            <param name="statusId">The status id.</param>
            <returns>The status object that corresponds to the status id.</returns>
        </member>
        <member name="P:CrownPeak.CMSAPI.Status.Id">
            <summary>
              Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Status.Name">
            <summary>
              Gets or sets the name of the status.  Examples would be LIVE or STAGE
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Status.Color">
            <summary>
              Gets or sets the color.  This is a hexadecimal value representing an RGB color as in the manner of HTML colors.
            </summary>
            <value>The color.</value>
        </member>
        <member name="T:CrownPeak.CMSAPI.Transition">
            <summary>
              Represents a Workflow Transition that occurred for an asset.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Transition.#ctor">
            <summary>
              Constructor for creating new object
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Transition.Date">
            <summary>
              The date the transition occurred.
            </summary>
            <value>Transition Date</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Transition.FromState">
            <summary>
              The name of the state the asset was in when the transition started.
              Use  Status.Load(string statusName) to get a status object to the get the status id or color.
            </summary>
            <value>From State string</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Transition.ToState">
            <summary>
              The name the asset was in when the transition was completed.
              Use  Status.Load(string statusName) to get a status object to the get the status id or color.
            </summary>
            <value>To State string</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Transition.UserId">
            <summary>
              The userid of the user who performed the transition
            </summary>
            <value>User id integer</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Transition.UserName">
            <summary>
              The username for the user who performed the transition
            </summary>
            <value>User name string</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Transition.AssetId">
            <summary>
              The asset id of the asset that was transitioned
            </summary>
            <value>Asset id int</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Transition.Reason">
            <summary>
              A string that describes the reason for the transition.
              If the transition was the result of a command defined in a workflow
              such as "Deploy To Live", that will be the value of this string.
              Other possibilities include, but are not limited to: "Ad-Hoc Route" and "Ad-Hoc API Route"
            </summary>
            <value>Reason string</value>
        </member>
        <member name="T:CrownPeak.CMSAPI.UIType">
            <summary>
              The possible types of user interface from which the current user can run the template.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.UIType.Unspecified">
            <summary>
              For serialization only. Don't use.
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.UIType.Classic">
            <summary>
              The Classic user interface
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.UIType.Volte">
            <summary>
              The Volte user interface
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.UIType.V3">
            <summary>
              Reserved. Don't use.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.EmailAttachment">
            <summary>
              Class representing an email attachment
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.EmailAttachment.Label">
            <summary>
              The label of the file.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.EmailAttachment.OpenFile">
            <summary>
              Opens the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.EmailAttachment.ReadAsText(System.Text.Encoding)">
            <summary>
              Return the attachments's contents as a string.  After calling this, the value of string
              value will be initialized to the value returned by this call.
            </summary>
            <param name="encoding">The encoding used by the file</param>
            <returns>Contents of the file as a string</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.UploadedFile">
            <summary>
              Class representing an uploading file
            </summary>
        </member>
        <member name="F:CrownPeak.CMSAPI.UploadedFile.ValidStringExtensions">
            <exclude />
        </member>
        <member name="F:CrownPeak.CMSAPI.UploadedFile._stringValue">
            <exclude />
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.IsLoaded">
            <summary>
              Is the UploadedFile loaded.  Call this On an instance to see if it is loaded with valid inforamation.
              If false, GetLink() will return an empty string
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.Path">
            <summary>
              The CMS path to this attachment.
              Can be used in a rendered page as a link, Live links are substituted at publish time.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.Extension">
            <summary>
              The filename extension for this file such as "jpg" or "doc"
            </summary>
            <value>string</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.StringValue">
            <summary>
              Gets the string value. Only supports xml, csv, and txt files. If StringValue is called on an
              unsupported file type, such as an image it will return an empty string.
              The file is assumed to be encoded as UTF-8.  If it is not UTF-8 or it uses a different extension that one of the
              supported, you
              may call ReadAsText() with the desired encoding instead.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.RelationshipType">
            <summary>
              Use this to check of the uploaded file is a Link ((RelationshipType.Link) to another asset or
              an attachment (RelationshipType.Attach) that is managed as a part of the asset.
            </summary>
            <value>RelationsipType enum</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.Img">
            <summary>
              Used to cache the Img object when the upload is an image.  If the Path is not an image, then there will be an error
              on the image.
              Use Img.HasError and Img.ErrorMessage to check for an error.
            </summary>
            <value>An Img object instance</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.OriginalName">
            <summary>
              The Original File Name
            </summary>
            <value>string</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.UploadKey">
            <summary>
              The Key associated with the asset - "my_photo", for example
            </summary>
            <value>string</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.UploadField">
            <summary>
              Key used by system to uniquely identify an attachment.
              Example: upload_file396_2877
            </summary>
            <value>string</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.Size">
            <summary>
              The size of the file in bytes.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.ExtractedContentRawJson">
            <summary>
              The Raw Json string used to populate the object returned by ExtractedContent.  This is search G2 related.
              Data is populated at upload time.  If data is not available, the data is uploaded to ACB
              and parsed on-the-fly if it is running in a Search G2 template.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFile.ExtractedContent">
            <summary>
              Used with Search G2. If this is a valid attachment or a cpt_internal link pointing to a binary asset
              and content parsing is enabled, this is extracted on upload and stored as a JSON string.
              In the SearchG2Context contexts, this will be populated on-the-fly, if not loaded yet.
              Failure wil return empty object.  Check context.Error for details on failure.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.UploadedFile.OpenFile">
            <summary>
              Opens the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.UploadedFile.ReadAsText(System.Text.Encoding)">
            <summary>
              Return the file's contents as a string.  After calling this, the value of string
              value will be initialized to the value returned by this call.
            </summary>
            <param name="encoding">The encoding used by the file</param>
            <returns>Contents of the file as a string</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.UploadedFile.Matches(System.String)">
            <summary>
              See if the particular Uploaded File has the key we are looking for.  Usually used in the upload.aspx
            </summary>
            <param name="uploadKey">
              The name of the upload field.  Used to see if this uploaded file instance is a particular
              uploaded file.
            </param>
            <returns>true if the key matches</returns>
            <example>
              <code lang="C#">
             <![CDATA[
               // Usually called from upload.aspx
               UploadedFile imageUpload = context.UploadedFile;
                    
              // my_photo_thumbnail was used in input.aspx because we want to display the thumbnail when we edit, not the possibly large original
              if (imageUpload.Matches("my_photo_thumbnail"))
              {
            
                asset.SaveUploadedFile("my_photo", imageUpload); // it gets overwritten later when it is resized to 300x300
                ImgResult res = asset.CreateThumbnail(imageUpload, "my_photo_thumbnail", 300, 300);
                if (res.HasError)
                {
                   context.Error = "Upload Error creating thumbnail on " + value + " error: " + res.ErrorMessage;           
                 }  
              }
              else
              {
                context.Error = "Upload Error Loading on " + value + " error: " + img.ErrorMessage;           
              }
             
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.UploadedFile.ToString">
            <summary>
              Prints the UploadedFile Path
            </summary>
            <returns>The path</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            Out.WriteLine(context.UploadedFiles[0]);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.UploadedFile.GetLink">
            <summary>
              Returns a link to the attachment.  If we are publishing, this will be the actual
              live link for the current server, otherwise this will be the same as Path.
            </summary>
            <returns>string which is a link to this attachment</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            <img src="<%= asset.UploadedFiles["my_file"].GetLink() %>" />
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Size">
            <summary>
              Used to specify the desired size of an image created at upload time.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Size.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:CrownPeak.CMSAPI.Size" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="width">The desired width of the image.</param>
            <param name="height">The desired height of the image.</param>
            <param name="qualityPercent"> Optional: The quality to use when creating the image. Defaults to 75</param>
            <param name="preserveAspectRatio">
              Optional: Pass false if you want the thumbnail to be generated with exactly the size
              of the passed in width and height.
            </param>
        </member>
        <member name="P:CrownPeak.CMSAPI.Size.Name">
            <summary>
              The name you will use to refer to this image size after it has been created
            </summary>
            <value>string</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Size.Width">
            <summary>
              The desired width of the image
            </summary>
            <value>int</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Size.Height">
            <summary>
              The desired height of the image.
            </summary>
            <value>int</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Size.QualityPercent">
            <summary>
              The quality to use when creating the image.  Defaults to 75
            </summary>
            <value>int</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Size.PreserveAspectRatio">
            <summary>
              Optional.  Defaults to true.  If set to false, aspect ratio is not preserved when creating a thumbnail
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Size.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.UploadedFiles">
            <summary>
              Collection of uploaded files in this context.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFiles.Count">
            <summary>
              <para>The number of items in this collection.</para>
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.UploadedFiles.Item(System.String)">
            <summary>
              Gets the uploaded file value <see cref="T:CrownPeak.CMSAPI.UploadedFile" /> with the specified key.
            </summary>
            <param name="key">The field name</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.UploadedFiles.GetEnumerator">
            <summary>
              Not called directly.  Allows you to enumerate through the collection with a foreach. See example.
            </summary>
            <returns>A single item from the collection.</returns>
            <example>
              <code> 
            <![CDATA[
              foreach(KeyValuePair<string, UploadedFile> entry in context.InputForm.UploadedFiles)
              {
                Out.DebugWriteLine("key : " + entry.Key + " Path: " + entry.Value.Path);
              }
                    ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.UploadedFiles.HasKey(System.String)">
            <summary>
              Was the given field submitted on the last post.
            </summary>
            <param name="key">The key to check for.</param>
            <returns>if the key exists HasKey will return <c>true</c>; otherwise returns <c>false</c></returns>
            <example>
              <code lang="c#">
             <![CDATA[
             if(context.InputForm.UploadedFiles.HasKey("main_image"))
             {
                 // Usually called from post_input.aspx
                 Img img = context.UploadedFiles["my_photo"].Img;
            
                 if (!img.HasError)
                 {
                 // It's likely lasso params from the input would be used for these dimensions
                  ImgResult res = img.CropImage(300, 300, 0, 0, 500, 500);
                  if (res.HasError)
                  {
                     context.Error = "Upload Error cropping image on " + value + " error: " + res.ErrorMessage;           
                   }  
                  }
                 else
                 {
                   context.Error = "Image Error Loading on " + context.UploadedFiles["my_photo"].Path + " error: " + img.ErrorMessage;           
                 }
             }
             ]]>
             </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.UploadedFiles.WasCleared(System.String)">
            <summary>
              Returns true if the fields specified by key was cleared on the last edit.
              <para>Only valid in post input.  Returns false in all other contexts.</para>
            </summary>
            <param name="key"></param>
            <returns>true or false</returns>
            <example>
              <code lang="c#">
            <![CDATA[
            if(context.InputForm.UploadedFiles.WasCleared("main_image"));
            {
              //Clean up the associated fields
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.UploadedFiles.GetPath(System.String)">
            <summary>
              The current value of the upload with the given key from the last edit session.
              If this is PostInput then the value is uncommitted.
            </summary>
            <param name="key">The key for the desired uploaded file</param>
            <returns>The path to the uploaded file for the given key.</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             <img src="<%= asset.UploadedFiles["my_photo"].GetPath %>" />;
            ]]>
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.UtilityLinkParams">
            <summary>
              Params for creating UtilityLinks
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.UtilityLinkParams.#ctor">
            <summary>
              <![CDATA[Initializes a new instance of the <see cref="UtilityLinkParams"/> class.]]>
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.UtilityLinkParams.saveLocation">
            <summary>
              Gets or sets the save location.
            </summary>
            <value>The save location.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.UtilityLinkParams.model">
            <summary>
              Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.UtilityLinkParams.args">
            <summary>
              Gets or sets the args.
            </summary>
            <value>The args.</value>
        </member>
        <member name="P:CrownPeak.CMSAPI.Workflow.WorkflowId">
            <summary>
              The id that identifies this workflow.  This is separate from the id of the asset that represents this workflow.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Workflow.Name">
            <summary>
              The workflow name
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Workflow.Description">
            <summary>
              The Workflow description
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.Workflow.AssetId">
            <summary>
              The id of the asset used to represent this workflow so we can separate it from other workflows and give it specific
              permissions if we want.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.XmlNode">
            <summary>
              Represents an Xml node. Contains a set of attributes and a set of elements. As well as the Name of the tag and the
              Value of the tag.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.XmlNode.Attributes">
            <summary>
              The set of attributes for this node.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.XmlNode.XmlNodes">
            <summary>
              A list of XmlNodes whose parent is this node. If this node does not have any children, XmlNodes.Count will be 0.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.XmlNode.Name">
            <summary>
              <![CDATA[The name of the xml tag. For example <item> would be item.]]>
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.XmlNode.Value">
            <summary>
              <![CDATA[The data contained with in the tag. For example <item>foo</item> would return foo.]]>
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.XmlNode.XmlValue">
            <summary>
              <![CDATA[Gets the xml data contained in this]]>
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.XmlAttributes">
            <summary>
              Represents a set of xml attributes. The key is the attribute name and the value is the attribute value.
              Attempting to access an attribute that is not present will return an empty string.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.XmlAttributes.Count">
            <summary>
              Returns the number of attributes.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.XmlAttributes.Item(System.String)">
            <summary>
              Gets the value of the requested key. Will return empty string if the key is not defined.
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.FedAuthHosting">
            <summary>
              Utlities for loading and saving Configuration
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.LoadUserConfigFromXml(System.String)">
            <summary>
              Takes an Xml string and returns a UserConfiguration object.  If the string is null or empty, the object will contain
              an empty user list
              Use the UserConfiguration to Add, remove or modify users that can access the website that is using this
              configuration.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.GetFedAuthSites(System.Int32)">
            <summary>
              Finds the deploy record that applies to the given folder and returns all the packages that have
              fed auth enabled
            </summary>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.GetFedPackage(CrownPeak.CMSAPI.PublishingPackage)">
            <summary>
              Pass the publishingpackage from the current context and get a FedPublishingPackage which has additional data.
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.GetFedPackage(System.Int32)">
            <summary>
              Pass the publishingpackage from the current context and get a FedPublishingPackage which has additional data.
            </summary>
            <param name="packageId"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.LoadAuthConfigFromXml(System.String)">
            <summary>
              Takes an Xml string and returns a AuthConfiguration object.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.SaveUserConfigToXml(AuthConfig.UserConfiguration)">
            <summary>
              Takes a UserConfiguration object and returns an XML representation that is compatible with the
              Fed Auth Hosting module
            </summary>
            <param name="userConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.SaveAuthConfigToXml(AuthConfig.AuthConfiguration)">
            <summary>
              <para>
                Takes a AuthConfiguration object and returns an XML representation that is compatible with the
                Fed Auth Hosting module
              </para>
              <para>The token $HOSTNAME$ will be replaced by the actual package hostname if it is available</para>
            </summary>
            <param name="authConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.LoadProviderConfigFromXml(System.String)">
            <summary>
              Takes an Xml string and returns a ProviderConfiguration object.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.SaveProviderConfigToXml(AuthConfig.ProviderConfiguration)">
            <summary>
              <para>
                Takes a ProviderConfiguration object and returns an XML representation that is compatible with the
                Fed Auth Hosting module
              </para>
              <para>The token $HOSTNAME$ will be replaced by the actual package hostname if it is available</para>
            </summary>
            <param name="pConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.ValidateWebConfig(System.String,CrownPeak.CMSAPI.FedPublishingPackage,System.Boolean)">
            <summary>
              This is the same logic used on web.config files at publish time when publishing to packages where
              Fed Auth is enabled.  You can use it to test your web.config's validity before publishing.
            </summary>
            <param name="xml">The text of the web.config</param>
            <param name="fedPackage">The current FedPublishingPackage.  Use FedAuthHosting.GetFedPackage(PublishingPackage) to load</param>
            <param name="needsFedAuthModule">
              true if the web.config is the root web.config.  If it is a subapp, then the modules are not needed, but
              we will look for illegal entries and strip them.  For example, you may not remove the authmodule in a sub app.
            </param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.FedAuthHosting.ValidateAuthConfig(System.String,CrownPeak.CMSAPI.FedPublishingPackage)">
            <summary>
              The same logic used at publish time when publishing the auth.config file on a Fed Auth enabled package. You can use
              it to test your
              auth.config's validity before publishing. Its job is to make sure that the properties in the configuration match the
              properties
              in the Fed Auth Package configuraiton
              to prevent tampering.
            </summary>
            <param name="xml">The contents of the file</param>
            <param name="fedPackage">The current FedPublishingPackage.  Use FedAuthHosting.GetFedPackage(PublishingPackage) to load</param>
            <returns></returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.Experimental.XmlSerializer">
            <summary>
              Experimental methods.  They could change in a future release.  Use at your own risk.
              You can use Xml attribute tags from here http://msdn.microsoft.com/en-us/library/83y7df3e(v=vs.100).aspx in your
              classes and Serialize and Deserialize with this class
              Tag classes and members with various attributes without fully qualifying them.  use [XmlElement] but not
              "[System.Xml.Serialization.XmlElementAttribute]"
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Experimental.XmlSerializer.SerializeXml(System.Object)">
            <summary>
              <para>WARNING Experimental. It could change in a future release.  Use at your own risk.</para>
              Define a class that uses [XmlElement], [XmlAttribute], and other tags and you can then serialize an instance
              of that class to XML with this method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Experimental.XmlSerializer.DeserializeXml(System.String,System.Type)">
            <summary>
              <para>WARNING Experimental. It could change in a future release.  Use at your own risk.</para>
              Define a class that uses [XmlElement], [XmlAttribute], and other tags and you can then create an object from XML
              with this method
            </summary>
            <param name="xml"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Experimental.XmlSerializer.serializer_UnknownNode(System.Object,System.Xml.Serialization.XmlNodeEventArgs)">
            <summary>
              Handles unknown nodes when they are parsed and writes them to the Debug window
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Experimental.XmlSerializer.serializer_UnknownAttribute(System.Object,System.Xml.Serialization.XmlAttributeEventArgs)">
            <summary>
              Handles unknown attributes when they are parsed and writes them to the Debug window
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:CrownPeak.CMSAPI.Experimental.DataContractSerializer">
            <summary>
              Experimental methods.  They could change in a future release.  Use at your own risk.
              You can use [DataContract] to tag serializable classes.  Use [DataMember] on properties and
              [EnumMember] for enums.  These classes have the advantage that you can use them for Xml or JSON, but they are not as
              flexible for the Xml.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Experimental.DataContractSerializer.SerializeJson(System.Object)">
            <summary>
              <para>WARNING Experimental. It could change in a future release.  Use at your own risk.</para>
              Define a class that uses [DataContract], [DataMember], and [EnumMember] tags and you can then serialize an instance
              of that class to JSON with this method
              <para>
                Use the Name property in the DataMember to use a name that is different from the property name --
                [DataContract(Name="MySpecialName")]
              </para>
              <para>
                Use the Namespace in the DataContract to use a namespace that is custom for XML --  [DataContract(Namespace =
                "MySpecialNamespace")]
              </para>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Experimental.DataContractSerializer.SerializeXml(System.Object)">
            <summary>
              <para>WARNING Experimental. It could change in a future release.  Use at your own risk.</para>
              Define a class that uses [DataContract], [DataMember], and [EnumMember] tags and you can then serialize an instance
              of that class to XML with this method
              <para>
                Use the Name property in the DataMember to use a name that is different from the property name --
                [DataContract(Name="MySpecialName")]
              </para>
              <para>
                Use the Namespace in the DataContract to use a namespace that is custom for XML --  [DataContract(Namespace =
                "MySpecialNamespace")]
              </para>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Experimental.DataContractSerializer.DeserializeJson(System.String,System.Type)">
            <summary>
              <para>WARNING Experimental. It could change in a future release.  Use at your own risk.</para>
              Define a class that uses [DataContract], [DataMember], and [EnumMember] tags and you can then create an object from a
              json representation of the object
              with this method
              <para>
                Use the Name property in the DataMember to use a name that is different from the property name --
                [DataContract(Name="MySpecialName")]
              </para>
              <para>
                Use the Namespace in the DataContract to use a namespace that is custom for XML --  [DataContract(Namespace =
                "MySpecialNamespace")]
              </para>
            </summary>
            <param name="json"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Experimental.DataContractSerializer.DeserializeXml(System.String,System.Type)">
            <summary>
              <para>WARNING Experimental. It could change in a future release.  Use at your own risk.</para>
              Define a class that uses [DataContract], [DataMember], and [EnumMember] tags and you can then create an object from a
              xml representation of the object
              with this method
              <para>
                Use the Name property in the DataMember to use a name that is different from the property name --
                [DataContract(Name="MySpecialName")]
              </para>
              <para>
                Use the Namespace in the DataContract to use a namespace that is custom for XML --  [DataContract(Namespace =
                "MySpecialNamespace")]
              </para>
            </summary>
            <param name="xml"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.Experimental.XUtils">
            <summary>
              A collection of experimental utilities.  Use at your own risk.  These may be changed or removed at a later date.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Experimental.XUtils.CreateInstance(System.String,System.Boolean,System.Int32)">
            <summary>
              <para>WARNING Experimental. It could change in a future release.  Use at your own risk.</para>
            </summary>
            <param name="fullClassName">Class name including the namespace. (ex: CrownPeak.CMSAPI.Experimental.XUtils)</param>
            <param name="forceComponentLibraryAssemblyLoad">Flag to determine whether the Component Library assemblies should be loaded.</param>
            <param name="assetId">Id of the asset being rendered. To be used if unable to locate the assembly through the context template.</param>
            <returns></returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.TUserProxy">
            <summary>
              Serves only as a proxy for static usage of User
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.TUserProxy.Load(System.String)">
            <summary>
              Returns a new user object populated with the user specified by username.
              Returns null, if not found
            </summary>
            <param name="userName">The user name to search for.</param>
            <returns>Returns the User object specified by username.</returns>
            <example>
              <code lang="C#">
            User theUser = User.Load("usersname");
            if (theUser != null)
              Out.WriteLine("Hi " + theUser.Firstname);
            
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.TUserProxy.Load(System.Int32)">
            <summary>
              Returns a new user object populated with the user specified by userId.
              Returns null, if not found
            </summary>
            <param name="userId">The user id to lookup.</param>
            <returns>Returns the User object specified by userId.</returns>
            <example>
              <code lang="C#">
            User theUser = User.Load(asset.PublishUserId);
            if (theUser != null)
              Out.WriteLine("Hi " + theUser.Firstname);
            
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.TUserProxy.LoadUsers(System.Collections.Generic.List{System.Int32})">
            <summary>
              Use this to load a list of Users by a list of ids.
            </summary>
            <param name="userIds">A List of Ids.</param>
            <returns>List of Users</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            List<int> userIds = ....
            List<User> users = User.LoadUsers(userIds);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.TUserProxy.GetUsers">
            <summary>
              Get a list of all users
            </summary>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.TUserProxy.GetUsersByGroupName(System.String)">
            <summary>
              Gets a List of users that are members of the group specified in the name.
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns>List of users.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.TUserProxy.IsUserActive(CrownPeak.CMSAPI.User)">
            <summary>
              Returns true if user is active.  
            </summary>
            <param name="user">User to test.</param>
            <returns>True if active</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.TUserProxy.IsUserActiveEmail(CrownPeak.CMSAPI.User)">
            <summary>
              Returns true if user is active and has an email  
            </summary>
            <param name="user">User to test.</param>
            <returns>True if active with an email</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.User">
            <summary>
              Represents a CMS User
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Id">
            <summary>
              User Id.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Username">
            <summary>
              The username of the user.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Lastname">
            <summary>
              The user's last name as it appears in the CMS.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Firstname">
            <summary>
              The user's first name as it appears in the cms.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Email">
            <summary>
              The user's email addres as it appers in the cms.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.IsEnabled">
            <summary>
              Indicates if the status of the user account. If IsEnabled is true, the user may log into and use the cms. If
              IsEnabled is false, user cannot login and use the cms.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Avatar">
            <summary>
              The path to the user's icon.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Description">
            <summary>
              Gets the user description.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Phone">
            <summary>
              The user's Phone number.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Fax">
            <summary>
              The user's Fax number.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Cell">
            <summary>
              The user's cell phone number.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Pager">
            <summary>
              The user's pager number.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.LastLoginDate">
            <summary>
              This might not be initialized.  Use HasValue to see.
            </summary>
            <example>
              <code><![CDATA[
            
            User thisUser = User.Load("myuser");
            
            if( thisUser.LastLoginDate.HasValue)
              Out.WriteLine("Hello {0}.  You last logged in {1} ",thisUser.Username, thisUser.LastLoginDate.Value);
            
            ]]></code>
            </example>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.LastLoginAddr">
            <summary>
              The last ip address that the user logged in from.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Title">
            <summary>
              The user's job title.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Department">
            <summary>
              The user's department.
            </summary>
        </member>
        <member name="P:CrownPeak.CMSAPI.User.Location">
            <summary>
              The user's location as it appears in the CMS.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.User.IsInGroup(System.String)">
            <summary>
              Used to tell if the user belongs to the specified group name.
            </summary>
            <param name="groupName">The name of the group to be checked.</param>
            <returns>Returns true if the user belongs to the specified group.</returns>
            <example>
              <code lang="C#">
            User theUser = User.Load("usersname");
            bool isInGroup = user.IsInGroup("groupname");
            if (isInGroup)
              Out.WriteLine("The user " + theUser.Username + " belongs to the group called groupname.");
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.User.GetGroupNames">
            <summary>
            Gets the list of Groups for a user.
            </summary>
            <returns>A list of group names.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.User.Load(System.String)">
            <summary>
              Returns a new user object populated with the user specified by username.
              Returns null, if not found
            </summary>
            <param name="userName">The user name to search for.</param>
            <returns>Returns the User object specified by username.</returns>
            <example>
              <code lang="C#">
            User theUser = User.Load("usersname");
            if (theUser != null)
              Out.WriteLine("Hi " + theUser.Firstname);
            
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.User.Load(System.Int32)">
            <summary>
              Returns a new user object populated with the user specified by userId.
              Returns null, if not found
            </summary>
            <param name="userId">The user id to lookup.</param>
            <returns>Returns the User object specified by userId.</returns>
            <example>
              <code lang="C#">
            User theUser = User.Load(asset.PublishUserId);
            if (theUser != null)
              Out.WriteLine("Hi " + theUser.Firstname);
            
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.User.LoadUsers(System.Collections.Generic.List{System.Int32})">
            <summary>
              Use this to load a list of Users by a list of ids.
            </summary>
            <param name="userIds">A List of Ids.</param>
            <returns>List of Users</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            List<int> userIds = ....
            List<User> users = User.LoadUsers(userIds);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.User.GetUsers">
            <summary>
              Get a list of all users
            </summary>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.User.GetUsersByGroupName(System.String)">
            <summary>
              Gets a List of users that are members of the group specified in the name.
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns>List of users.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.User.IsUserActive(CrownPeak.CMSAPI.User)">
            <summary>
              Returns true if user is active.  
            </summary>
            <param name="user">User to test.</param>
            <returns>True if active</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.User.IsUserActiveEmail(CrownPeak.CMSAPI.User)">
            <summary>
              Returns true if user is active and has an email  
            </summary>
            <param name="user">User to test.</param>
            <returns>True if active with an email</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.User.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
            <example>
              <code lang="C#">
            Out.WriteLine(context.UserInfo);
            </code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Util">
            <summary>
              Contains a set of utility methods.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.GetHostName">
            <summary>
              Gets Host Name
            </summary>
            <returns>Host Name</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.MinifyJS(System.String)">
            <summary>
              Minifier for JavaScript
            </summary>
            <param name="jsCode">JavaScript code as a string</param>
            <returns>string of minified JavaScript. Check context.Error for error list.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.MinifyCSS(System.String)">
            <summary>
              Minifier for CSS
            </summary>
            <param name="cssCode">CSS code as a string</param>
            <returns>string of minified CSS. Check context.Error for error list.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.MinifyCSS(CrownPeak.CMSAPI.Asset)">
            <summary>
              Minifier for CSS
              <para>Uses UTF-8 to decode a binary CSS file.</para>
            </summary>
            <param name="cssAsset">CSS file</param>
            <returns>string of minified CSS. Check context.Error for error list.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.MinifyJS(CrownPeak.CMSAPI.Asset)">
            <summary>
              Minifier for JavaScript
              <para>Uses UTF-8 to decode a binary JS file.</para>
            </summary>
            <param name="jsAsset">JavaScript file</param>
            <returns>string of minified JavaScript. Check context.Error for error list.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.ShowEditButton(CrownPeak.CMSAPI.Asset,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Displays an edit button which when clicked, will open the associated asset for editing.
            </summary>
            <param name="asset">The asset to edit.</param>
            <param name="buttonLabel">The button label.</param>
            <param name="left">the left position.</param>
            <param name="top">The top position.</param>
            <param name="width">The width. Defaults to 80</param>
            <param name="height">The height. Defaults to 18</param>
            <example>
              <code lang="C#">
             Util.ShowEditButton(asset, "Click here to Edit", 10, 10);
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.SetRenderTimeout(System.Int32)">
            <summary>
              Modifies the default value of the Render timeout.
              Normally used to give long running template more time to execute, or to make sure templates don't take over x # of
              seconds to execute.
              Should be used at top of template code.
              Cannot be set to the maximum set by the CMS, currently 900 seconds.
            </summary>
            <param name="newTimeoutInSeconds">The new timeout value.</param>
            <example>
              <code lang="C#">    
            Util.SetRenderTimeout(100);
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.Crop(System.String,System.Int32,System.Boolean)">
            <summary>
              Crops the specified string.  If the string length is less than the crop length, the string will not be cropped.
              Crop tries to be smart about where it crops the string. Rather than croping a word midway through, it will crop
              at the right most space within the bounds set by the cropLength parameter.  If a space does not exist within this
              section, it will crop the string at cropLength. appendEllipsis is an optional parameter that when set to true, will
              append an ellipsis to the end of the string.  Since the ellipsis occupies 3 spaces, the cropLength will be adjusted
              by a factor of three. If the string is null, empty, or all whitespace, an empty string is returned.
            </summary>
            <param name="stringToCrop">The string to crop.</param>
            <param name="cropLength">Max length of the string.  Anything larger will result in a crop</param>
            <param name="appendEllipis">
              if set to <c>true</c> it will append an ellipis to the resultant string and it will
              subtract 3 from the cropLength to compensate for the 3 dots
            </param>
            <returns>Cropped version of the input string.</returns>
            <example>
              <code lang="C#">
            string post = "This is my really long twitter post that needs to be trimmed in order for it to fit! We will crop it! The max length of one of these posts is only 140!"
            Util.Crop(post, 140);
            </code>
              result: This is my really long twitter post that needs to be trimmed in order for it to fit! We will crop it! The max
              length of one of these...
              Overriding the default behavior:
              <code lang="C#">
            string post = "This is my really long twitter post that needs to be trimmed in order for it to fit! We will crop it! The max length of one of these posts is only 140!"
            Util.Crop(post, 140, false);
            </code>
              result: This is my really long twitter post that needs to be trimmed in order for it to fit! We will crop it! The max
              length of one of these posts
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.CreateListFromCsv(System.String,System.Char)">
            <summary>
              Converts CSV file contents into a List of Dictionaries.
              Requires the first line in the data to be column headers.
            </summary>
            <param name="csvData">CSV data with column headers on first line</param>
            <param name="separator">Optional: The character to delimit the data. Defaults to ,</param>
            <returns>A list of dictionaries. Each dictionary represents a row in the csv.</returns>
            <example>
              <code lang="C#">
            		<![CDATA[
            <%
            List<Dictionary<string,string>> list = Util.CreateListFromCsv(testText, ',');
            foreach(Dictionary<string, string> dictionary in list)
            {
              string data = dictionary["colName1"];
            }
            %>
            ]]>
            	</code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.LoadXml(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
              Converts the xml into a list of XmlNodes. Passing a value for elementName will return the subset of nodes that
              are contained within the elementName node.
            </summary>
            <param name="xml">The xml string to convert into a list of XmlNodes</param>
            <param name="elementName">The name of the element to build the list from</param>
            <param name="namespaces">Dictionary of prefixes to xml namespaces</param>
            <returns>Returns a List of type <see cref="T:CrownPeak.CMSAPI.XmlNode" /> which you can iterate through.</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            EmailAttachment attachment = context.EmailAttachments[0];
            List<XmlNode> xmlNodeList = Util.LoadXml(attachment.StringValue, "node");
            foreach (XmlNode node in xmlNodeList)
            {
              foreach (XmlNode elementNode in node.XmlNodes)
              {
                if(elementNode.Name == "content")
                {
                  if(elementNode.Attributes["lang"] == "ja-JP")
                  {
                    asset["page_body"] = Util.EscapeItem(elementNode.Value);
                  }
                }
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.MakeList(System.String[])">
            TODO: Does this belong in Services
            <summary>
              Convenience method for making a list of strings. You may pass an array of strings or a variable length list of
              strings like
              List&lt;string&gt; list = Util.MakeList("Apple","orange", "Banana");
            </summary>
            <param name="items">The items to turn into a list of ints.</param>
            <returns>List of Strings</returns>
            <example>
              <code lang="C#">
            <![CDATA[
             List<string> list = Util.MakeList("Apple","orange", "Banana");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.MakeList(System.Int32[])">
            <summary>
              Convenience method for making a list of strings. You may pass an array of ints or a variable length list of ints like
              List&lt;int&gt; list = Util.MakeList(4,8,15,16,23,42);
            </summary>
            <param name="items">The items to turn into a list of ints.</param>
            <returns>List of ints</returns>
            <example>
              <code lang="C#">
            <![CDATA[
             List<int> list = Util.MakeList(4,8,15,16,23,42);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.Email(System.String,System.String,System.Collections.Generic.List{System.String},System.String,CrownPeak.CMSAPI.ContentType)">
            <summary>
              Used to send an email from the cms.
            </summary>
            <param name="subject">The subject of the email.</param>
            <param name="message">The message body of the email.</param>
            <param name="recipients">A list of recipients</param>
            <param name="from">
              The From field of the email. The default value is null.  When null the from address will be
              cms@[instance name].com
            </param>
            <param name="contentType">Type of the content. Defaults to text/plain</param>
            <returns>True if the email was successfully sent.</returns>
            <example>
              Optional Parameter
              <code lang="C#">
            <![CDATA[
            Util.Email("This is my email", "I think you will enjoy reading it ^_^", Util.MakeList("test@test.com", "jaason@heavyrain.com"), "foo@bar.com");
            ]]>
            </code>
              HTML email
              <code lang="C#">
            <![CDATA[
            Util.Email("Check this site out!", "<a href=\"http://www.crownpeak.com\">Awesome CMS!</a>", Util.MakeList("test@test.com"), contentType: ContentType.TextHtml);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.Email(System.String,System.String,System.String,System.String,CrownPeak.CMSAPI.ContentType)">
            <summary>
              Used to send an email from the cms.
            </summary>
            <param name="subject">The subject of the email.</param>
            <param name="message">The message body of the email.</param>
            <param name="recipient">The recipient.</param>
            <param name="from">
              The From field of the email. The default value is null.  When null the from address will be
              cms@[instance name].com
            </param>
            <param name="contentType">Type of the content. Defaults to text/plain</param>
            <returns>True if the email was successfully sent.  Check context.Error if there is a failure.</returns>
            <example>
              <code lang="C#">
            <![CDATA[
                 if (!Util.Email("CrownPeak CMS!", "<a href=\"http://www.crownpeak.com\">CrownPeak</a>", "bar@bar.com", "foo@bar.com, ContentType.TextHtml))
                 {
                    Out.WriteLine("Failed to send email : " + context.Error);
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.EscapeItem(System.String)">
            <summary>
              Escapes html characters and all non-ASCII UTF-8 characters.  If the string already contains
              escaped values, such as &amp;amp;, it will not escape the &amp;.
            </summary>
            <param name="text">The text.</param>
            <returns>'Escaped' HTML equivalent of the input string.</returns>
            <example>
              <code lang="C#">
            Util.EscapeItem("apples &amp; oranges"), 
            </code>
              result: apples &amp; oranges
              Escaping Japanese characters:
              <code lang="C#">
            Util.EscapeItem("クラウンピーク")
            </code>
              result: &#12463;&#12521;&#12454;&#12531;&#12500;&#12540;&#12463;
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.HtmlEncode(System.String)">
            <summary>
              HTML Encodes the text.
            </summary>
            <param name="text">The text.</param>
            <returns>a string with encoded html</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            Util.HtmlEncode("<tr><td>This is a row in the table</td></tr>")
            ]]>
            </code>
              result: &lt;tr&gt;&lt;td&gt;This is a row in the table&lt;/td&gt;&lt;/tr&gt;
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.FilterFilename(System.String)">
            <summary>
              Filters the text based upon the Filename configuration in the CMS.
              The filters can be set at System > Configure > Filenames
            </summary>
            <param name="text">The text.</param>
            <returns>A filtered string based upon the Filename Configuration within the CMS</returns>
            <example>
              <code lang="c#">
             Util.FilterFilename("apples and oranges")
            </code>
              result: apples_oranges
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.FilterText(System.String,CrownPeak.CMSAPI.FilterTextType)">
            <summary>
              Filters the text based on the <see cref="T:CrownPeak.CMSAPI.FilterTextType" />.
            </summary>
            <param name="text">The text to filter</param>
            <param name="type">The type to base the filter on</param>
            <returns>The string</returns>
            <example>
              Alpha
              <code lang="C#"><![CDATA[Util.FilterText(@"ABC123DoReMeABC123DoReMe", FilterTextType.Alpha)]]></code>
              Result: ABCDoReMeABCDoReMe
              Alpha-numeric
              <code lang="C#"><![CDATA[Util.FilterText(@"1!2@3#4$5%6^7&8*9(0)-_=+abcdefghijklmnopqrstuvwxyz{[]}|\'`~", FilterTextType.AlphaNumeric)]]></code>
              Result: 1234567890AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz
              Filename
              <code lang="C#"><![CDATA[Util.FilterText(@"filter/this\text.", FilterTextType.Filename)]]></code>
              Result: filter-this-text.
              FilePath
              <code lang="C#"><![CDATA[Util.FilterText("/<FolderPath>/<FileName>/?", FilterTextType.Filepath)]]></code>
              Result: /FolderPath/FileName/
              Numeric
              <code lang="C#"><![CDATA[Util.FilterText("4The meaning of life the universe and everything2", FilterTextType.Numeric)]]></code>
              Result: 42
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.GetHttp(System.String,CrownPeak.CMSAPI.GetHttpParams)">
            <summary>
              Sends a GET request to the provided URL. Can accept a set of optional GetHttpParams to override the default timeout
              value
              of 30 seconds as well as adding headers to the request.
            </summary>
            <param name="url">The URL.</param>
            <param name="getHttpParams">The HTTP params.</param>
            <returns>
              A GetHttpResponse object which contains the response text as well as various meta data about the GET request.  A
              Status Code of -900
              is returned if a connection to the server could not be established.
            </returns>
            <example>
              Simple example:
              <code lang="C#">
            <![CDATA[
            string url = "http://www.crownpeak.com";
            GetHttpResponse response = Util.GetHttp(url);
            if(response.StatusCode >= 200 && response.StatusCode < 300)
            { 
              Out.WriteLine(response.ResponseText);
            }
            ]]>
            </code>
              Example using GetHttpParams
              <code lang="C#">
            <![CDATA[
            string url = "http://www.crownpeak.com";
            GetHttpParams getHttpParams = new GetHttpParams();
            getHttpParams.TimeOut = 20;
            getHttpParams.AddHeader("Accept-Encoding: gzip,deflate");
            
            GetHttpResponse response = Util.GetHttp(url, getHttpParams);
            
            if(response.StatusCode >= 200 && response.StatusCode < 300)
            {
              Out.WriteLine(response.ResponseText);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.PostHttp(System.String,CrownPeak.CMSAPI.PostHttpParams)">
            <summary>
              Sends a POST request to the provided URL. Use the PostHttpParams object to set the Post Data as well as optional
              values for timeout,
              headers, and content-type.
            </summary>
            <param name="url">The URL.</param>
            <param name="postHttpParams">The HTTP params.</param>
            <returns>
              A PostHttpResponse object which contains the response text as well as various meta data about the POST request.  A
              Status Code of -900
              is returned if a connection to the server could not be established.
            </returns>
            <example>
              <code lang="C#">
            <![CDATA[
            string url = "http://www.crownpeak.com";
            
            PostHttpParams postHttpParams = new PostHttpParams();
            postHttpParams.TimeOut = 20;
            postHttpParams.AddHeader("Accept-Encoding: gzip,deflate");
            postHttpParams.ContentType = "Content-Type: text/xml";
            
            PostHttpResponse response = Util.PostHttp(url, postHttpParams);
            
            if(response.StatusCode >= 200 && response.StatusCode < 300)
            {
              Out.WriteLine(response.ResponseText);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.DeleteHttp(System.String,CrownPeak.CMSAPI.DeleteHttpParams)">
            <summary>
              Sends a DELETE request to the provided URL. Use the DeleteHttpParams object to set optional values for timeout and
              headers.
            </summary>
            <param name="url">The URL.</param>
            <param name="postHttpParams">The HTTP params.</param>
            <returns>
              A DeleteHttpResponse object which contains the response text as well as various meta data about the DELETE request.
              A Status Code of -900
              is returned if a connection to the server could not be established.
            </returns>
            <example>
              <code lang="C#">
            <![CDATA[
            string url = "http://www.crownpeak.com";
            
            DeleteHttpParams deleteHttpParams = new DeleteHttpParams();
            deleteHttpParams.TimeOut = 20;
            
            DeleteHttpResponse response = Util.DeleteHttp(url, deleteHttpParams);
            
            if(response.StatusCode >= 200 && response.StatusCode < 300)
            {
              Out.WriteLine(response.ResponseText);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.PutHttp(System.String,CrownPeak.CMSAPI.PutHttpParams)">
            <summary>
              Sends a PUT request to the provided URL. Use the PostHttpParams object to set the Put Data as well as optional values
              for timeout,
              headers, and content-type.
            </summary>
            <param name="url">The URL.</param>
            <param name="postHttpParams">The HTTP params.</param>
            <returns>
              A PutHttpResponse object which contains the response text as well as various meta data about the PUT request.  A
              Status Code of -900
              is returned if a connection to the server could not be established.
            </returns>
            <example>
              <code lang="C#">
            <![CDATA[
            string url = "http://www.crownpeak.com";
            
            PutHttpParams postHttpParams = new PutHttpParams();
            putHttpParams.TimeOut = 20;
            putHttpParams.AddHeader("Accept-Encoding: gzip,deflate");
            putHttpParams.ContentType = "Content-Type: text/xml";
            
            PutHttpResponse response = Util.PutHttp(url, putHttpParams);
            
            if(response.StatusCode >= 200 && response.StatusCode < 300)
            {
              Out.WriteLine(response.ResponseText);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.StripHtml(System.String,System.Boolean)">
            <summary>
              Removes html tags from the given text.
            </summary>
            <param name="text">The text from which to strip the html tags.</param>
            <param name="decodeHtml">
              Optional: Defaults to true. If you do not want to decode escaped entities set decodeHtml to
              false.
            </param>
            <returns>A string without html tags.</returns>
            <example>
              <code lang="C#"><![CDATA[
            Util.StripHtml("<h1>Apples &amp; Bananas</h1>");
            ]]>
            </code>
              Output: " Apples &amp; Bananas "
              <code lang="C#">
            <![CDATA[
            Util.StripHtml("<h1>Apples &amp; Bananas</h1>", false);
            ]]>
            </code>
              Output: " Apples &amp;amp; Bananas "
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.StartCase(System.String)">
            <summary>
              Converts the text to Start Case, which is the capitalization of the first letter of each word.
              For langauges that don't have capital letters, such as Japanese, the string will not be converted
              to start case.
            </summary>
            <param name="text">The text.</param>
            <returns>Returns a copy of text that has been converted to start case.</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            Util.StartCase("this is a test")
            ]]>
            </code>
              result: This Is A Test
              The Following text is Japanese (クラウンピーク = CrownPeak) and will not be converted to start case
              <code lang="C#">
            <![CDATA[
            Util.StartCase("クラウンピーク");     
            ]]>
            </code>
              result: クラウンピーク
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.UrlEncode(System.String)">
            <summary>
              Used to encode characters that are not legal in URLs.
            </summary>
            <param name="text">The text.</param>
            <returns>String with encoded, legal URL characters.</returns>
            <example>
              <code lang="C#">
            
            
            
            Util.UrlEncode("This is a 'string' that needs to be "url" encoded.");    
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.WrapText(System.String,System.Int32,System.String)">
            <summary>
              Wraps the text by inserting the delimiter into the text at the specified interval.  WrapText will
              attempt to wrap the text at a word boundary in order preserve the readability of the text.  As a result,
              some of the intervals will be less than the size provided, but never greater.
            </summary>
            <param name="text">The text.</param>
            <param name="size">The size.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>
              A string wrapping the provided delimiter at the interval size.
            </returns>
            <example>
              <code lang="C#">
            <![CDATA[
            Util.WrapText(asset["article_body"], 15, "<br />");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.ConvertTextToHtml(System.String)">
            <summary>
              Replaces non standard characters to their HTML equivalent such as smart quotes.
            </summary>
            <param name="text">The converted text</param>
            <returns>String in HTML form.</returns>
            <example>
              <code lang="C#">
            <![CDATA[
            Util.ConvertTextToHtml("“I do not like green eggs and ham I do not like them sam I am.”");
            ]]>
            </code>
              "I do not like green eggs and ham I do not like them sam I am."
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.Paginate(CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              <para>
                For use with WYSIWYG fields only. Separates the field on page breaks, and returns a portion of the field based on
                the current page number (context.PageNumber).
                This may only be used in an output template.
              </para>
              <para>
                NOTE: Page numbers are added to filenames and URLs BEFORE any filename or url templates are run.  If those
                templates overwrite the publish path or publish URL,
                then the template should add the page number using the context.PageNumber property.
              </para>
            </summary>
            <param name="paginateThis">The asset containing the WYSIWYG field.</param>
            <param name="fieldName">Name of the WYSIWYG field.</param>
            <returns><see cref="T:CrownPeak.CMSAPI.PaginateFieldResult" />A PaginateFieldResult</returns>
            <example>
              <code lang="C#"><![CDATA[
             PaginateFieldResult result = Util.Paginate(asset, "Name");
             
             // Print links to other pages
            
             foreach (PageLink link in result.PaginatedLinks)
             {
               if (link.IsCurrent())
               {
               Out.WriteLine("{0}|", link.PageNumber);   
               }
               else
               {
               Out.WriteLine("<a href=\"{0}\">{1}</a>|", link, link.PageNumber);
               }
             }
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.Paginate(System.Collections.Generic.List{CrownPeak.CMSAPI.Asset},System.Int32)">
            <summary>
              <para>
                Separates an asset list into pages, and returns a portion of the list based on the current page number
                (context.PageNumber) and the given itemsPerPage.
                This may only be used in an output template.
              </para>
              <para>
                NOTE: Page numbers are added to filenames and URLs BEFORE any filename or url templates are run.  If those
                templates overwrite the publish path or publish URL,
                then the template should add the page number using the context.PageNumber property.
              </para>
            </summary>
            <param name="entireList">The list if assets to paginate.</param>
            <param name="itemsPerPage">The desired number of list items per page.</param>
            <returns>List containing the items appropriate for the current page</returns>
            <example>
              <code lang="C#"><![CDATA[
             List<Asset> pressReleases = folder.GetFileList();
             PaginateResult result = Util.Paginate(pressReleases, 10);
             // Print links to press releases on the current page
             foreach(Asset child in result)
             {
               Out.WriteLine("<a href=\"{0}\">{1}</a><br/>",child.GetLink(), child.Label);
             }
             
             // Print links to other pages
            
             foreach (PageLink link in result.PaginatedLinks)
             {
               if (link.IsCurrent())
               {
                 Out.WriteLine("{0}|", link.PageNumber);
               }
               else
               {
                 Out.WriteLine("<a href=\"{0}\">{1}</a>|", link, link.PageNumber);
               }
             }
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.Paginate(System.Collections.Generic.List{CrownPeak.CMSAPI.PanelEntry},System.Int32)">
            <summary>
              <para>
                Separates a PanelEntry list into pages, and returns a portion of the list based on the current page number
                (context.PageNumber) and the given itemsPerPage.
                This may only be used in an output template.
              </para>
              <para>
                NOTE: Page numbers are added to filenames and URLs BEFORE any filename or url templates are run.  If those
                templates overwrite the publish path or publish URL,
                then the template should add the page number using the context.PageNumber property.
              </para>
            </summary>
            <param name="entireList">The list if assets to paginate.</param>
            <param name="itemsPerPage">The desired number of list items per page.</param>
            <returns>List containing the items appropriate for the current page</returns>
            <example>
              <code lang="C#"><![CDATA[
             List<PanelEntry> panels = asset.GetPanels("field");
             PaginatePanelResult result = Util.Paginate(panels, 10);
             // Print links to press releases on the current page
             foreach(PanelEntry panel in result)
             {
               Out.WriteLine("<p>{0}</p>", panel["field"]);
             }
             
             // Print links to other pages
            
             foreach (PageLink link in result.PaginatedLinks)
             {
               if (link.IsCurrent())
               {
                 Out.WriteLine("{0}|", link.PageNumber);
               }
               else
               {
                 Out.WriteLine("<a href=\"{0}\">{1}</a>|", link, link.PageNumber);
               }
             }
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.GetWorkflowTransitions(System.Int32)">
            <summary>
              Returns workflow transition information for the given asset.  These represent
              state changing transitions (and refreshes).  They are recorded in the audit.
              This method extracts workflow related transitions from the audit.
            </summary>
            <param name="assetId">The id of the asset whose transitions we want to see</param>
            <returns>Returns an array of Transition<see cref="T:CrownPeak.CMSAPI.Transition" /> objects</returns>
            <example>
              <code lang="C#"><![CDATA[
              Transition[] transitions = Util.GetWorkflowTransitions(asset.Id);
              foreach (Transition t in transitions)
              {
                Out.WriteLine("Transition: from=" + t.FromState + " to=" + t.ToState + " user=" + t.UserName + " date=" + t.Date); 
              }
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.IsInternalLink(System.String)">
            <summary>
              <![CDATA[Determines wether or not the specified link is an internal cms like of the form /<ClientName>/cpt_internal/]]>
            </summary>
            <param name="link">The link to check.</param>
            <returns>
              <c>true</c> <![CDATA[if the link is of the form /<ClientName>/cpt_internal/; otherwise, ]]><c>false</c>.
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.GetExtension(System.String)">
            <summary>
              Takes a filename and returns its extension. Wil return empty if no extension is found.
              <para>Ex: GetExtension("input.aspx") will return "aspx"</para>
            </summary>
            <param name="filename">File name to extract the extension from.</param>
            <returns>The extension without the ".", or an empty string.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.PostToTwitter(System.Int32,System.String,System.String,System.String)">
            <summary>
              Post the content stored in the given asset from the field with the given name to the accoutn specified by account id.
            </summary>
            <param name="assetid">The asset id to post</param>
            <param name="postFieldName">The name of the field to post</param>
            <param name="postOverrideName">
              Name of field that tells whether to post again even if already published.  A value of
              "yes" will cause the override
            </param>
            <param name="accountId">Twitter Account name</param>
            <returns>
              A string indicating the result.  OK indicates success, otherwise may be an error message. Error messages may
              reference HTTP status codes or
              Twitter specific errors see <seealso href="https://dev.twitter.com/docs/error-codes-responses" target="_blank" /> for
              more info
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.PostToTwitter(System.String,System.String)">
            <summary>
              Post the given message to the given twitter account.
              Be careful.  This method has no built-in mechanism to prevent double-posts.  Make sure it only runs once per message.
            </summary>
            <param name="message">The message</param>
            <param name="accountId">Twitter Account name</param>
            <returns>
              A string indicating the result.  OK indicates success, otherwise may be an error message. Error messages may
              reference HTTP status codes or
              Twitter specific errors see <seealso href="https://dev.twitter.com/docs/error-codes-responses" target="_blank" /> for
              more info
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.ShortenWithBitly(System.String)">
            <summary>
              Returns a shortened URL using bitly shortening service
              Uses first Bitly account from Connectors configuration screen that it finds.  Useful if only one account is setup.
              Use the overload to
              specify a connector if there is more than one.
              Bitly connectors must have a username and password.  The Server is optional.  Leave it blank and
              http://api.bitly.com/v3 will be used.  That is what is recommended.
            </summary>
            <param name="url">URL to shorten</param>
            <returns>Shortened URL</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.ShortenWithBitly(System.String,System.String)">
            <summary>
              Returns a shortened URL using bitly shortening service
              Bitly connectors must have a username and password.  The Server is optional.  Leave it blank and
              http://api.bitly.com/v3 will be used.  That is what is recommended.
            </summary>
            <param name="connectorName">Name connector on connector configuration screen that specifies which bitly account to use</param>
            <param name="url">URL to shorten</param>
            <returns>Shortened URL</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.Editable(System.String,CrownPeak.CMSAPI.PanelEntry,CrownPeak.CMSAPI.Asset)">
            <summary>
              Returns HTML attributes that enable the editing selection boxes for an asset field in the CMS.
              For use in output templates only. The attributes should be inserted into the wrapping HTML tag.
              If the editable element is inside a list panel, also include the <see cref="T:PanelEntry" />.
              If the editable element is inside another asset, also include the <see cref="T:Asset" />
            </summary>
            <param name="fieldName">The name of the field</param>
            <param name="panel">
              Optional: If the field is accessed from a <see cref="T:PanelEntry" />, the
              <see cref="T:PanelEntry" />. Defaults to null.
            </param>
            <param name="asset">Optional: The asset that contains the field. Defaults to <see cref="P:CrownPeak.CMSAPI.Context.CurrentAsset" />.</param>
            <returns>A list of HTML tag attributes</returns>
            <remarks>
              For common field types, the CMS automatically handles the creation of editable field selection boxes,
              so fields can be selected in the CMS directly from the page preview. However, there are certain cases
              where the CMS cannot do this automatically. In such cases this method may be used instead. See the
              examples for details on how to use it.
            </remarks>
            <example>
              Simple case:
              <code lang="C#"><![CDATA[
                string fieldName = "acquired_asset";
                var otherAsset = Asset.Load(asset[fieldName]);
                Out.WriteLine("<li {0}><a href=\"{1}\">{2}</a></li>", Util.Editable(fieldName), otherAsset.GetLink(), otherAsset.Label);
              ]]></code>
              In a list panel:
              <code lang="C#"><![CDATA[
                string fieldName = "acquired_asset";
                foreach (PanelEntry panel in asset.GetPanels("asset_list"))
                {
                  var otherAsset = Asset.Load(panel[fieldName]);
                  Out.WriteLine("<li {0}><a href=\"{1}\">{2}</a></li>", Util.Editable(fieldName, panel), otherAsset.GetLink(), otherAsset.Label);
                }
                var otherAsset = Asset.Load(asset[fieldName]);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.PostToPingFm(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
              <para>
                Post a message to Ping FM
              </para>
              <para>
                NOTE:  It was announced by Seesmic in May 2012 that Ping.fm was going to be close down by Mid June 2012.
                This call may stop working in the near future.  CrownPeak is planning to
                eventually support the new HootSuite APIs.
              </para>
            </summary>
            <param name="assetid">The asset containing a message to send</param>
            <param name="postFieldName">The field on the asset that where the message is stored</param>
            <param name="postOverrideName">The name of a field on the asset that says whether to override, send the message again</param>
            <param name="apiKey">The Api Key</param>
            <param name="userAppKey">The user app key</param>
            <param name="postMethod">post method - defaults to "default". Choices are blog, microblog, status and default.</param>
            <returns>OK if successful</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.PostPingFmWithCrownPeakKey(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
              <para>
                Post a message to Ping FM using CrownPeak's API key
              </para>
              <para>
                NOTE:  It was announced by Seesmic in May 2012 that Ping.fm was going to be close down by Mid June 2012.
                This call may stop working in the near future.  CrownPeak is planning to
                eventually support the new HootSuite APIs.
              </para>
            </summary>
            <param name="assetid">The asset containing a message to send</param>
            <param name="postFieldName">The field on the asset that where the message is stored</param>
            <param name="postOverrideName">The name of a field on the asset that says whether to override, send the message again</param>
            <param name="userAppKey">The user app key</param>
            <param name="postMethod">post method - defaults to "default". Choices are blog, microblog, status and default.</param>
            <returns>OK if successful</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.PostMessageToPingFmWithCrownPeakKey(System.String,System.String,System.String)">
            <summary>
              <para>
                Post a message to Ping FM using CrownPeak's API key
              </para>
              <para>
                NOTE:  It was announced by Seesmic in May 2012 that Ping.fm was going to be close down by Mid June 2012.
                This call may stop working in the near future.  CrownPeak is planning to
                eventually support the new HootSuite APIs.
              </para>
            </summary>
            <param name="message">The message to send</param>
            <param name="userAppKey">The user app key</param>
            <param name="postMethod">post method - defaults to "default". Choices are blog, microblog, status and default.</param>
            <returns>OK if successful</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.PostMessageToPingFm(System.String,System.String,System.String,System.String)">
            <summary>
              <para>
                Post a message to Ping FM using CrownPeak's API key
              </para>
              <para>
                NOTE:  It was announced by Seesmic in May 2012 that Ping.fm was going to be close down by Mid June 2012.
                This call may stop working in the near future.  CrownPeak is planning to
                eventually support the new HootSuite APIs.
              </para>
            </summary>
            <param name="message">The message to send</param>
            <param name="apiKey">The Api Key</param>
            <param name="userAppKey">The user app key</param>
            <param name="postMethod">post method - defaults to "default". Choices are blog, microblog, status and default.</param>
            <returns>OK if successful</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.DecodeEntities(System.String)">
            <summary>
              Decodes HTML encoded entities only and changes them to characters.
            </summary>
            <param name="toDecode">
              A string that might contain HTML encoded entities. Only decodes entities of the form &amp;#nnn;
              where nnn is the unicode character value.
            </param>
            <returns>A unicode string</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.ReplaceCptInternals(System.String,System.Boolean,CrownPeak.CMSAPI.ProtocolType)">
            <summary>
              <para>Finds cpt_internal style links in your HTML and replaces them with links appropriate for the current context.</para>
            </summary>
            <param name="html">The html content.</param>
            <param name="addDomain">
              Optional: If true add HostName for current publishing package to link.  Defaults to false. Must
              be in OutputContext (output template or filename or url template) and publishing. No effect in Preview. Defaults to false.
            </param>
            <param name="protocolType">
              Optional: If addDomain is true, determines if the protocol should be added and whether to
              use http or https. No effect in Preview.<see cref="T:CrownPeak.CMSAPI.ProtocolType">indexer</see>. Defaults to http.
            </param>
            <returns>The transformed html output.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.ReplaceAttachments(System.String)">
            <summary>
              <para>
                Finds upload style links in your HTML and replaces them with links appropriate for the current context.
                This may only be used in an output template.
              </para>
            </summary>
            <param name="htmlOrString">The string to be serialized.</param>
            <returns></returns>
            <example>
              <code lang="C#"><![CDATA[
             String htmlWithLiveLinks = Util.ReplaceAttachments(htmlWithUploadPaths);
             ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.Log(CrownPeak.CMSAPI.Asset,System.String,System.Object[])">
            <summary>
              Logs a Custom log in the context of the given asset with the given message string.  The log will
              be added to the asset's History (Properties > History) with the action type "Custom" and will only
              be displayed when "Custom" is selected from the drop-down.
            </summary>
            <param name="asset">The asset to which the log applies</param>
            <param name="message">The message to log</param>
            <param name="args">Optional : The variables to be inserted into a message</param>
            <example>
              <code lang="C#"><![CDATA[
                  // logs to the current asset's history 
                 Util.Log(asset, "this is my message");
                 Util.Log(asset, "The {0} is {1}", "id", asset.Id);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.Log(System.String,System.Object[])">
            <summary>
              Logs a Custom log in the global context with no applicable asset with the given message string The log will
              be added to the System History (Reports > Audit > System) with the action type "Custom"and will only
              be displayed when "Custom" is selected from the drop-down.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">Optional : The variables to be inserted into a message</param>
            <example>
              <code lang="C#"><![CDATA[
                 Util.Log("this is my message");
                 Util.Log("The {0} is {1}", "date", DateTime.Now.Date);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.SerializeXml(System.Object,System.Boolean)">
            <summary>
              Define a class that uses [XmlElement], [XmlAttribute], and other tags and you can then serialize an instance
              of that class to XML with this method
            </summary>
            <param name="obj"></param>
            <param name="serializeEntitiesAsXml">
             Optional: Set to true to un-escape characters &amp;#3704; to &#3704; Default is false;
            </param>
            <returns>The serialized XML.</returns>
            <example>
              <code lang="C#"><![CDATA[
               //create the class you will use. (system/library/userlist.cs)
               public class UserList
               {
                 [XmlElement]
                 public List<string> Name { get; set; }
                 public UserList()
                 {
                   Name = new List<string>();
                 }
               }
               //-- serialize --
               List<string> nameList = new List<string>();
               nameList.Add("Bob");
               nameList.Add("Ralph");
               UserList userListClass = new UserList() { Name = nameList };
               string xml = Util.SerializeXml(userListClass);
               Out.WriteLine(xml);
               //output will render the following:
               <?xml version = "1.0" ?>
                 < UserList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
               <Name>Bob</Name>
               <Name>Ralph</Name>
               </UserList>
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.DeserializeXml(System.String,System.Type)">
            <summary>
              Define a class that uses [XmlElement], [XmlAttribute], and other tags and you can then create an object from XML
              with this method
            </summary>
            <param name="xml"></param>
            <param name="objType"></param>
            <returns>The un-serialized XML.</returns>
            <example>
              <code lang="C#"><![CDATA[
               //create the class you will use. (system/library/userlist.cs)
               public class UserList
               {
                 [XmlElement]
                 public List<string> Name { get; set; }
                 public UserList()
                 {
                   Name = new List<string>();
                 }
               }
               //-- serialize --
               List<string> nameList = new List<string>();
               nameList.Add("Bob");
               nameList.Add("Ralph");
               UserList userListClass = new UserList() { Name = nameList };
               string xml = Util.SerializeXml(userListClass);
               //xml output will render the following:
                 <?xml version = "1.0" ?>
                 < UserList xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
               <Name>Bob</Name>
               <Name>Ralph</Name>
               </UserList>
               //-- deserialize --
               UserList deserializedUserListClass = (UserList)Util.DeserializeXml(xml, typeof(UserList));
               Out.WriteLine("First User from Xml: " + deserializedUserListClass.Name[0]);
               Out.WriteLine("Second User from Xml: " + deserializedUserListClass.Name[1]);
               //output will render the following:
               First User from Xml: Bob
                 Second User from Xml: Ralph
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.serializer_UnknownNode(System.Object,System.Xml.Serialization.XmlNodeEventArgs)">
            <summary>
              Handles unknown nodes when they are parsed and writes them to the Debug window
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.serializer_UnknownAttribute(System.Object,System.Xml.Serialization.XmlAttributeEventArgs)">
            <summary>
              Handles unknown attributes when they are parsed and writes them to the Debug window
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.SerializeDataContractJson(System.Object)">
            <summary>
              Define a class that uses [DataContract], [DataMember], and [EnumMember] tags and you can then serialize an instance
              of that class to JSON with this method
              <para>
                Use the Name property in the DataMember to use a name that is different from the property name --
                [DataContract(Name="MySpecialName")]
              </para>
              <para>
                Use the Namespace in the DataContract to use a namespace that is custom for XML --  [DataContract(Namespace =
                "MySpecialNamespace")]
              </para>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.SerializeDataContractJson(System.DateTime,System.String)">
            <summary>
            Overload for SerializeDataContractJson specifically for DateTime types that need custom formatting
            </summary>
            <param name="dateTime"></param>
            <param name="format">Custom formatting string. If specified as empty string, default to: "2017-04-01T00:00:00.0000000"</param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.SerializeDataContractXml(System.Object,System.Boolean,System.Boolean)">
            <summary>
              Define a class that uses [DataContract], [DataMember], and [EnumMember] tags and you can then serialize an instance
              of that class to XML with this method
              <para>
                Use the Name property in the DataMember to use a name that is different from the property name --
                [DataContract(Name="MySpecialName")]
              </para>
              <para>
                Use the Namespace in the DataContract to use a namespace that is custom for XML --  [DataContract(Namespace =
                "MySpecialNamespace")]
              </para>
            </summary>
            <param name="obj"></param>
            <param name="indent">
              Optional: Set to true to produce indented XML that is more readable. It will also add the XML
              declaration automatically.  Default is false
            </param>
            <param name="serializeEntitiesAsXml">
             Optional: Set to true to unescape characters &amp;#3704; to &#3704; Default is false;
            </param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.DeserializeDataContractJson(System.String,System.Type)">
            <summary>
              Define a class that uses [DataContract], [DataMember], and [EnumMember] tags and you can then create an object from a
              json representation of the object
              with this method
              <para>
                Use the Name property in the DataMember to use a name that is different from the property name --
                [DataContract(Name="MySpecialName")]
              </para>
              <para>
                Use the Namespace in the DataContract to use a namespace that is custom for XML --  [DataContract(Namespace =
                "MySpecialNamespace")]
              </para>
            </summary>
            <param name="json"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Util.DeserializeDataContractXml(System.String,System.Type)">
            <summary>
              Define a class that uses [DataContract], [DataMember], and [EnumMember] tags and you can then create an object from a
              xml representation of the object
              with this method
              <para>
                Use the Name property in the DataMember to use a name that is different from the property name --
                [DataContract(Name="MySpecialName")]
              </para>
              <para>
                Use the Namespace in the DataContract to use a namespace that is custom for XML --  [DataContract(Namespace =
                "MySpecialNamespace")]
              </para>
            </summary>
            <param name="xml"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesHelpDocTemplates.DisplayFolderContent(CrownPeak.CMSAPI.Asset)">
            <summary>
              ServicesHelpDocTemplates.DisplayFolderContent();
              <para>Output function for displaying folder content in help documentation only.</para>
            </summary>
            <param name="asset"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesHelpDocTemplates.ShowBreadCrumbs(CrownPeak.CMSAPI.Asset)">
            <summary>
              ServicesHelpDocTemplates.ShowBreadCrumbs();
              <para>Output Function for Help Pages Breadcrumbs</para>
            </summary>
            <param name="asset">Asset to generate breadcrumb trail</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesHelpDocTemplates.LandingInput(CrownPeak.CMSAPI.Asset)">
            <summary>
              ServicesHelpDocTemplates.LandingInput();
              <para>Input Template for Help Section Landing Page</para>
            </summary>
            <param name="asset">asset to display input</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesHelpDocTemplates.ContentInput(CrownPeak.CMSAPI.Asset)">
            <summary>
              ServicesHelpDocTemplates.ContentInput();
              <para>Input Template for Help Content Page</para>
            </summary>
            <param name="asset">asset to display input</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesHelpDocTemplates.PostSaveInput(CrownPeak.CMSAPI.Asset)">
            <summary>
              ServicesHelpDocTemplates.PostSaveInput();
              <para>Post Save Code for Help Landing Page</para>
            </summary>
            <param name="asset">asset to process after save</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesHelpDocTemplates.NavWrapper(CrownPeak.CMSAPI.Asset)">
            <summary>
              ServicesHelpDocTemplates.NavWrapper();
              <para>Nav Wrap Output Code for Help Section</para>
            </summary>
            <param name="asset">asset to display output</param>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.ServicesInput">
            <summary>
              // * ServicesInput - WYSIWYG *
              This include is meant to house and structure all the various types of WYSIWYGs.
              This code is broken out from inc_input_elements primarily just to make the file easier to manage.
              Each of the WYSIWYG functions is just a few lines and is self defining.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.ShowMetaRobotsInput(System.Boolean)">
            <summary>
              Input for standard meta robots options, useful for SEO
            </summary>
            <param name="isConfig">Indicates if the current asset is the site configuration asset</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesInput.ShowMetaRobotsInput();
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.ShowMetaInput(System.Boolean)">
            <summary>
              Creates Input fields for common Meta/SEO tags.  Use with ServicesOutput.RenderMetaOutput to populate your output
            </summary>
            <param name="sConfig">Indicates if the current asset is the site configuration asset</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesInput.ShowMetaInput();
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.SetAcquireParams(System.String,System.Boolean,System.Boolean)">
            <summary>
              A shortcut for generating a ShowAcquireParams object useful for Internal links
            </summary>
            <param name="_path">Set path for acquireParams.DefaultFolder</param>
            <param name="_showUpload">Toggle acquireParams.ShowUpload</param>
            <param name="_showBrowse">Toggle acquireParams.ShowBrowse</param>
            <returns>ShowAcquireParams object</returns>
            <example>
              <code lang="C#"><![CDATA[
            ShowAcquireParams docParams = ServicesInput.SetAcquireParams(asset.AssetPath.ToString(), flase, true);
            Input.ShowAcquireDocument("Select Document","Acquire_Doc", docParams);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.ShowDescInput(CrownPeak.CMSAPI.Asset,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generic Page Fields
              <para>
                Note: This will create a section that includes an image upload control.  The Image upload control is setup to
                create a thumbnail on upload.
              </para>
              <para>Upload.aspx and post_input.aspx are not needed to manage the images.</para>
              <para>
                The original image name will be "original" and the resulting thumbnail will be called "thumbnail" unless a
                different values are
                passed to the optional originalName or thumbnailName fields.
                The alt text field name will be thumbnailName + "_alt"
              </para>
            </summary>
            <param name="asset">current asset, used to display additional controls if the template label is "Detail Page"</param>
            <param name="originalName">Optional: The fieldname to use for the original image.  Default is "original"</param>
            <param name="thumbnailName">Optional: The fieldname to use for the thumbnail.  Default is "thumbnail"</param>
            <param name="width">Optional:   The desired width.  Default 95</param>
            <param name="height">Optional:   The desired height.  Default 63</param>
            <example>
              <code lang="c#">
            <![CDATA[
            ServicesInput.ShowDescInput(asset, "original_image", "thumbnail", 50, 50);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.StandardWYSIWYGParams">
            <summary>
              Typical set of params used for most all WYSIWYGs
            </summary>
            <returns>WysiwygParams</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.StandardWYSIWYGButtons(CrownPeak.CMSAPI.WysiwygParams)">
            <summary>
              A typical set of buttons
            </summary>
            <param name="wParams"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.CompressedWYSIWYGButtons(CrownPeak.CMSAPI.WysiwygParams)">
            <summary>
              compact
            </summary>
            <param name="wParams"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.FullWYSIWYGButtons(CrownPeak.CMSAPI.WysiwygParams)">
            <summary>
              Pretty much all buttons included
            </summary>
            <param name="wParams"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.MediumWYSIWYG">
            <summary>
              A very typical WYSIWYG
            </summary>
            <returns>WysiwygParams to use in the Input.ShowWysiwyg() control</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = ServicesInput.MediumWYSIWYG();
             Input.ShowWysiwyg("Page Body", "page_body", wParams);    
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.CompressedWYSIWYG">
            <summary>
              For use in cramped quarters
            </summary>
            <returns>WysiwygParams to use in the Input.ShowWysiwyg() control</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = ServicesInput.CompressedWYSIWYG();
             Input.ShowWysiwyg("Page Body", "page_body", wParams);    
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.FullWYSIWYG">
            <summary>
              A big WYSIWYG with all the options
            </summary>
            <returns>WysiwygParams to use in the Input.ShowWysiwyg() control</returns>
            <example>
              <code lang="c#">
            <![CDATA[
             WysiwygParams wParams = ServicesInput.FullWYSIWYG();
             Input.ShowWysiwyg("Page Body", "page_body", wParams);    
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.ShowSiteMapInput(System.Boolean)">
            <summary>
              Input for configuring page and global-level XML sitemap options.  The resulting content fields can be crawled when
              creating XML sitemaps
            </summary>
            <param name="isConfig">Indicates if the current asset is the site configuration asset</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesInput.ShowSiteMapInput();
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.ShowDateTime(System.String,System.Boolean,System.Boolean)">
            <summary>
              Accepts a folder and filterParams, uses aGetFilterList to return a dictionary of assets.
              Dictionary values will be {asset.Label, asset.BranchId} OR if useBranchId is false {asset.Label, asset.Id}
            </summary>
            <param name="assetFolder"></param>
            <param name="fParams"></param>
            <param name="useBranchId"></param>
            <returns></returns>
            <summary>
              ServicesInput.DateTime
              <para>
                ServicesInput.DateTime creates a group of input fields for managing datetime values.  Use with
                ServicesPostInput.SetDateTime to save as a consolodated field for use in sorting and output.
              </para>
            </summary>
            <param name="fieldName">Name to give to the Date/Time field</param>
            <param name="showSeconds">Toggle display of the dropdown menue for seconds</param>
            <param name="horizontalWrap">Toggle Input.StartHorizontalWrapContainer() around the Date/Time field</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesInput.ShowDateTime("Date_Time", true, true);
            ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.ServicesInput.ShowDate">
            <summary>
              Enumerated types used for ServicesInput.ShowInputHeader
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.ServicesInput.ShowSummary">
            <summary>
              Enumerated types used for ServicesInput.ShowInputHeader
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.ShowInputHeader(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,CrownPeak.CMSAPI.Services.ServicesInput.ShowDate,CrownPeak.CMSAPI.Services.ServicesInput.ShowSummary)">
            <summary>
              Generates generic Page Fields for input
              <para>
                Creates a standard content header for use across your site.  Consistent fieldnames can simplify maintenance and
                revisions of templates.
              </para>
            </summary>
            <param name="showPageLabel">Displays text box for the Page Label</param>
            <param name="showPageTitle">Displays text box for the Page Title</param>
            <param name="showShortTitle">Displays text box for the Pages alternative shorter title</param>
            <param name="showAuthor">Toggle display of author information</param>
            <param name="authorFolderPath">Path of folder that holds author assets</param>
            <param name="authorTemplateName">Name of the template used by the author assets</param>
            <param name="showDate">
              Enum to toggle display of date. Options are: ShowDate.SimpleDate or ShowDate.FullDate. Default
              is ShowDate.None.
            </param>
            <param name="showSummary">
              Enum to toggle the use of a WYSIWYG or a text box for the summary. Options are:
              ShowSummary.WYSIWYG or ShowSummary>Textbox. Default is ShowSummary.None.
            </param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesInput.ShowInputHeader(true, true, true, false, "", "Author", ServicesInput.ShowDate.FullDate, ServicesInput.ShowSummary.WYSIWYG);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.ShowInputHeader(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
              Generates generic Page Fields for input
              <para>
                Creates a standard content header for use across your site.  Consistent fieldnames can simplify maintenance and
                revisions of templates.
              </para>
            </summary>
            <param name="showPageLabel">Displays text box for the Page Label</param>
            <param name="showPageTitle">Displays text box for the Page Title</param>
            <param name="showShortTitle">Displays text box for the Pages alternative shorter title</param>
            <param name="showAuthor">Toggle display of author information</param>
            <param name="authorFolderPath">Path of folder that holds author assets</param>
            <param name="authorTemplateName">Name of the template used by the author assets</param>
            <param name="showSimpleDate">
              Toggle display of simple date
              <remarks>Overwrites showFullDate</remarks>
            </param>
            <param name="showFullDate">Toggle display of full date</param>
            <param name="showWYSIWYGSummary">Toggle use of a WYSIWYG for the summary</param>
            <param name="showTextboxSummary">
              Toggle use of a Text Box for the summary
              <remarks>Overwrites showWYSIWYGSummary</remarks>
            </param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesInput.ShowInputHeader(true, true, true, false, "", "Author", false, true, true, false);
            ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.ServicesInput.ShowHyperLinkParams">
            <summary>
              Initializes a new instance of the <see cref="T:CrownPeak.CMSAPI.Services.ServicesInput.ShowHyperLinkParams" /> class with the default parameters.
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.ShowHyperLink(System.String,CrownPeak.CMSAPI.Services.ServicesInput.ShowHyperLinkParams,System.String)">
            <summary>
              Creates a set of fields for managing a common HyperLink with options such as internal/external, target type, a text
              or image title, etc.  Update to 2 levels of navigation.
            </summary>
            <param name="fieldName">
              Name that is to be used as a prefix for the fields.
              <para>Note: If used in a list panel, the fieldName of the list panel must match this one.</para>
            </param>
            <param name="linkParams">ShowHyperLinkParams object.</param>
            <param name="browsePath">Optional: Default browsing path for selecting assets.</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesInput.ShowHyperLinkParams linkParams = new ServicesInput.ShowHyperLinkParams();
            while(Input.NextPanel("Hyperlink"))
            {
              ServicesInput.ShowHyperLink("Hyperlink", linkParams);
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesInput.ShowHyperLink(System.String)">
            <summary>
              Creates a set of fields for managing a common HyperLink with options such as internal/external, target type, a text
              or image title, etc.  Update to 2 levels of navigation.
            </summary>
            <param name="fieldName">
              Name that is to be used as a prefix for the fields.
              <para>Note: If used in a list panel, the fieldName of the list panel must match this one.</para>
            </param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesInput.ShowHyperLink("Hyperlink");
            ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.ServicesMinifier">
            <summary>
              Class for Minfication of CSS and JS
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesMinifier.MinifyJS(System.String)">
            <summary>
              Minifier for JavaScript
            </summary>
            <param name="javascriptCode">JavaScript code as a string</param>
            <returns>string of minified JavaScript. Check context.Error for error list.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesMinifier.MinifyJS(CrownPeak.CMSAPI.Asset)">
            <summary>
              Minifier for JavaScript
              <para>Uses UTF-8 to decode a binary JS file.</para>
            </summary>
            <param name="jsAsset">JavaScript file</param>
            <returns>string of minified JavaScript. Check context.Error for error list.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesMinifier.MinifyCSS(System.String)">
            <summary>
              Minifier for CSS
            </summary>
            <param name="cssCode">CSS code as a string</param>
            <returns>string of minified CSS. Check context.Error for error list.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesMinifier.MinifyCSS(CrownPeak.CMSAPI.Asset)">
            <summary>
              Minifier for CSS
              <para>Uses UTF-8 to decode a binary CSS file.</para>
            </summary>
            <param name="cssAsset">CSS file</param>
            <returns>string of minified CSS. Check context.Error for error list.</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderScriptLink(CrownPeak.CMSAPI.Asset,System.String,System.String,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              For creating links to JavaScript assets. Given an asset, renders a link to it in an HTML script element.
              Use as a convenience function for creating links to javascript assets.
            </summary>
            <param name="scriptAsset">Script Asset to Load</param>
            <param name="scriptType">Optional script type; the default is text/javascript</param>
            <param name="qString">Optional query string appended to the Javascript link</param>
            <param name="context">Optional current OutputContext for checking the publishing status</param>
            <returns>String containing the HTML code for loading a script file</returns>
            <example>
              <code lang="C#"><![CDATA[
             Out.WriteLine( ServicesOutput.RenderScriptLink(scriptAsset,"text/javascript",context) );
             //returns: <script type="text/javascript" src="/js/scripts.js?"></script>   assuming /_assets/ are published to the site root on publishing properties
            
             Asset scriptAsset = Asset.Load(asset["Script_Asset"]);
             if(scriptAsset.IsLoaded)
             {
               Out.WriteLine( ServicesOutput.RenderScriptLink(scriptAsset,"text/javascript","SampleQString",context) );
             }
             //returns: <script type="text/javascript" src="/js/scripts.js?SampleQString"></script>   assuming /_assets/ are published to the site root on publishing properties 
             ]]></code>
              <remarks>Returned string will only be visible when viewing source</remarks>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderScriptLink(System.String,System.String,System.String,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              For creating links to JavaScript assets. Loads an asset by path and renders a link to it in an HTML script element.
              Use as a convenience function for creating links to javascript assets.
            </summary>
            <param name="scriptPath">Path of the Script Asset to Load</param>
            <param name="scriptType">Optional script type; the default is text/javascript</param>
            <param name="qString">Optional query string appended to the Javascript link</param>
            <param name="context">Optional current OutputContext for checking the publishing status</param>
            <returns>String containing the HTML code for loading a script file</returns>
            <example>
              <code lang="C#"><![CDATA[
             Out.WriteLine( ServicesOutput.RenderScriptLink(scriptPath,"text/javascript",context) );
             //returns: <script type="text/javascript" src="/js/scripts.js?"></script>   assuming /_assets/ are published to the site root on publishing properties
            
             string scriptPath = "/SAMPLE Pharmaceutical/_Assets/js/scripts.js";
             Out.WriteLine( ServicesOutput.RenderScriptLink(scriptPath,"text/javascript","SampleQString",context) );
             //returns: <script type="text/javascript" src="/js/scripts.js?SampleQString"></script>   assuming /_assets/ are published to the site root on publishing properties 
             ]]></code>
              <remarks>The returned string will only be visible when viewing source</remarks>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderScriptLink(System.Int32,System.String,System.String,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              For creating links to JavaScript assets. Loads an asset by Id and renders a link to it in an HTML script element.
              Use as a convenience function for creating links to javascript assets.
            </summary>
            <param name="scriptId">ID of the Script Asset to Load</param>
            <param name="scriptType">Optional script type; the default is text/javascript</param>
            <param name="qString">Optional query string appended to the Javascript link</param>
            <param name="context">Optional current OutputContext for checking the publishing status</param>
            <returns>String containing the HTML code for loading a script file</returns>
            <example>
              <code lang="C#"><![CDATA[
             Out.WriteLine( ServicesOutput.RenderScriptLink(scriptAsset.Id, context:context) );
             //returns: <script type="text/javascript" src="/js/scripts.js?"></script>   assuming /_assets/ are published to the site root on publishing properties
            
             Asset scriptAsset = Asset.Load("/SAMPLE Pharmaceutical/_Assets/js/scripts.js");
             Out.WriteLine( ServicesOutput.RenderScriptLink(scriptAsset.Id,"text/javascript","SampleQString",context) );
             //returns: <script type="text/javascript" src="/js/scripts.js?SampleQString"></script>   assuming /_assets/ are published to the site root on publishing properties
             ]]></code>
              <remarks>The returned string will only be visible when viewing source</remarks>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderCSSLink(CrownPeak.CMSAPI.Asset,System.String,System.String,System.String,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              For creating links to CSS assets. Accepts an asset and renders a link to it as an HTML link element.
              Use as a convenience function when building wrapper templates and anywhere you need to load a css asset in output.
            </summary>
            <param name="cssAsset">The CMS Asset that contains the CSS code.</param>
            <param name="mediaType">Optional mediatype.</param>
            <param name="cssIdAttribute">Optional html ID attribute for css link.</param>
            <param name="qString">Optional query string appended to css link on publishing link.</param>
            <param name="context">Optional current OutputContext for checking the publishing status.</param>
            <returns>String containing HTML code for loading a CSS Asset.</returns>
            <example>
              <code lang="C#"><![CDATA[
             Out.WriteLine(ServicesOutput.RenderCSSLink(cssAsset, context: context));
             /*returns and outputs:
             <link rel="stylesheet" type="text/css" href="[[cssAsset publishing path or cms path]]?" */
            
             Asset cssAsset = Asset.Load(asset["css_Asset"]);
             if (cssAsset.IsLoaded)
             {
               Out.WriteLine( ServicesOutput.RenderCSSLink(cssAsset, mediaType: "print", cssIdAttribute: "myCssIdAttribute", qString: "myQString", context) );
             }
             /*returns and outputs:
             <link rel="stylesheet" type="text/css" href="[[cssAsset publishing path or cms path]]?myQString" media="print" id="myCssIdAttribute" />
             assuming both the css and the containing/wrapping assets are in publishing states.*/
             ]]></code>
              <remarks>The returned string will only be visible when viewing source</remarks>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderCSSLink(System.String,System.String,System.String,System.String,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              For creating links to CSS assets.  Accepts an asset path and if loaded, renders a link to it as an HTML link element.
              Use as a convenience function when building wrapper templates and anywhere you need to load a css asset in output.
            </summary>
            <param name="cssPath">The Asset Path of the CMS Asset that contains the CSS code.</param>
            <param name="mediaType">Optional mediatype.</param>
            <param name="cssIdAttribute">Optional html ID attribute for css link.</param>
            <param name="qString">Optional query string appended to css link.</param>
            <param name="context">Optional current OutputContext for checking the publishing status.</param>
            <returns>String containing HTML code for loading a CSS Asset.</returns>
            <example>
              <code lang="C#"><![CDATA[
             Out.WriteLine(ServicesOutput.RenderCSSLink(cssPath, context: context));
             /*returns and outputs:
             <link rel="stylesheet" type="text/css" href="[[cssAsset publishing path or cms path]]?" */
            
             string cssPath = "/SAMPLE Pharmaceutical/_Assets/css/style.css";
             Out.WriteLine( ServicesOutput.RenderCSSLink(cssPath, mediaType: "print", cssIdAttribute:"myCssIdAttribute", qString: "myQString", context: context) );
             /*returns and outputs:
             <link rel="stylesheet" type="text/css" href="[[cssAsset publishing path or cms path]]?myQString" media="print" id="myCssIdAttribute" />
             assuming both the css and the containing/wrapping assets are in publishing states.*/
             ]]></code>
              <remarks>The returned string will only be visible when viewing source</remarks>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderCSSLink(System.Int32,System.String,System.String,System.String,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              For creating links to CSS assets. Accepts an asset Id and if loaded, renders a link to it as an HTML link elementt.
              Use as a convenience function when building wrapper templates and anywhere you need to load a css asset in output.
            </summary>
            <param name="cssAssetId">The Asset ID of the CMS Asset that contains the CSS code.</param>
            <param name="mediaType">Optional mediatype.</param>
            <param name="cssIdAttribute">Optional html ID attribute for css link.</param>
            <param name="qString">Optional query string appended to css link.</param>
            <param name="context">Optional current OutputContext for checking the publishing status.</param>
            <returns>String containing HTML code for loading a CSS Asset.</returns>
            <example>
              <code lang="C#"><![CDATA[
            Out.WriteLine(ServicesOutput.RenderCSSLink(cssAssetId, context: context));
            /*returns and outputs:
            <link rel="stylesheet" type="text/css" href="[[cssAsset publishing path or cms path]]?" */
            
            Asset cssFolder = Asset.Load(asset["css_Folder"]);
            Out.WriteLine( ServicesOutput.RenderCSSLink(cssFolder.ChildId, mediaType: "print", cssIdAttribute:"myCssIdAttribute", qString: "myQString",context) );
            /*returns and outputs:
            <link rel="stylesheet" type="text/css" href="[[cssAsset publishing path or cms path]]?myQString" media="print" id="myCssIdAttribute" />
            assuming both the css and the containing/wrapping assets are in publishing states.*/
            ]]></code>
              <remarks>The returned string will only be visible when viewing source</remarks>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderConditionalField(CrownPeak.CMSAPI.Asset,System.String,System.String,System.String,System.String,System.String)">
            <summary>
              A flexible convenience method to help in common output scenarios where rendering a tag or code fragment is dependent
              on the value of an Asset field.
            </summary>
            <param name="asset">Asset that contains the field</param>
            <param name="fieldName">Name of field that will be conditional</param>
            <param name="tagWrapper">
              HTML tags that will wrap the output
              <remarks>tagWrapper overrides codeFormat</remarks>
            </param>
            <param name="tagID">ID attribute for the HTML tag</param>
            <param name="tagClass">Class attribute for the HTML tag</param>
            <param name="codeFormat">Custom format for outputing the field content in a formatted string</param>
            <returns>
              If the field indicated by "fieldName" does not have content: empty string
              If "tagWrapper" "tagID" and "tagClass" are provided: a string containing HTML code in the format
              <code lang="HTML"><![CDATA[<tagWrapper id="tagID" class="tagClass">asset[fieldName]<tagWrapper>\n>]]></code>
              If only "tagWrapper" is provided: a string containing HTML code (
              <code lang="HTML"><![CDATA[<tagWrapper>asset[fieldName]<tagWrapper>\n>]]></code>)
              If "codeFormat" is provided and "tagWrapper" is not: a custom formatted string
            </returns>
            <example>
              <code lang="C#"><![CDATA[
            Out.WriteLine( ServicesOutput.RenderConditionalField(asset, "conditionalField", "div", "first", "divClass" );
            //returns and outputs: <div id="first" class="divClass">Content of conditionalField<div>\n
            
            Out.WriteLine( ServicesOutput.RenderConditionalField(asset, "conditionalField_2", codeFormat: "<p><h3>Content of my conditional field:</h3> {0} </p>" );
            //returns and outputs: <p><h3>Content of my conditional field:</h3> Content of conditionalField_2 </p>
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderConditionalField(CrownPeak.CMSAPI.PanelEntry,System.String,System.String,System.String,System.String,System.String)">
            <summary>
              A flexible convenience method to help in common output scenarios where rendering a tag or code fragment is dependent
              on the value of a PanelEntry field.
            </summary>
            <param name="panel">Panel that contains the field</param>
            <param name="fieldName">Name of field that will be conditional</param>
            <param name="tagWrapper">
              HTML tags that will wrap the output
              <remarks>tagWrapper overrides codeFormat</remarks>
            </param>
            <param name="tagID">ID attribute for HTML tag</param>
            <param name="tagClass">Class attribute for HTML tag</param>
            <param name="codeFormat">Custom format for outputing the field content in a formatted string</param>
            <returns>
              If the field indicated by "fieldName" does not have content: empty string
              If "tagWrapper" "tagID" and "tagClass" are provided: a string containing HTML code in the format
              <code lang="HTML"><![CDATA[<tagWrapper id="tagID" class="tagClass">asset[fieldName]<tagWrapper>\n>]]></code>
              If only "tagWrapper" is provided: a string containing HTML code (
              <code lang="HTML"><![CDATA[<tagWrapper>asset[fieldName]<tagWrapper>\n>]]></code>)
              If "codeFormat" is provided and "tagWrapper" is not: a custom formatted string
            </returns>
            <example>
              <code lang="C#"><![CDATA[
            List<PanelEntry>> panels = asset.GetPanels("List_Panel"); 
            foreach (PanelEntry entry in panels)
            {
              Out.WriteLine( ServicesOutput.RenderConditionalField(entry, "conditionalField", "div", "first", "divClass" );
              //returns and outputs: <div id="first" class="divClass">Content of conditionalField<div>\n
              
              Out.WriteLine( ServicesOutput.RenderConditionalField(entry, "conditionalField_2", codeFormat: "<p><h3>Content of my conditional field:</h3> {0} </p>" );
              //returns and outputs: <p><h3>Content of my conditional field:</h3> Content of conditionalField_2 </p>
            }
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderConditionalString(System.String,System.String,System.String,System.String,System.String)">
            <summary>
              Related to RederConditionalField but for a string input.
              Useful if the condition being checked is output resulting from a previous renderConditionalField or
              RenderConditionalString rather than from a single or specific field
            </summary>
            <param name="inputString">String to check</param>
            <param name="tagWrapper">
              HTML tags that will wrap the output
              <remarks>tagWrapper overrides codeFormat</remarks>
            </param>
            <param name="tagID">ID attribute for HTML tag</param>
            <param name="tagClass">Class attribute for HTML tag</param>
            <param name="codeFormat">Custom format for outputing the field content in a formatted string</param>
            <returns>
              If the string indicated by "inputString" does not have content: empty string
              If "tagWrapper" "tagID" and "tagClass" are provided: a string containing HTML code in the format
              <code lang="HTML"><![CDATA[<tagWrapper id="tagID" class="tagClass">inputString<tagWrapper>\n>]]></code>
              If only "tagWrapper" is provided: a string containing HTML code (
              <code lang="HTML"><![CDATA[<tagWrapper>inputString<tagWrapper>\n>]]></code>)
              If "codeFormat" is provided and "tagWrapper" is not: a custom formatted string
            </returns>
            <example>
              <code lang="C#"><![CDATA[
            string string1 = asset["some_string"];
            string string2 = ServicesOutput.RenderConditionalString(string1, "div", "first", "divClass" );
            Out.WriteLine( ServicesOutput.RenderConditionalString(string2, codeFormat: "<p><h3>My HTML Code:</h3> {0} </p>" );
            
            //returns and outputs: <p><h3>My HTML Code:</h3> <div id="first" class="divClass">Content of some_string<div>\n </p>
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderMetaField(System.String,System.String,System.Boolean,System.String)">
            <summary>
              Accepts a name and content value and renders a standard html meta tag.  Use when building meta output functions. Used
              by MetaOutputBuilder.
            </summary>
            <param name="name">Name of the meta tag</param>
            <param name="content">Content of the meta tag</param>
            <param name="XHTMLTag">
              Toggle between closing tags <![CDATA["/>" if true and ">" if false]]></param>
            <param name="nameAttributeOverride">
              Override for the name attribute of the meta tag.
              <remarks>Default is "name"</remarks>
            </param>
            <returns>
              The meta string formatted as: <![CDATA[<meta {nameAttributeOverride}="{name}" content="{content}"{closeText}]]></returns>
            <example>
              <code lang="C#"><![CDATA[
            Out.WriteLine( ServicesOutput.RenderMetaField("metaName", "content of the meta tag", true) );
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.MetaOutputBuilder(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
              Output method supporting fields generated by ServicesInput.ShowMetaInput, ServicesInput.ShowMetaRobotsInput.  Also
              includes parameters for showing common crownPeak properties (id, template)
            </summary>
            <param name="asset">Asset that contains fields of ServicesInput.ShowMetaInput or ServicesInput.ShowMetaRobotsInput</param>
            <param name="siteConfig">
              Site Configuration asset that also contains fields of ServicesInput.ShowMetaInput or
              ServicesInput.ShowMetaRobotsInput
            </param>
            <param name="showAssetId">Toggle display of current asset's Id in meta tag</param>
            <param name="showTemplateId">Toggle display of current asset's template Id in meta tag</param>
            <param name="showParentAsSection">Toggle display of the current asset's parent folder in the meta tag</param>
            <returns>HTML meta tags for each of the fields</returns>
            <example>
              <code lang="C#"><![CDATA[
            Asset configAsset = Asset.Load("/Example Site/_Site Configuration/_Site Config");
            Out.WriteLine( ServicesOutput.MetaOutputBuilder(asset, configAsset, true, true, false) );
            ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType">
            <summary>
              Enumerated type used for ServicesOutput.BuildHyperLinkList
              <![CDATA[
            LinkListType.UnorderedList renders a <ul></ul> list
            LinkListType.OrderedList renders a <ol></ol> list
            LinkListType.MenuList renders an HTML5 <menu></menu> list
            ]]>
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.ServicesOutput.LinkOutputType">
            <summary>
              Enumerated type used for ServicesOutput.HyperLink.ToString(LinkOutputType)
              <![CDATA[
            LinkOutputType.TextLink (default) renders an <a href=""></a> tag wrapping a text title.
            LinkOutputType.Imagelink renders an <a href=""></a> tag wrapping an image associated with the field set.
            ]]>
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderHyperLink(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkOutputType)">
            <summary>
              Given an Asset and a ServicesInput.ShowHyperLink fieldname, Creates a ServicesOutput.HyperLink object and calls
              HyperLink.ToString() or HyperLink.ToString(LinkOutputType.ImageLink).
            </summary>
            <param name="asset">Asset that contains the fields for ServicesInput.ShowHyperLink.</param>
            <param name="fieldName">Name used for calling ServicesInput.ShowHyperLink.</param>
            <param name="outputType">Enumerated type LinkOutputType. Used for image links.</param>
            <returns>
              HyperLink.ToString() or HyperLink.ToString(LinkOutputType.ImageLink)
              <see cref="T:CrownPeak.CMSAPI.Services.ServicesOutput.HyperLink">See HyperLink.ToString</see>
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderHyperLink(CrownPeak.CMSAPI.PanelEntry,System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkOutputType)">
            <summary>
              Given a PanelEntry and a ServicesInput.ShowHyperLink fieldname,  Creates a ServicesOutput.HyperLink object and calls
              HyperLink.ToString() or HyperLink.ToString(LinkOutputType.ImageLink).
            </summary>
            <param name="panel">PanelEntry that contains the fields for ServicesInput.ShowHyperLink.</param>
            <param name="fieldName">Name used for calling ServicesInput.ShowHyperLink.</param>
            <param name="outputType">Enumerated type LinkOutputType. Used for image links.</param>
            <returns>
              Output of HyperLink.ToString() or HyperLink.ToString(LinkOutputType.ImageLink)
              <see cref="T:CrownPeak.CMSAPI.Services.ServicesOutput.HyperLink">See HyperLink.ToString</see>
            </returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderHyperLinkList(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType,System.String,System.String,System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType,System.Int32)">
            <summary>
              Given an Asset and a fieldname from a List Panel that contains a ShowHyperLink input panel,
              Renders a list of HTML links (and/or sub-links) using the fields from ServicesInput.ShowHyperLink with the same base
              fieldname
              <para>
                Make sure the fieldname of the List Panel (e.g.,  Input.NextPanel(fieldname)) is the same as the one given to
                ServicesInput.ShowHyperLink (e.g., ServicesInput.ShowHyperLink(fieldname)).
              </para>
            </summary>
            <param name="asset">Asset that contains the List Panel with the fields from ServicesInput.ShowHyperLink.</param>
            <param name="fieldName">Name given to the List Panel and ServicesInput.ShowHyperLink.</param>
            <param name="listType">Optional: Enumerated type LinkListType for parent list.</param>
            <param name="listParentClass">Optional: Class of parent list</param>
            <param name="listParentId">Optional: ID of parent list</param>
            <param name="childField">Optional: Name of the child List Panel and ServicesInput.ShowHyperLink.</param>
            <param name="childListType">Optional: Enumerated type LinkListType for child list.</param>
            <param name="activeId">Optional: Indicates the link of the current page, assuming the current page displays the list.</param>
            <returns>HTML list (or nested list) of links. <see cref="M:CrownPeak.CMSAPI.Services.ServicesOutput.BuildHyperLinkList(System.Collections.Generic.List{CrownPeak.CMSAPI.PanelEntry},System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType,System.String,System.String,System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType,System.Int32)">See BuildHyperLinkList</see></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.RenderHyperLinkList(CrownPeak.CMSAPI.PanelEntry,System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType,System.String,System.String,System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType,System.Int32)">
            <summary>
              Given an PanelEntry and a fieldname from a List Panel (e.g.,  Input.NextPanel(fieldname)) that contains a
              ShowHyperLink input panel (e.g., ServicesInput.ShowHyperLink(fieldname)),
              Renders a list of HTML links (and/or sub-links) using the fields from ServicesInput.ShowHyperLink with the same base
              fieldname.
              <para>
                Make sure the fieldname of the List Panel (e.g.,  Input.NextPanel(fieldname)) is the same as the one given to
                ServicesInput.ShowHyperLink (e.g., ServicesInput.ShowHyperLink(fieldname)).
              </para>
            </summary>
            <param name="panel">PanelEntry that contains the List Panel with the fields from ServicesInput.ShowHyperLink.</param>
            <param name="fieldName">Name given to the List Panel and ServicesInput.ShowHyperLink.</param>
            <param name="listType">Optional: Enumerated type LinkListType for parent list.</param>
            <param name="listParentClass">Optional: Class of parent list</param>
            <param name="listParentId">Optional: ID of parent list</param>
            <param name="childField">Optional: Name of the child List Panel and ServicesInput.ShowHyperLink.</param>
            <param name="childListType">Optional: Enumerated type LinkListType for child list.</param>
            <param name="activeId">Optional: Indicates the link of the current page, assuming the current page displays the list.</param>
            <returns>HTML list (or nested list) of links. <see cref="M:CrownPeak.CMSAPI.Services.ServicesOutput.BuildHyperLinkList(System.Collections.Generic.List{CrownPeak.CMSAPI.PanelEntry},System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType,System.String,System.String,System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType,System.Int32)">See BuildHyperLinkList</see></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.BuildHyperLinkList(System.Collections.Generic.List{CrownPeak.CMSAPI.PanelEntry},System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType,System.String,System.String,System.String,CrownPeak.CMSAPI.Services.ServicesOutput.LinkListType,System.Int32)">
            <summary>
              Called by RenderHyperLinkList to generate a HTML list of links (and/or sub-links)
            </summary>
            <param name="panels">PanelEntry that contains the List Panel with the fields from ServicesInput.ShowHyperLink.</param>
            <param name="fieldName">Name given to the List Panel and ServicesInput.ShowHyperLink.</param>
            <param name="listType">Optional: Enumerated type LinkListType for parent list.</param>
            <param name="listParentClass">Optional: Class of parent list</param>
            <param name="listParentId">Optional: ID of parent list</param>
            <param name="childField">Optional: Name of the child List Panel and ServicesInput.ShowHyperLink.</param>
            <param name="childListType">Optional: Enumerated type LinkListType for child list.</param>
            <param name="activeId">Optional: Indicates the link of the current page, assuming the current page displays the list.</param>
            <returns>HTML list (or nested list) of links.</returns>
            <example>
              <code lang="C#"><![CDATA[
            List<PanelEntry> panels = asset.GetPanels("menu");
            Out.WriteLine( ServicesOutput.BuildHyperLinkList(panels, "menu", childField: "submenu"));
            /*returns and outputs:
            <ul>\n
              <li><a href="http://www.google.com" target="_self">Link 1 google</a>\r\n
                <ul>\n
                  <li><a href="http://www.google.com/maps" target="_self">sublink 1 maps</a></li>\r\n
                  <li><a href="http://www.google.com/mail" target="_self">sublink 2 mail</a></li>\r\n
                </ul>\n
              </li>\r\n
              <li><a href="http://www.yahoo.com" target="_self">Link 2 yahoo</a>\r\n
                <ul>\n
                  <li><a href="http://www.yahoo.com/mail" target="_self">sublink 1 mail</a></li>\r\n
                </ul>\n
              </li>\r\n
            </ul>\n
            \n
            */
            ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.ServicesOutput.HyperLink">
            <summary>
              Class that uses the fields from ServicesInput.ShowHyperLink to build out an HTML link.
              <para>
                If the imageLinkOption is enabled for ServicesInput.ShowHyperLink,
                call ServicesInput.HyperLink.ToString(LinkOutputType) instead of the default ToString().
                Otherwise an empty string is returned.
              </para>
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.HyperLink.#ctor(CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              Constructor for the HyperLink class using an asset and field name
            </summary>
            <param name="asset">Asset that contains the fields of ServicesInput.ShowHyperLink.</param>
            <param name="fieldName">Name used when ServicesInput.ShowHyperLink was called.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.HyperLink.#ctor(CrownPeak.CMSAPI.PanelEntry,System.String)">
            <summary>
              Constructor for the HyperLink class using a panel entry and field name
            </summary>
            <param name="panel">PanelEntry that contains the fields of ServicesInput.ShowHyperLink.</param>
            <param name="fieldName">Name used when ServicesInput.ShowHyperLink was called.</param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.HyperLink.ToString">
            <summary>
              ToString() override for HyperLink class.
            </summary>
            <returns>HTML link</returns>
            <example>
              <code lang="C#"><![CDATA[
            HyperLink outputLink = new HyperLink(asset, "Hyperlink");
            Out.WriteLine( outputLink.ToString() );
            /*returns and outputs:
            <a href="www.google.com" target="_blank" class="external link class">Link 1</a>
            assuming ServicesInput.ShowHyperLink was called with default params and external link was used in the form*/
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesOutput.HyperLink.ToString(CrownPeak.CMSAPI.Services.ServicesOutput.LinkOutputType)">
            <summary>
              ToString() override for HyperLink class.
            </summary>
            <param name="linkOutputType">Enumerated type for outputing an image link</param>
            <returns>HTML image link</returns>
            <example>
              <code lang="C#"><![CDATA[
            HyperLink imgOutputLink = new HyperLink(asset, "Imagelink");
            Out.WriteLine( imgOutputLink.ToString(LinkOutputType.ImageLink) );
            /*returns and outputs:
            <a href="www.google.com" target="_blank"><img src="_Assets/images/googleLogo.jpg" alt="alt text" border="0"/></a> 
            assuming imageLinkOption is enabled in ServicesInput.ShowHyperLink and external link was used in the form.*/
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesPostInput.SetAssetLabel(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostInputContext,System.String,System.String)">
            <summary>
              ServicesPostInput.SetAssetLabel()
              <para>Set given asset's Label from specified field in PostInputContext</para>
            </summary>
            <param name="asset">The asset to rename</param>
            <param name="context">The current PostInput context</param>
            <param name="refField">The field to rename the asset to follow.</param>
            <param name="refFieldLabel">The Label of the field to rename, for validation error messages only.</param>
            ///
            <example>
              <code lang="c#">
            <![CDATA[
             ServicesPostInput.SetAssetLabel(asset, context, "page_label", "Page Label");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesPostInput.SetDateTime(CrownPeak.CMSAPI.PostInputContext,System.String,System.Boolean)">
            <summary>
              Accepts an asset and a fieldname, overloads for panel entry and panel entry fieldname
              looks for showdatetime fields in input form and saves them to a consolodated field with the name fieldname.
              Saves the fields in a consolodated datetime field that can be used in output and for sorting in filter and file lists
            </summary>
            <param name="context">Current context</param>
            <param name="fieldName">Field name that was used for ServicesInput.ShowDateTime()</param>
            <param name="convertToUTC">If true, converts from user time to UTC for parity with VB's showSelectGMT</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesPostInput.SetDateTime(context, "Date_Time");
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesPostInput.SetDateTime(CrownPeak.CMSAPI.PostInputContext,System.String,System.String,System.Boolean)">
            <summary>
              Accepts an asset and a fieldname, overloads for panel entry and panel entry fieldname
              looks for showdatetime fields in input form and saves them to a consolodated field with the name fieldname.
              Saves the fields in a consolodated datetime field that can be used in output and for sorting in filter and file lists
            </summary>
            <param name="context">Current context</param>
            <param name="panelName">Name of the panel that contains the fields generated by ServicesInput.ShowDateTime()</param>
            <param name="fieldName">Field name that was used for ServicesInput.ShowDateTime()</param>
            <param name="convertToUTC">If true, converts from user time to UTC for parity with VB's showSelectGMT</param>
            <example>
              <code lang="C#">
            <![CDATA[
            ServicesPostInput.SetDateTime(context, "Date_Panel", "Date_Time");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesPostInput.SetDateTime(CrownPeak.CMSAPI.PanelEntry,System.String,System.Boolean)">
            <summary>
              Accepts an asset and a fieldname, overloads for panel entry and panel entry fieldname
              looks for showdatetime fields in input form and saves them to a consolodated field with the name fieldname.
              Saves the fields in a consolodated datetime field that can be used in output and for sorting in filter and file lists
              <para>This override is used by panelEntrys.  Load and iterate through panels in the input form before calling.</para>
            </summary>
            <param name="panelEntry">PanelEntry that contains the field generated by ServicesInput.ShowDateTime()</param>
            <param name="fieldName">Field name that was used for ServicesInput.ShowDateTime()</param>
            <param name="convertToUTC">If true, converts from user time to UTC for parity with VB's showSelectGMT</param>
            <example>
              <code lang="C#">
            <![CDATA[
            List<PanelEntry> panels = asset.GetPanels("Articles");
            foreach (PanelEntry entry in panels)
            {
              ServicesPostInput.SetDateTime(entry, "Date_Time");
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesPostInput.ConvertToDateTime(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
              Consolidates the values of the fields generated by ServicesInput.ShowDateTime() into one field
            </summary>
            <param name="date">String containing the date: MM/DD/YYYY</param>
            <param name="hour">String containing the hours: 1-12</param>
            <param name="minute">String containing the minutes: 0-59</param>
            <param name="second">String containing the seconds: 0-59</param>
            <param name="ampm">
              String containing "am" or "pm"
              <remarks>Letter case is trivial</remarks>
            </param>
            <param name="convertToUTC">If true, converts from user time to UTC for parity with VB's showSelectGMT</param>
            <returns>DateTime object converted to a string</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.LocaleId">
            <summary>
              LocaleId is a class used by other methods that defines properties of the locale, an ID and folder path
            </summary>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.ServicesTMF">
            <summary>
            TMF Services
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF._GetTMFConfigFolderName">
            <summary>
              Returns TMF Config Folder Name
            </summary>
            <returns>_TMF</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.GetSiteName(CrownPeak.CMSAPI.Asset,System.Int32)">
            <summary>
              Returns segment of asset path indicated by the nameSegment index
            </summary>
            <param name="asset">Asset whos path segment will be returned</param>
            <param name="nameSegment">index of asset path segment that will be returned</param>
            <returns>Segment of an AssetPath</returns>
            <example>
              <code lang="C#"><![CDATA[
            string siteName = ServicesTMF.GetSiteName(asset, 3);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.GetSitePath(CrownPeak.CMSAPI.Asset)">
            <summary>
              Searchs for and returns the "_TMF" folder as an asset.
              <para>Assuming the "_TMF" folder is in the same folder as the asset parameter, or in one of the parent folders </para>
            </summary>
            <param name="asset">An asset within the site's folders</param>
            <returns>The _TMF folder as an asset</returns>
            <example>
              <code lang="C#"><![CDATA[
            Asset tmfFolderAsset = SerevicesTMF.GetSitePath(asset);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.CreateLocaleConfigCache(System.String)">
            <summary>
              Returns a IEnumerable of LocalId objects.
              The files in the "Locales Config" folder are projected to LocaleId objects.
            </summary>
            <param name="sitePath">Path of _TMF folder</param>
            <returns>Assets from the folder /_TMF/Locales Config/</returns>
            <example>
              <code lang="C#"><![CDATA[
            IEnumerable<LocaleId> ieLID = ServicesTMF.CreateLocaleConfigCache("/SiteQA/TMF_Test_Root/_TMF");
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.GetLocaleId(CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              Searches through the assets in a given path and checks if one of the assets' "folder_root" field content
              exists anywhere in the path of the "asset" parameter. If so, then it returns the ID of the asset that had
              the matching "folder_root" field.
            </summary>
            <param name="asset">Asset with a path that contains the "folder_root"</param>
            <param name="sitePath">_TMF folder path</param>
            <returns>ID string of the asset with matching content in the "folder_root" field</returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.GetLocaleId(CrownPeak.CMSAPI.Asset,System.String,System.Collections.Generic.IEnumerable{CrownPeak.CMSAPI.Services.LocaleId})">
            <summary>
              Searches through the assets in a given path and checks if one of the assets' "folder_root" field content
              exists anywhere in the path of the "asset" parameter. If so, then it returns the ID of the asset that had
              the matching "folder_root" field.
            </summary>
            <param name="asset"></param>
            <param name="sitePath"></param>
            <param name="localeConfigCache"></param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.GetInstanceURL(CrownPeak.CMSAPI.PostSaveContext)">
            <summary>
              Returns an instance name
            </summary>
            <param name="context">Current context</param>
            <returns>"https://cms.crownpeak.net/" + context.ClientName</returns>
            <example>
              <code lang="C#"><![CDATA[
            //Requires PostSaveContext
            string instanceURL = ServicesTMF.GetInstanceURL(context);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.CheckAndCreateTransFolder(System.String,System.String,System.String)">
            <summary>
              Checks if source folder exists in destination, creates it if it doesn't exist
            </summary>
            <param name="folderPath"></param>
            <param name="sourceFolderRoot"></param>
            <param name="destinationFolderRoot"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.CreateTranslatedAsset(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset,System.String,System.String)">
            <summary>
              Creates a translated asset and a relationship asset.
            </summary>
            <param name="contentSourceAsset">Source asset of the content to be translated.</param>
            <param name="sourceLanguageAsset">Asset of the source language.</param>
            <param name="destinationLanguageAsset">Asset of the destination language.</param>
            <param name="relationshipAssetId">
              ID of relationship asset if a relationship already exists between content source
              asset and a translated asset.
            </param>
            <param name="sitePath">Path of _TMF folder</param>
            <returns>ID of translated asset as a string</returns>
            <example>
              <code lang="C#"><![CDATA[
            string transAssetId = ServicesTMF.CreateTranslatedAsset(contentSourceAsset, sourceLanguageAsset, destinationLanguageAsset, relAssetIdString /*if exists*/, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.ClearTMFHelperValues(CrownPeak.CMSAPI.Asset)">
            <summary>
              Clears all field data that contains "tmf_" except for "tmf_folder_link_internal"
            </summary>
            <param name="contentToClear">Asset containing fields to be cleared.</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.ClearTMFHelperValues(assetToClear);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.SendNotification(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.PostSaveContext,System.String)">
            <summary>
              Creates content of email, Sends email to content owner- post input
            </summary>
            <param name="contentSource"></param>
            <param name="contentDest">Asset that has a "Locales Config" asset with the same "folder_root".</param>
            <param name="languageContent"></param>
            <param name="instanceName"></param>
            <param name="context"></param>
            <param name="sitePath"></param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.SendNotification(contentSourceAsset, contentDestAsset, languageContentAsset, instanceName, context, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.SendNotificationsToOwners(CrownPeak.CMSAPI.Asset,System.String,System.String,CrownPeak.CMSAPI.PostSaveContext,System.String)">
            <summary>
              Decides who will receive email notifications
            </summary>
            <param name="contentSource"></param>
            <param name="contentDestId"></param>
            <param name="instanceName"></param>
            <param name="context"></param>
            <param name="sitePath"></param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.SendNotificationsToOwners(contentSourceAsset, contentDestIdString, instanceName, PostSaveContext, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.SendNotificationsToAuthorsAndOwners(CrownPeak.CMSAPI.Asset,System.String,CrownPeak.CMSAPI.PostSaveContext,System.String,System.Boolean)">
            <summary>
              Decides who will receive email notifications
            </summary>
            <param name="contentSource"></param>
            <param name="notifyOriginalAuthor"></param>
            <param name="instanceName"></param>
            <param name="context"></param>
            <param name="sitePath"></param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.SendNotificationsToAuthorsAndOwners(contentSourceAsset, notifyOriginalAuthorString, instanceName, PostSaveContext, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.UpdateRelationshipHistory(CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              Saves previous content to a relationship asset
            </summary>
            <param name="sourceAsset">The Asset that has the source ID</param>
            <param name="sitePath">_TMF folder path</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.UpdateRelationshipHistory( contentDestinationAsset, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.UpdateMasterHistory(CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              Given a translated asset, finds the source asset using an existing relationship asset, then saves the content from
              the source to the relationship asset.
            </summary>
            <param name="translatedAsset"></param>
            <param name="sitePath"></param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.UpdateMasterHistory(contentAsset, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.FixRelativeLinks(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              Fixes relative links in derived content
            </summary>
            <param name="contentDest">The asset with the links to fix.</param>
            <param name="sourceLanguageContent"></param>
            <param name="destLanguageContent"></param>
            <param name="sitePath"></param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.FixRelativeLinks(contentDestinationAsset, sourceLanguageAsset, destLanguageAsset, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.GetRelList(System.Int32,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
              Loops through relation config folder and creates list of relationship assets
            </summary>
            <param name="id">Asset ID.</param>
            <param name="relationshipType">
              Specifies if the nId Asset has a "source" or "destination" relationship with another
              asset.
            </param>
            <param name="sitePath">_TMF folder path.</param>
            <param name="addDestinationId">Adds nId as a "destination" as well, even if it is a "source".</param>
            <param name="listLimit">Sets a limit to the number of assets in the list.</param>
            <returns>Filtered list of assets.</returns>
            <example>
              <code lang="C#"><![CDATA[
            List<Asset> relationshipList = ServicesTMF.GetRelList(id, "source", sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.GetNotificationEmails(CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              Returns comma delimited list of email addresses from local, language and site configs for a page
            </summary>
            <param name="asset">Asset that has owner(s)</param>
            <param name="sitePath">_TMF folder path</param>
            <returns>Comma delimited string</returns>
            <example>
              <code lang="C#"><![CDATA[
            string notifEmails = ServicesTMF.GetNotificationEmails( asset,  sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.UpdateBranch(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostSaveContext,System.String)">
            <summary>
              When one of the assets in the master folder is branched, the users action is captured and the derived asset is also
              branched if a relationship exists.
              This method should be used in the copy.aspx template file.
              <remarks>Requires /System/Translation Model Framework/_Models/Relationship/ </remarks>
            </summary>
            <param name="asset">Asset that is branched (Current asset)</param>
            <param name="context"></param>
            <param name="sitePath"></param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.UpdateBranch(asset, PostSaveContext, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.AutoLinkLocales(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              Automatically creates relationships between source and destination
            </summary>
            <param name="contentSource">Source Asset</param>
            <param name="contentDest">Destination Asset</param>
            <param name="sitePath">_TMF Folder path</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.AutoLinkLocales(contentSourceAsset, contentDestinationAsset, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.GetTMFTemplateFields(CrownPeak.CMSAPI.Asset)">
            <summary>
              Returns list of tmf related fields
            </summary>
            <param name="currentContent"></param>
            <returns></returns>
            <example>
              <code lang="C#"><![CDATA[
            Dictionary<string, string> tmfFields = ServicesTMF.GetTMFTemplateFields(asset);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.IsMasterAssetChanges(CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              Checks if the Master Asset has been changed.
            </summary>
            <param name="asset"></param>
            <param name="sitePath"></param>
            <returns></returns>
            <example>
              <code lang="C#"><![CDATA[
            bool isChanged = ServicesTMF.IsMasterAssetChanges(asset, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.GetV3DeepLink(System.Int32,CrownPeak.CMSAPI.PostSaveContext)">
            <summary>
              Prepares and formats a deep link to edit an asset in V3
            </summary>
            <param name="assetId">Asset id</param>
            <param name="context">Instance context</param>
            <returns>A string containing the URL to the asset edit view in V3 for a specific instance</returns>
        </member>
        <member name="T:CrownPeak.CMSAPI.Services.ServicesTMF.PostInput">
            <summary>
              PostInput implementation for TMF
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.PostInput.LoadPostInput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostInputContext)">
            <summary>
              Added to post input template file in order to enable TMF
            </summary>
            <param name="asset">Current Asset</param>
            <param name="postInputContext">Current context</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.PostInput.LoadPostInput(asset, postInputContext);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.Input.LoadInput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.InputContext)">
            <summary>
              Added to input template file in order to enable TMF
            </summary>
            <param name="asset">Current Asset</param>
            <param name="context">Current context</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.Input.LoadInput(asset, inputContext);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.Input.ShowSelectUsers">
            <summary>
              Creates a dropdown list of users
            </summary>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.Output.GetMasterAsset(CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
            </summary>
            <param name="asset"></param>
            <param name="sitePath"></param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.Output.GetMasterAsset(asset, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.Output.SetTMFButton">
            <summary>
              Outputs meta to create TMF button
            </summary>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.Output.SetTMFButton();
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.Output.SetMasterAssetDropdownlist(CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              Gets master asset lists of locale assets for dropdown
            </summary>
            <param name="asset"></param>
            <param name="sitePath"></param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.Output.SetMasterAssetDropdownlist(asset, sitePath);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.Output.LoadMasterAssetChanges(CrownPeak.CMSAPI.Asset)">
            <summary>
              Should be included in output_changes template file to enable TMF
            </summary>
            <param name="asset">Current Asset</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.Output.LoadMasterAssetChanges(asset);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.Output.SetDropdownlistOutput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext,System.String)">
            <summary>
            </summary>
            <param name="asset"></param>
            <param name="context"></param>
            <param name="sitePath"></param>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.Output.LoadOutput(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.OutputContext)">
            <summary>
              Should be included in output template file to enable TMF
            </summary>
            <param name="asset">Current Asset</param>
            <param name="context">Current context</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.Output.LoadOutput(asset, outputContext);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesTMF.PostSave.LoadPostSave(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.PostSaveContext)">
            <summary>
              Should be included in post_save template file to enable TMF
            </summary>
            <param name="asset">Current Asset</param>
            <param name="context">Current context</param>
            <example>
              <code lang="C#"><![CDATA[
            ServicesTMF.PostSave.LoadPostSave(asset, postSaveContext);
            ]]></code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesUtil.NewLabelConform(CrownPeak.CMSAPI.Asset,System.String,System.String)">
            <summary>
              Conform new Asset Label to popup field.
              <para>
                Note: for use in new.aspx.  Sync a given asset's content labelField with .Label text entered in "new" popup.
                Ignore if modelLabel was entered (prevents saving multiple assets with the "New Model Name" Label. Works best with
                post-input validation requiring this field and renaming asset to the content labelField on save.
              </para>
            </summary>
            <param name="asset">The "new" asset being created.</param>
            <param name="labelField">The field to be synchronized with the pop-up label.</param>
            <param name="modelLabel">The Label name of the model (if unchanged, cancels the function).</param>
            <example>
              <code lang="c#">
            <![CDATA[
              ServicesUtil.NewLabelConform(asset, "page_label", "Content Page");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesUtil.CopyLabelConform(CrownPeak.CMSAPI.Asset,System.String)">
            <summary>
              Conform cloned asset Label to popup field.
              <para>
                Note: For use in copy.aspx.  Sync a copied/cloned asset's content labelField with .Label text entered in "clone
                name" popup.  Ignore if unchanged. Works best with post-input validation requiring this field and renaming asset to
                the content labelField on save.
              </para>
            </summary>
            <param name="asset">The asset "copy" being created.</param>
            <param name="labelField">The field to be synchronized with the pop-up label.</param>
            <example>
              <code lang="c#">
            <![CDATA[
              ServicesUtil.CopyLabelConform(asset, "page_label");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesUtil.GetFilterDictionary(CrownPeak.CMSAPI.Asset,CrownPeak.CMSAPI.FilterParams,System.Boolean)">
            <summary>
              Accepts a folder and filterParams, uses aGetFilterList to return a dictionary of assets.
              Dictionary values will be {asset.Label, asset.BranchId} OR if useBranchId is false {asset.Label, asset.Id}
            </summary>
            <param name="assetFolder">Folder where assets are located</param>
            <param name="fParams">FilterParams to apply to assets</param>
            <param name="useBranchId">Use the assets' Branch ID instead of the asset ID.</param>
            <returns></returns>
        </member>
        <member name="M:CrownPeak.CMSAPI.Services.ServicesUtil.ReformatDate(System.String,System.String)">
            <summary>
              Parses a date string into a DateTime object and changes the format to the default "MMMM d, yyyy" or to a custom
              format.
            </summary>
            <param name="dateString">Date string to be parsed and reformatted.</param>
            <param name="dateFormat">Date format to be applied to the DateTime object.</param>
            <returns>DateTime.ToString(dateFormat)</returns>
            <example>
              <code lang="C#"><![CDATA[
            string dateString = "12 12, 2012";
            Out.WriteLine(ServicesUtil.ReformatDate(dateString));
            Out.WriteLine(ServicesUtil.ReformatDate(dateString, "dddd MMMM d, yyyy"));
            ]]></code>
            </example>
        </member>
        <member name="T:CrownPeak.Internal.Proxy.IAssetAccess">
            <summary>
              Do not use this interface.  It is used internally.
            </summary>
        </member>
        <member name="M:CrownPeak.Internal.Proxy.IAssetAccess.LoadByPath(System.String,System.Collections.Generic.List{System.String})">
            <summary>
              Loads an asset with the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="filterStatus">The filter status.</param>
            <returns></returns>
        </member>
        <member name="T:CrownPeak.Internal.Proxy.IImgAccess">
            <summary>
              Do not use this interface.  It is used internally.
            </summary>
        </member>
        <member name="T:CrownPeak.Internal.Proxy.IInputAccess">
            <summary>
              Do not use this interface.  It is used internally.
            </summary>
        </member>
        <member name="T:CrownPeak.Internal.Proxy.ISessionHelper">
            <summary>
              Do not use this interface.  It is used internally.
            </summary>
        </member>
        <member name="T:CrownPeak.Internal.Proxy.ISessionHelperCallback">
            <summary>
              Session Helper Callback Service Operations
            </summary>
            <remarks>
              The ServiceContract attribute is not explicitly required for the callback interface.
              By specifying ISessionHelperCallback as the CallbackContract in ISessionHelper,
              an implicit ServiceContract attribute is applied to this interface.
            </remarks>
        </member>
        <member name="T:CrownPeak.Internal.Proxy.IUserAccess">
            <summary>
              Do not use this interface.  It is used internally.
            </summary>
        </member>
        <member name="T:CrownPeak.Internal.Proxy.IUtilAccess">
            <summary>
              Do not use this interface.  It is used internally.
            </summary>
        </member>
        <member name="T:CrownPeak.Internal.Debug.FtpImportInit">
            <summary>
              Will be called from client machine when debugging templates.
            </summary>
        </member>
    </members>
</doc>
